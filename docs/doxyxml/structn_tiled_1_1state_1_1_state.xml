<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structn_tiled_1_1state_1_1_state" kind="struct" language="C++" prot="public">
    <compoundname>nTiled::state::State</compoundname>
    <includes refid="_state_8h" local="no">State.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structn_tiled_1_1state_1_1_state_1ab00d43dd3fd50df072654524b92055ae" prot="public" static="no" mutable="no">
        <type><ref refid="structn_tiled_1_1state_1_1_view" kindref="compound">View</ref></type>
        <definition>View nTiled::state::State::view</definition>
        <argsstring></argsstring>
        <name>view</name>
        <briefdescription>
<para>The <ref refid="structn_tiled_1_1state_1_1_view" kindref="compound">View</ref> state of this <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="121" column="1" bodyfile="nTiled/include/state/State.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structn_tiled_1_1state_1_1_state_1a4ce56e93c698b60a898379886c0dbae0" prot="public" static="no" mutable="no">
        <type><ref refid="classn_tiled_1_1world_1_1_world" kindref="compound">world::World</ref> *</type>
        <definition>world::World* nTiled::state::State::p_world</definition>
        <argsstring></argsstring>
        <name>p_world</name>
        <briefdescription>
<para>A pointer to the World of this <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="123" column="1" bodyfile="nTiled/include/state/State.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structn_tiled_1_1state_1_1_state_1a641785e12a9bcbdbcdca10c0d514b14b" prot="public" static="no" mutable="no">
        <type><ref refid="classn_tiled_1_1state_1_1_texture_catalog" kindref="compound">TextureCatalog</ref></type>
        <definition>TextureCatalog nTiled::state::State::texture_catalog</definition>
        <argsstring></argsstring>
        <name>texture_catalog</name>
        <briefdescription>
<para>The <ref refid="classn_tiled_1_1state_1_1_texture_catalog" kindref="compound">TextureCatalog</ref> of this <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="125" column="1" bodyfile="nTiled/include/state/State.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structn_tiled_1_1state_1_1_state_1a6a2b5a042ce35eba23c9363b9440e06e" prot="public" static="no" mutable="no">
        <type><ref refid="structn_tiled_1_1state_1_1_shading" kindref="compound">Shading</ref></type>
        <definition>Shading nTiled::state::State::shading</definition>
        <argsstring></argsstring>
        <name>shading</name>
        <briefdescription>
<para>The <ref refid="structn_tiled_1_1state_1_1_shading" kindref="compound">Shading</ref> state of this <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="127" column="1" bodyfile="nTiled/include/state/State.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structn_tiled_1_1state_1_1_state_1adff981e0578ada3f98786eab3f3493bf" prot="public" static="no" mutable="no">
        <type><ref refid="structn_tiled_1_1state_1_1_log" kindref="compound">Log</ref></type>
        <definition>Log nTiled::state::State::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
<para>The <ref refid="structn_tiled_1_1state_1_1_log" kindref="compound">Log</ref> state of this <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="129" column="1" bodyfile="nTiled/include/state/State.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structn_tiled_1_1state_1_1_state_1af5c7167f8dec328c9202682445ef1fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nTiled::state::State::State</definition>
        <argsstring>(camera::Camera camera, camera::CameraControl *camera_control, glm::uvec2 viewport, ViewOutput *output, world::World *p_world, std::map&lt; std::string, std::string &gt; texture_file_map, std::vector&lt; pipeline::ForwardShaderId &gt; forward_shader_ids, glm::uvec2 tile_size, bool is_debug, bool is_logging_data, std::string log_output_path, unsigned int frame_start, unsigned int frame_end, bool exit_after_done, unsigned int exit_frame)</argsstring>
        <name>State</name>
        <param>
          <type><ref refid="classn_tiled_1_1camera_1_1_camera" kindref="compound">camera::Camera</ref></type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="classn_tiled_1_1camera_1_1_camera_control" kindref="compound">camera::CameraControl</ref> *</type>
          <declname>camera_control</declname>
        </param>
        <param>
          <type>glm::uvec2</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="structn_tiled_1_1state_1_1_view_output" kindref="compound">ViewOutput</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classn_tiled_1_1world_1_1_world" kindref="compound">world::World</ref> *</type>
          <declname>p_world</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>texture_file_map</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="_forward_shader_id_8h_1aadb9da564d0f546c336faf3a4903ff93" kindref="member">pipeline::ForwardShaderId</ref> &gt;</type>
          <declname>forward_shader_ids</declname>
        </param>
        <param>
          <type>glm::uvec2</type>
          <declname>tile_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_debug</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_logging_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>log_output_path</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frame_start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frame_end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exit_after_done</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>exit_frame</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> with a ForwardPipeline given the provided parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The camera of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>camera_control</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the CameraControl to be used in this new new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>view_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the viewport of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structn_tiled_1_1state_1_1_view_output" kindref="compound">ViewOutput</ref> state of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_world</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the World of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture_file_map</parametername>
</parameternamelist>
<parameterdescription>
<para>A map containing a mapping of texture names to texture files. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forward_shader_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of ForwardShaderId used in this run of nTiled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tile_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The tile size in pixels to be used in Tiled and Clustered shading. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_debug</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this run is in DebugMode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_logging_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this run is logging data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame at which logging should be started (ignored if !is_logging_data) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame at which logging should be ended (ignored if !is_logging_data) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exit_after_done</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the application should stop after logging the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="58" column="1" bodyfile="nTiled/src/state/State.cpp" bodystart="25" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structn_tiled_1_1state_1_1_state_1aa167dccc9e42f49730c08bdc2155b454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nTiled::state::State::State</definition>
        <argsstring>(camera::Camera camera, camera::CameraControl *camera_control, glm::uvec2 viewport, ViewOutput *output, world::World *p_world, std::map&lt; std::string, std::string &gt; texture_file_map, pipeline::DeferredShaderId deferred_shader_id, glm::uvec2 tile_size, bool is_debug, bool is_logging_data, std::string log_output_path, unsigned int frame_start, unsigned int frame_end, bool exit_after_done, unsigned int exit_frame)</argsstring>
        <name>State</name>
        <param>
          <type><ref refid="classn_tiled_1_1camera_1_1_camera" kindref="compound">camera::Camera</ref></type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="classn_tiled_1_1camera_1_1_camera_control" kindref="compound">camera::CameraControl</ref> *</type>
          <declname>camera_control</declname>
        </param>
        <param>
          <type>glm::uvec2</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="structn_tiled_1_1state_1_1_view_output" kindref="compound">ViewOutput</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="classn_tiled_1_1world_1_1_world" kindref="compound">world::World</ref> *</type>
          <declname>p_world</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>texture_file_map</declname>
        </param>
        <param>
          <type><ref refid="_deferred_shader_id_8h_1a225c1f7d638c4978ae7c69c9a3de8cf3" kindref="member">pipeline::DeferredShaderId</ref></type>
          <declname>deferred_shader_id</declname>
        </param>
        <param>
          <type>glm::uvec2</type>
          <declname>tile_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_debug</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_logging_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>log_output_path</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frame_start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>frame_end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exit_after_done</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>exit_frame</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> with a DeferredPipeline given the provided parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>The camera of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>camera_control</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the CameraControl to be used in this new new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>view_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the viewport of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structn_tiled_1_1state_1_1_view_output" kindref="compound">ViewOutput</ref> state of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_world</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the World of this new <ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture_file_map</parametername>
</parameternamelist>
<parameterdescription>
<para>A map containing a mapping of texture names to texture files. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deferred_shader_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The DeferredShaderId used in this run of nTiled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tile_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The tile size in pixels to be used in Tiled and Clustered shading. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_debug</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this run is in DebugMode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_logging_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this run is logging data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame at which logging should be started (ignored if !is_logging_data) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame at which logging should be ended (ignored if !is_logging_data) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exit_after_done</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the application should stop after logging the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="98" column="1" bodyfile="nTiled/src/state/State.cpp" bodystart="56" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structn_tiled_1_1state_1_1_state_1a1da63e3f079e5623387165a906a0529b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nTiled::state::State::~State</definition>
        <argsstring>()</argsstring>
        <name>~State</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/state/State.h" line="115" column="1" bodyfile="nTiled/src/state/State.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structn_tiled_1_1state_1_1_state" kindref="compound">State</ref> holds all attributes of relating to the state of this nTiled renderer. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="598">
        <label>nTiled::state::ViewOutput</label>
        <link refid="structn_tiled_1_1state_1_1_view_output"/>
      </node>
      <node id="592">
        <label>nTiled::state::TextureCatalog</label>
        <link refid="classn_tiled_1_1state_1_1_texture_catalog"/>
      </node>
      <node id="589">
        <label>nTiled::state::Log</label>
        <link refid="structn_tiled_1_1state_1_1_log"/>
      </node>
      <node id="594">
        <label>nTiled::camera::CameraControl</label>
        <link refid="classn_tiled_1_1camera_1_1_camera_control"/>
      </node>
      <node id="588">
        <label>nTiled::state::State</label>
        <link refid="structn_tiled_1_1state_1_1_state"/>
        <childnode refid="589" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
        <childnode refid="590" relation="usage">
          <edgelabel>p_world</edgelabel>
        </childnode>
        <childnode refid="591" relation="usage">
          <edgelabel>shading</edgelabel>
        </childnode>
        <childnode refid="592" relation="usage">
          <edgelabel>texture_catalog</edgelabel>
        </childnode>
        <childnode refid="593" relation="usage">
          <edgelabel>view</edgelabel>
        </childnode>
      </node>
      <node id="595">
        <label>nTiled::camera::Camera</label>
        <link refid="classn_tiled_1_1camera_1_1_camera"/>
        <childnode refid="596" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="594" relation="usage">
          <edgelabel>control</edgelabel>
        </childnode>
        <childnode refid="597" relation="usage">
          <edgelabel>construction_data</edgelabel>
        </childnode>
      </node>
      <node id="596">
        <label>nTiled::camera::CameraData</label>
        <link refid="structn_tiled_1_1camera_1_1_camera_data"/>
      </node>
      <node id="593">
        <label>nTiled::state::View</label>
        <link refid="structn_tiled_1_1state_1_1_view"/>
        <childnode refid="594" relation="usage">
          <edgelabel>camera_control</edgelabel>
        </childnode>
        <childnode refid="595" relation="usage">
          <edgelabel>camera</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>output</edgelabel>
        </childnode>
      </node>
      <node id="590">
        <label>nTiled::world::World</label>
        <link refid="classn_tiled_1_1world_1_1_world"/>
      </node>
      <node id="597">
        <label>nTiled::camera::CameraConstructionData</label>
        <link refid="structn_tiled_1_1camera_1_1_camera_construction_data"/>
      </node>
      <node id="591">
        <label>nTiled::state::Shading</label>
        <link refid="structn_tiled_1_1state_1_1_shading"/>
      </node>
    </collaborationgraph>
    <location file="nTiled/include/state/State.h" line="29" column="1" bodyfile="nTiled/include/state/State.h" bodystart="29" bodyend="130"/>
    <listofallmembers>
      <member refid="structn_tiled_1_1state_1_1_state_1adff981e0578ada3f98786eab3f3493bf" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>log</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1a4ce56e93c698b60a898379886c0dbae0" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>p_world</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1a6a2b5a042ce35eba23c9363b9440e06e" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>shading</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1af5c7167f8dec328c9202682445ef1fd7" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>State</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1aa167dccc9e42f49730c08bdc2155b454" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>State</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1a641785e12a9bcbdbcdca10c0d514b14b" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>texture_catalog</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1ab00d43dd3fd50df072654524b92055ae" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>view</name></member>
      <member refid="structn_tiled_1_1state_1_1_state_1a1da63e3f079e5623387165a906a0529b" prot="public" virt="non-virtual"><scope>nTiled::state::State</scope><name>~State</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
