<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="namespacen_tiled_1_1pipeline" kind="namespace" language="C++">
    <compoundname>nTiled::pipeline</compoundname>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_box_projector" prot="public">nTiled::pipeline::BoxProjector</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_clustered_light_manager" prot="public">nTiled::pipeline::ClusteredLightManager</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_clustered_light_manager_builder" prot="public">nTiled::pipeline::ClusteredLightManagerBuilder</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_clustered_light_manager_logged" prot="public">nTiled::pipeline::ClusteredLightManagerLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_clustered_light_manager_logged_builder" prot="public">nTiled::pipeline::ClusteredLightManagerLoggedBuilder</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_debug_pipeline" prot="public">nTiled::pipeline::DebugPipeline</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_debug_shader" prot="public">nTiled::pipeline::DebugShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_debug_tile_display_shader" prot="public">nTiled::pipeline::DebugTileDisplayShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_attenuated_shader" prot="public">nTiled::pipeline::DeferredAttenuatedShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_attenuated_shader_logged" prot="public">nTiled::pipeline::DeferredAttenuatedShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_clustered_shader" prot="public">nTiled::pipeline::DeferredClusteredShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_clustered_shader_logged" prot="public">nTiled::pipeline::DeferredClusteredShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_pipeline" prot="public">nTiled::pipeline::DeferredPipeline</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_pipeline_logged" prot="public">nTiled::pipeline::DeferredPipelineLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_shader" prot="public">nTiled::pipeline::DeferredShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_tiled_shader" prot="public">nTiled::pipeline::DeferredTiledShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_deferred_tiled_shader_logged" prot="public">nTiled::pipeline::DeferredTiledShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_depth_buffer" prot="public">nTiled::pipeline::DepthBuffer</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_attenuated_shader" prot="public">nTiled::pipeline::ForwardAttenuatedShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_attenuated_shader_logged" prot="public">nTiled::pipeline::ForwardAttenuatedShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_clustered_shader" prot="public">nTiled::pipeline::ForwardClusteredShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_clustered_shader_logged" prot="public">nTiled::pipeline::ForwardClusteredShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_pipeline" prot="public">nTiled::pipeline::ForwardPipeline</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_pipeline_logged" prot="public">nTiled::pipeline::ForwardPipelineLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_shader" prot="public">nTiled::pipeline::ForwardShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_tiled_shader" prot="public">nTiled::pipeline::ForwardTiledShader</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_forward_tiled_shader_logged" prot="public">nTiled::pipeline::ForwardTiledShaderLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_g_buffer" prot="public">nTiled::pipeline::GBuffer</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_light_grid" prot="public">nTiled::pipeline::LightGrid</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_light_projector" prot="public">nTiled::pipeline::LightProjector</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_pipeline" prot="public">nTiled::pipeline::Pipeline</innerclass>
    <innerclass refid="structn_tiled_1_1pipeline_1_1_pipeline_light" prot="public">nTiled::pipeline::PipelineLight</innerclass>
    <innerclass refid="structn_tiled_1_1pipeline_1_1_pipeline_object" prot="public">nTiled::pipeline::PipelineObject</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_shader" prot="public">nTiled::pipeline::Shader</innerclass>
    <innerclass refid="structn_tiled_1_1pipeline_1_1_shader_key" prot="public">nTiled::pipeline::ShaderKey</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_tiled_light_manager" prot="public">nTiled::pipeline::TiledLightManager</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_tiled_light_manager_builder" prot="public">nTiled::pipeline::TiledLightManagerBuilder</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_tiled_light_manager_logged" prot="public">nTiled::pipeline::TiledLightManagerLogged</innerclass>
    <innerclass refid="classn_tiled_1_1pipeline_1_1_tiled_light_manager_logged_builder" prot="public">nTiled::pipeline::TiledLightManagerLoggedBuilder</innerclass>
    <innernamespace refid="namespacen_tiled_1_1pipeline_1_1clustered">nTiled::pipeline::clustered</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_debug_shader_id_8h_1a0eaa36721ab4600e8cd5eafdb4a81c2c" prot="public" static="no">
        <name>DebugShaderId</name>
        <enumvalue id="dummy_1a0eaa36721ab4600e8cd5eafdb4a81c2ca5b3d9d325610da7da170b5a2794ed82f" prot="public">
          <name>TileDisplayShader</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum specifying all the possible DebugShaders. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/debug-view/shaders/DebugShaderId.h" line="12" column="1" bodyfile="nTiled/include/pipeline/debug-view/shaders/DebugShaderId.h" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="_deferred_shader_id_8h_1a225c1f7d638c4978ae7c69c9a3de8cf3" prot="public" static="no">
        <name>DeferredShaderId</name>
        <enumvalue id="dummy_1a225c1f7d638c4978ae7c69c9a3de8cf3aad3e27f86c6223294ec81bb7791aa4a9" prot="public">
          <name>DeferredAttenuated</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1a225c1f7d638c4978ae7c69c9a3de8cf3a85de20029242fb37b5ebb76708d205ec" prot="public">
          <name>DeferredTiled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1a225c1f7d638c4978ae7c69c9a3de8cf3a2b09e82f6f7d8aa30c0a6a552969a896" prot="public">
          <name>DeferredClustered</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum specifying all the possible deferred shaders. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/deferred/shaders/DeferredShaderId.h" line="12" column="1" bodyfile="nTiled/include/pipeline/deferred/shaders/DeferredShaderId.h" bodystart="12" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="_forward_shader_id_8h_1aadb9da564d0f546c336faf3a4903ff93" prot="public" static="no">
        <name>ForwardShaderId</name>
        <enumvalue id="dummy_1aadb9da564d0f546c336faf3a4903ff93a4ae091a7482f926e7da52a793ce211a2" prot="public">
          <name>ForwardAttenuated</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1aadb9da564d0f546c336faf3a4903ff93a94802b0b6945f988085666b783937b76" prot="public">
          <name>ForwardTexturedAttenuated</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1aadb9da564d0f546c336faf3a4903ff93af572dd35071284734d6d192667603d77" prot="public">
          <name>ForwardTiled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1aadb9da564d0f546c336faf3a4903ff93a0f5d6386bb7165e85da0636295c7df35" prot="public">
          <name>ForwardTexturedTiled</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1aadb9da564d0f546c336faf3a4903ff93a0fa86111299a5c58c3943db567567241" prot="public">
          <name>ForwardClustered</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum specifying all the possible forward shaders. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/forward/shaders/ForwardShaderId.h" line="12" column="1" bodyfile="nTiled/include/pipeline/forward/shaders/ForwardShaderId.h" bodystart="12" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="_pipeline_type_8h_1acf63cf30672a6b7f2bc37487b3bf4049" prot="public" static="no">
        <name>PipelineType</name>
        <enumvalue id="dummy_1acf63cf30672a6b7f2bc37487b3bf4049a67d2f6740a8eaebf4d5c6f79be8da481" prot="public">
          <name>Forward</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dummy_1acf63cf30672a6b7f2bc37487b3bf4049a4ed71db54748b36eeb398876b0c747ac" prot="public">
          <name>Deferred</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PipelineType class specifies all possible pipelines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/PipelineType.h" line="11" column="1" bodyfile="nTiled/include/pipeline/PipelineType.h" bodystart="11" bodyend="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_construct_quad_8h_1a617065c2f74bd9f4b98a8d0e5a103fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> *</type>
        <definition>PipelineObject * nTiled::pipeline::constructQuad</definition>
        <argsstring>(glm::vec2 lower_left_corner, glm::vec2 upper_right_corner, GLfloat depth)</argsstring>
        <name>constructQuad</name>
        <param>
          <type>glm::vec2</type>
          <declname>lower_left_corner</declname>
        </param>
        <param>
          <type>glm::vec2</type>
          <declname>upper_right_corner</declname>
        </param>
        <param>
          <type>GLfloat</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a new Quad <ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> with the given parameters and return a pointer to this <ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_left_corner</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower left corner of the new Quad. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_right_corner</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper right corner of the new Quad. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth from the camera of this new Quad.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the new <ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> Quad. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/pipeline-util/ConstructQuad.h" line="24" column="1" bodyfile="nTiled/src/pipeline/pipeline-util/ConstructQuad.cpp" bodystart="6" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_construct_quad_8h_1a3029c620f3e3836149307453db2238c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> *</type>
        <definition>PipelineObject * nTiled::pipeline::constructQuad</definition>
        <argsstring>()</argsstring>
        <name>constructQuad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a new <ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> containing a screen filling quad.</para><para><simplesect kind="return"><para>A pointer to the new <ref refid="structn_tiled_1_1pipeline_1_1_pipeline_object" kindref="compound">PipelineObject</ref> Quad. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/pipeline-util/ConstructQuad.h" line="32" column="1" bodyfile="nTiled/src/pipeline/pipeline-util/ConstructQuad.cpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a46b5c96a4423e860bec31ccdd0c64d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::stringstream</type>
        <definition>std::stringstream nTiled::pipeline::readShader</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>readShader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read the glsl shader at the given Path and return as stringstream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the openGL file to be read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::stringstream containing the read glsl file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="25" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="17" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1aa56efbe7641f594b452bacd0b53d4230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::stringstream</type>
        <definition>std::stringstream nTiled::pipeline::readShaderWithLights</definition>
        <argsstring>(const std::string &amp;path, int n_lights)</argsstring>
        <name>readShaderWithLights</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_lights</declname>
        </param>
        <briefdescription>
<para>Read the glsl shader at the given Path and return as stringstream where #N_LIGHTS has been replaced with the provided number of lights. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the openGL file to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_lights</parametername>
</parameternamelist>
<parameterdescription>
<para>The value with which #N_LIGHTS in the glsl file should be replaced.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::stringstream containing the read glsl file with #N_LIGHTS replaced by n_lights </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="38" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="31" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a70dceef54a874acb2db9c9e48ce564ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::compileShader</definition>
        <argsstring>(GLenum shader_type, const std::string &amp;shader)</argsstring>
        <name>compileShader</name>
        <param>
          <type>GLenum</type>
          <declname>shader_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
<para>Compile the given shader with the given shadertype into video memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The GLenum specifying the type of shader to be compiled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader</parametername>
</parameternamelist>
<parameterdescription>
<para>The string containing the glsl code of the shader to be compiled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>openGL pointer to the compiled shader in video memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="48" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="56" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a6d86003dd1fbf838cd1d074ca63effe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::createProgram</definition>
        <argsstring>(GLuint vertex_shader, GLuint fragment_shader)</argsstring>
        <name>createProgram</name>
        <param>
          <type>GLuint</type>
          <declname>vertex_shader</declname>
        </param>
        <param>
          <type>GLuint</type>
          <declname>fragment_shader</declname>
        </param>
        <briefdescription>
<para>Create a openGL program with the specified vertex and fragment shaders. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex_shader</parametername>
</parameternamelist>
<parameterdescription>
<para>openGL pointer to the compiled vertex shader </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment_shader</parametername>
</parameternamelist>
<parameterdescription>
<para>openGL pointer to the compiled fragment shader</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>openGL pointer to the compiled openGL program </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="58" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="90" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a3a1a5d0d5a7c527187450ab176e007ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::loadAndCompileShader</definition>
        <argsstring>(GLenum shader_type, const std::string &amp;path)</argsstring>
        <name>loadAndCompileShader</name>
        <param>
          <type>GLenum</type>
          <declname>shader_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load and compile the shader with the specified shader type at the the specified path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The GLenum specifying the new type of shader to be compiled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the openGL file to be read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>openGL pointer to the compiled shader in video memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="69" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="124" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a0c678c5bfe500d868e071c2dfdd532ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::createVertexFragmentProgram</definition>
        <argsstring>(const std::string &amp;vertex_shader_path, const std::string &amp;fragment_shader_path)</argsstring>
        <name>createVertexFragmentProgram</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertex_shader_path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fragment_shader_path</declname>
        </param>
        <briefdescription>
<para>Load and compile an openGL shader program with the specified vertex and fragment shader files. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex_shader_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the Vertex <ref refid="classn_tiled_1_1pipeline_1_1_shader" kindref="compound">Shader</ref> openGL file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment_shader_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the Fragement <ref refid="classn_tiled_1_1pipeline_1_1_shader" kindref="compound">Shader</ref> openGL file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>openGL pointer to the compiled openGL program </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="79" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="169" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="_load_shaders_8h_1a4b17b26bdf988733995c2fab7263f49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::createComputeProgram</definition>
        <argsstring>(const std::string &amp;compute_shader)</argsstring>
        <name>createComputeProgram</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>compute_shader</declname>
        </param>
        <briefdescription>
<para>Load and compile the openGL compute shader in the compute_shader. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compute_shader</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing the compute_shader openGL code</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>openGL pointer to the compiled compute shader in video memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadShaders.h" line="89" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadShaders.cpp" bodystart="206" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="_load_textures_8h_1a622b93fb389952a728dbce1617e6a3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint nTiled::pipeline::loadTexturePNG</definition>
        <argsstring>(const std::string &amp;file_name)</argsstring>
        <name>loadTexturePNG</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/include/pipeline/shader-util/LoadTextures.h" line="25" column="1" bodyfile="nTiled/src/pipeline/shader-util/LoadTextures.cpp" bodystart="11" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_box_projector_8cpp_1a0a2211932c8b07048286797ebe3f5816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float nTiled::pipeline::dirtyClamp</definition>
        <argsstring>(float to_be_clamped)</argsstring>
        <name>dirtyClamp</name>
        <param>
          <type>float</type>
          <declname>to_be_clamped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/pipeline/light-management/tiled/BoxProjector.cpp" line="17" column="1" bodyfile="nTiled/src/pipeline/light-management/tiled/BoxProjector.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nTiled/include/pipeline/debug-view/DebugPipeline.h" line="21" column="1"/>
  </compounddef>
</doxygen>
