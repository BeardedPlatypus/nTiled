<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="lodepng_8cpp" kind="file" language="C++">
    <compoundname>lodepng.cpp</compoundname>
    <includes local="yes">lodepng.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>lodepng.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="0">
        <label>nTiled/src/lodepng.cpp</label>
        <link refid="lodepng_8cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structucvector" prot="public">ucvector</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lodepng_8cpp_1af803b1b42c6d252d173df9cd0b32725a" prot="public" static="no">
        <name>CERROR_BREAK</name>
        <param><defname>errorvar</defname></param>
        <param><defname>code</defname></param>
        <initializer>{\
  errorvar = code;\
  break;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="99" column="9" bodyfile="nTiled/src/lodepng.cpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lodepng_8cpp_1a691b23954341613b96b6d98ce67d339c" prot="public" static="no">
        <name>ERROR_BREAK</name>
        <param><defname>code</defname></param>
        <initializer>CERROR_BREAK(error, code)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="106" column="9" bodyfile="nTiled/src/lodepng.cpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lodepng_8cpp_1a22b750f75293315981ee75cada129717" prot="public" static="no">
        <name>CERROR_RETURN_ERROR</name>
        <param><defname>errorvar</defname></param>
        <param><defname>code</defname></param>
        <initializer>{\
  errorvar = code;\
  return code;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="109" column="9" bodyfile="nTiled/src/lodepng.cpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lodepng_8cpp_1a84c132ca96d56cac57db68734db152b0" prot="public" static="no">
        <name>CERROR_TRY_RETURN</name>
        <param><defname>call</defname></param>
        <initializer>{\
  unsigned error = call;\
  if(error) return error;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="116" column="9" bodyfile="nTiled/src/lodepng.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lodepng_8cpp_1ac432c606cccae0b22f9ec10948f56ec4" prot="public" static="no">
        <name>CERROR_RETURN</name>
        <param><defname>errorvar</defname></param>
        <param><defname>code</defname></param>
        <initializer>{\
  errorvar = code;\
  return;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="123" column="9" bodyfile="nTiled/src/lodepng.cpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lodepng_8cpp_1a8ebce7aaef4f64e50d2ad2e3a383a505" prot="public" static="no">
        <type>struct <ref refid="structucvector" kindref="compound">ucvector</ref></type>
        <definition>typedef struct ucvector  ucvector</definition>
        <argsstring></argsstring>
        <name>ucvector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="213" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lodepng_8cpp_1a8b5b5e358236bf8112bd6e58ae8da1b2" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* LODEPNG_VERSION_STRING</definition>
        <argsstring></argsstring>
        <name>LODEPNG_VERSION_STRING</name>
        <initializer>= &quot;20160124&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="45" column="1" bodyfile="nTiled/src/lodepng.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lodepng_8cpp_1ac1c079603cf57a05259f2399730f0c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lodepng_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>lodepng_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lodepng_8cpp_1a13fc4514dfc7eba5d004156bf89c8699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* lodepng_realloc</definition>
        <argsstring>(void *ptr, size_t new_size)</argsstring>
        <name>lodepng_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lodepng_8cpp_1adae0da5edc0a51a5873a3e80487875bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lodepng_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>lodepng_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lodepng_8cpp_1ac03e508691c2826ee4065627465ccb4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned ucvector_reserve</definition>
        <argsstring>(ucvector *p, size_t allocsize)</argsstring>
        <name>ucvector_reserve</name>
        <param>
          <type><ref refid="structucvector" kindref="compound">ucvector</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="216" column="1" bodyfile="nTiled/src/lodepng.cpp" bodystart="216" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="lodepng_8cpp_1ae4e2da90ae4abb858852f211eb28d622" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned ucvector_resize</definition>
        <argsstring>(ucvector *p, size_t size)</argsstring>
        <name>ucvector_resize</name>
        <param>
          <type><ref refid="structucvector" kindref="compound">ucvector</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="233" column="1" bodyfile="nTiled/src/lodepng.cpp" bodystart="233" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="lodepng_8cpp_1ae0cbc68bfc44dcf1f3186c076272113b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned lodepng_read32bitInt</definition>
        <argsstring>(const unsigned char *buffer)</argsstring>
        <name>lodepng_read32bitInt</name>
        <param>
          <type>const unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nTiled/src/lodepng.cpp" line="323" column="1" bodyfile="nTiled/src/lodepng.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">LodePNG<sp/>version<sp/>20160124</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2016<sp/>Lode<sp/>Vandevenne</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="7"><highlight class="comment">warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="8"><highlight class="comment">arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="12"><highlight class="comment">freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="27"><highlight class="comment">The<sp/>manual<sp/>and<sp/>changelog<sp/>are<sp/>in<sp/>the<sp/>header<sp/>file<sp/>&quot;lodepng.h&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">Rename<sp/>this<sp/>file<sp/>to<sp/>lodepng.cpp<sp/>to<sp/>use<sp/>it<sp/>for<sp/>C++,<sp/>or<sp/>to<sp/>lodepng.c<sp/>to<sp/>use<sp/>it<sp/>for<sp/>C.</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lodepng.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_CPP*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&gt;=<sp/>1310)<sp/></highlight><highlight class="comment">/*Visual<sp/>Studio:<sp/>A<sp/>few<sp/>warning<sp/>types<sp/>are<sp/>not<sp/>desired<sp/>here.*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4244<sp/>)<sp/></highlight><highlight class="comment">/*implicit<sp/>conversions:<sp/>not<sp/>warned<sp/>by<sp/>gcc<sp/>-Wall<sp/>-Wextra<sp/>and<sp/>requires<sp/>too<sp/>much<sp/>casts*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4996<sp/>)<sp/></highlight><highlight class="comment">/*VS<sp/>does<sp/>not<sp/>like<sp/>fopen,<sp/>but<sp/>fopen_s<sp/>is<sp/>not<sp/>standard<sp/>C<sp/>so<sp/>unusable<sp/>here*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*_MSC_VER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>LODEPNG_VERSION_STRING<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;20160124&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment">This<sp/>source<sp/>file<sp/>is<sp/>built<sp/>up<sp/>in<sp/>the<sp/>following<sp/>large<sp/>parts.<sp/>The<sp/>code<sp/>sections</highlight></codeline>
<codeline lineno="49"><highlight class="comment">with<sp/>the<sp/>&quot;LODEPNG_COMPILE_&quot;<sp/>#defines<sp/>divide<sp/>this<sp/>up<sp/>further<sp/>in<sp/>an<sp/>intermixed<sp/>way.</highlight></codeline>
<codeline lineno="50"><highlight class="comment">-Tools<sp/>for<sp/>C<sp/>and<sp/>common<sp/>code<sp/>for<sp/>PNG<sp/>and<sp/>Zlib</highlight></codeline>
<codeline lineno="51"><highlight class="comment">-C<sp/>Code<sp/>for<sp/>Zlib<sp/>(huffman,<sp/>deflate,<sp/>...)</highlight></codeline>
<codeline lineno="52"><highlight class="comment">-C<sp/>Code<sp/>for<sp/>PNG<sp/>(file<sp/>format<sp/>chunks,<sp/>adam7,<sp/>PNG<sp/>filters,<sp/>color<sp/>conversions,<sp/>...)</highlight></codeline>
<codeline lineno="53"><highlight class="comment">-The<sp/>C++<sp/>wrapper<sp/>around<sp/>all<sp/>of<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*The<sp/>malloc,<sp/>realloc<sp/>and<sp/>free<sp/>functions<sp/>defined<sp/>here<sp/>with<sp/>&quot;lodepng_&quot;<sp/>in<sp/>front</highlight></codeline>
<codeline lineno="57"><highlight class="comment">of<sp/>the<sp/>name,<sp/>so<sp/>that<sp/>you<sp/>can<sp/>easily<sp/>change<sp/>them<sp/>to<sp/>others<sp/>related<sp/>to<sp/>your</highlight></codeline>
<codeline lineno="58"><highlight class="comment">platform<sp/>if<sp/>needed.<sp/>Everything<sp/>else<sp/>in<sp/>the<sp/>code<sp/>calls<sp/>these.<sp/>Pass</highlight></codeline>
<codeline lineno="59"><highlight class="comment">-DLODEPNG_NO_COMPILE_ALLOCATORS<sp/>to<sp/>the<sp/>compiler,<sp/>or<sp/>comment<sp/>out</highlight></codeline>
<codeline lineno="60"><highlight class="comment">#define<sp/>LODEPNG_COMPILE_ALLOCATORS<sp/>in<sp/>the<sp/>header,<sp/>to<sp/>disable<sp/>the<sp/>ones<sp/>here<sp/>and</highlight></codeline>
<codeline lineno="61"><highlight class="comment">define<sp/>them<sp/>in<sp/>your<sp/>own<sp/>project&apos;s<sp/>source<sp/>files<sp/>without<sp/>needing<sp/>to<sp/>change</highlight></codeline>
<codeline lineno="62"><highlight class="comment">lodepng<sp/>source<sp/>code.<sp/>Don&apos;t<sp/>forget<sp/>to<sp/>remove<sp/>&quot;static&quot;<sp/>if<sp/>you<sp/>copypaste<sp/>them</highlight></codeline>
<codeline lineno="63"><highlight class="comment">from<sp/>here.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ALLOCATORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lodepng_malloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lodepng_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(ptr,<sp/>new_size);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ALLOCATORS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lodepng_malloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lodepng_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ALLOCATORS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//<sp/>Tools<sp/>for<sp/>C,<sp/>and<sp/>common<sp/>code<sp/>for<sp/>PNG<sp/>and<sp/>Zlib.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment">Often<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error<sp/>a<sp/>value<sp/>is<sp/>assigned<sp/>to<sp/>a<sp/>variable<sp/>and<sp/>then<sp/>it<sp/>breaks</highlight></codeline>
<codeline lineno="94"><highlight class="comment">out<sp/>of<sp/>a<sp/>loop<sp/>(to<sp/>go<sp/>to<sp/>the<sp/>cleanup<sp/>phase<sp/>of<sp/>a<sp/>function).<sp/>This<sp/>macro<sp/>does<sp/>that.</highlight></codeline>
<codeline lineno="95"><highlight class="comment">It<sp/>makes<sp/>the<sp/>error<sp/>handling<sp/>code<sp/>shorter<sp/>and<sp/>more<sp/>readable.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">Example:<sp/>if(!uivector_resizev(&amp;frequencies_ll,<sp/>286,<sp/>0))<sp/>ERROR_BREAK(83);</highlight></codeline>
<codeline lineno="98"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CERROR_BREAK(errorvar,<sp/>code)\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/>errorvar<sp/>=<sp/>code;\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>break;\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*version<sp/>of<sp/>CERROR_BREAK<sp/>that<sp/>assumes<sp/>the<sp/>common<sp/>case<sp/>where<sp/>the<sp/>error<sp/>variable<sp/>is<sp/>named<sp/>&quot;error&quot;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERROR_BREAK(code)<sp/>CERROR_BREAK(error,<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*Set<sp/>error<sp/>var<sp/>to<sp/>the<sp/>error<sp/>code,<sp/>and<sp/>return<sp/>it.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CERROR_RETURN_ERROR(errorvar,<sp/>code)\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>errorvar<sp/>=<sp/>code;\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>return<sp/>code;\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*Try<sp/>the<sp/>code,<sp/>if<sp/>it<sp/>returns<sp/>error,<sp/>also<sp/>return<sp/>the<sp/>error.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CERROR_TRY_RETURN(call)\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>error<sp/>=<sp/>call;\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>if(error)<sp/>return<sp/>error;\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*Set<sp/>error<sp/>var<sp/>to<sp/>the<sp/>error<sp/>code,<sp/>and<sp/>return<sp/>from<sp/>the<sp/>void<sp/>function.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CERROR_RETURN(errorvar,<sp/>code)\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/>errorvar<sp/>=<sp/>code;\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/>return;\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment">About<sp/>uivector,<sp/>ucvector<sp/>and<sp/>string:</highlight></codeline>
<codeline lineno="131"><highlight class="comment">-All<sp/>of<sp/>them<sp/>wrap<sp/>dynamic<sp/>arrays<sp/>or<sp/>text<sp/>strings<sp/>in<sp/>a<sp/>similar<sp/>way.</highlight></codeline>
<codeline lineno="132"><highlight class="comment">-LodePNG<sp/>was<sp/>originally<sp/>written<sp/>in<sp/>C++.<sp/>The<sp/>vectors<sp/>replace<sp/>the<sp/>std::vectors<sp/>that<sp/>were<sp/>used<sp/>in<sp/>the<sp/>C++<sp/>version.</highlight></codeline>
<codeline lineno="133"><highlight class="comment">-The<sp/>string<sp/>tools<sp/>are<sp/>made<sp/>to<sp/>avoid<sp/>problems<sp/>with<sp/>compilers<sp/>that<sp/>declare<sp/>things<sp/>like<sp/>strncat<sp/>as<sp/>deprecated.</highlight></codeline>
<codeline lineno="134"><highlight class="comment">-They&apos;re<sp/>not<sp/>used<sp/>in<sp/>the<sp/>interface,<sp/>only<sp/>internally<sp/>in<sp/>this<sp/>file<sp/>as<sp/>static<sp/>functions.</highlight></codeline>
<codeline lineno="135"><highlight class="comment">-As<sp/>with<sp/>many<sp/>other<sp/>structs<sp/>in<sp/>this<sp/>file,<sp/>the<sp/>init<sp/>and<sp/>cleanup<sp/>functions<sp/>serve<sp/>as<sp/>ctor<sp/>and<sp/>dtor.</highlight></codeline>
<codeline lineno="136"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*dynamic<sp/>vector<sp/>of<sp/>unsigned<sp/>ints*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">uivector</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;<sp/></highlight><highlight class="comment">/*size<sp/>in<sp/>number<sp/>of<sp/>unsigned<sp/>longs*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocsize;<sp/></highlight><highlight class="comment">/*allocated<sp/>size<sp/>in<sp/>bytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/>uivector;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uivector_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>((uivector*)p)-&gt;size<sp/>=<sp/>((uivector*)p)-&gt;allocsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>lodepng_free(((uivector*)p)-&gt;data);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>((uivector*)p)-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uivector_reserve(uivector*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocsize)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allocsize<sp/>&gt;<sp/>p-&gt;allocsize)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>(allocsize<sp/>&gt;<sp/>p-&gt;allocsize<sp/>*<sp/>2)<sp/>?<sp/>allocsize<sp/>:<sp/>(allocsize<sp/>*<sp/>3<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>lodepng_realloc(p-&gt;data,<sp/>newsize);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;allocsize<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)data;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*error:<sp/>not<sp/>enough<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uivector_resize(uivector*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_reserve(p,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>p-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*success*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*resize<sp/>and<sp/>give<sp/>all<sp/>new<sp/>elements<sp/>the<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uivector_resizev(uivector*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldsize<sp/>=<sp/>p-&gt;size,<sp/>i;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resize(p,<sp/>size))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>oldsize;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>p-&gt;data[i]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uivector_init(uivector*<sp/>p)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>p-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>p-&gt;size<sp/>=<sp/>p-&gt;allocsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uivector_push_back(uivector*<sp/>p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resize(p,<sp/>p-&gt;size<sp/>+<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>p-&gt;data[p-&gt;size<sp/>-<sp/>1]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ZLIB*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>///////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*dynamic<sp/>vector<sp/>of<sp/>unsigned<sp/>chars*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="structucvector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structucvector" kindref="compound">ucvector</ref></highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;<sp/></highlight><highlight class="comment">/*used<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocsize;<sp/></highlight><highlight class="comment">/*allocated<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="structucvector" kindref="compound">ucvector</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ucvector_reserve(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocsize)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(allocsize<sp/>&gt;<sp/>p-&gt;allocsize)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>(allocsize<sp/>&gt;<sp/>p-&gt;allocsize<sp/>*<sp/>2)<sp/>?<sp/>allocsize<sp/>:<sp/>(allocsize<sp/>*<sp/>3<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>lodepng_realloc(p-&gt;data,<sp/>newsize);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;allocsize<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*error:<sp/>not<sp/>enough<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ucvector_resize(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_reserve(p,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>p-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*success*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ucvector_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>((<ref refid="structucvector" kindref="compound">ucvector</ref>*)p)-&gt;size<sp/>=<sp/>((<ref refid="structucvector" kindref="compound">ucvector</ref>*)p)-&gt;allocsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>lodepng_free(((<ref refid="structucvector" kindref="compound">ucvector</ref>*)p)-&gt;data);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>((<ref refid="structucvector" kindref="compound">ucvector</ref>*)p)-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ucvector_init(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>p-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>p-&gt;size<sp/>=<sp/>p-&gt;allocsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_PNG*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*you<sp/>can<sp/>both<sp/>convert<sp/>from<sp/>vector<sp/>to<sp/>buffer&amp;size<sp/>and<sp/>vica<sp/>versa.<sp/>If<sp/>you<sp/>use</highlight></codeline>
<codeline lineno="258"><highlight class="comment">init_buffer<sp/>to<sp/>take<sp/>over<sp/>a<sp/>buffer<sp/>and<sp/>size,<sp/>it<sp/>is<sp/>not<sp/>needed<sp/>to<sp/>use<sp/>cleanup*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ucvector_init_buffer(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>p-&gt;data<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>p-&gt;allocsize<sp/>=<sp/>p-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ZLIB*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(LODEPNG_COMPILE_PNG)<sp/>&amp;&amp;<sp/>defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS))<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ucvector_push_back(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(p,<sp/>p-&gt;size<sp/>+<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>p-&gt;data[p-&gt;size<sp/>-<sp/>1]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*defined(LODEPNG_COMPILE_PNG)<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>1<sp/>if<sp/>success,<sp/>0<sp/>if<sp/>failure<sp/>==&gt;<sp/>nothing<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>string_resize(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_realloc(*out,<sp/>size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>data[size]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*null<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*init<sp/>a<sp/>{char*,<sp/>size_t}<sp/>pair<sp/>for<sp/>use<sp/>as<sp/>string*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>string_init(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>string_resize(out,<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">/*free<sp/>the<sp/>above<sp/>pair<sp/>again*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>string_cleanup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>lodepng_free(*out);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>string_set(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize<sp/>=<sp/>strlen(in),<sp/>i;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(string_resize(out,<sp/>insize))</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>insize;<sp/>++i)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*out)[i]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_PNG*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_read32bitInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)((buffer[0]<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(buffer[1]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(buffer[2]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>buffer[3]);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LODEPNG_COMPILE_PNG)<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*buffer<sp/>must<sp/>have<sp/>at<sp/>least<sp/>4<sp/>allocated<sp/>bytes<sp/>available*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_set32bitInt(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>buffer[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((value<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>buffer[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((value<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>buffer[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((value<sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>buffer[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((value<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*defined(LODEPNG_COMPILE_PNG)<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_add32bitInt(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ucvector_resize(buffer,<sp/>buffer-&gt;size<sp/>+<sp/>4);<sp/></highlight><highlight class="comment">/*todo:<sp/>give<sp/>error<sp/>if<sp/>resize<sp/>failed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>lodepng_set32bitInt(&amp;buffer-&gt;data[buffer-&gt;size<sp/>-<sp/>4],<sp/>value);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>File<sp/>IO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_load_file(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>FILE*<sp/>file;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*provide<sp/>some<sp/>proper<sp/>output<sp/>values<sp/>if<sp/>error<sp/>will<sp/>happen*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>file<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>78;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*get<sp/>filesize:*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>fseek(file<sp/>,<sp/>0<sp/>,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>ftell(file);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>rewind(file);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>contents<sp/>of<sp/>the<sp/>file<sp/>into<sp/>the<sp/>vector*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&amp;&amp;<sp/>(*out))<sp/>(*outsize)<sp/>=<sp/>fread(*out,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size,<sp/>file);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(*out)<sp/>&amp;&amp;<sp/>size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*the<sp/>above<sp/>malloc<sp/>failed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">/*write<sp/>given<sp/>buffer<sp/>to<sp/>the<sp/>file,<sp/>overwriting<sp/>the<sp/>file,<sp/>it<sp/>doesn&apos;t<sp/>append<sp/>to<sp/>it.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_save_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>FILE*<sp/>file;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>file<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>79;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>fwrite((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer<sp/>,<sp/>1<sp/>,<sp/>buffersize,<sp/>file);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//<sp/>End<sp/>of<sp/>common<sp/>code<sp/>and<sp/>tools.<sp/>Begin<sp/>of<sp/>Zlib<sp/>related<sp/>code.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">/*TODO:<sp/>this<sp/>ignores<sp/>potential<sp/>out<sp/>of<sp/>memory<sp/>errors*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>addBitToStream(</highlight><highlight class="comment">/*size_t**/</highlight><highlight class="preprocessor"><sp/>bitpointer,<sp/></highlight><highlight class="comment">/*ucvector**/</highlight><highlight class="preprocessor"><sp/>bitstream,<sp/></highlight><highlight class="comment">/*unsigned<sp/>char*/</highlight><highlight class="preprocessor"><sp/>bit)\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*add<sp/>a<sp/>new<sp/>byte<sp/>at<sp/>the<sp/>end*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/>if(((*bitpointer)<sp/>&amp;<sp/>7)<sp/>==<sp/>0)<sp/>ucvector_push_back(bitstream,<sp/>(unsigned<sp/>char)0);\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*earlier<sp/>bit<sp/>of<sp/>huffman<sp/>code<sp/>is<sp/>in<sp/>a<sp/>lesser<sp/>significant<sp/>bit<sp/>of<sp/>an<sp/>earlier<sp/>byte*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/>(bitstream-&gt;data[bitstream-&gt;size<sp/>-<sp/>1])<sp/>|=<sp/>(bit<sp/>&lt;&lt;<sp/>((*bitpointer)<sp/>&amp;<sp/>0x7));\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/>++(*bitpointer);\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBitsToStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/><ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nbits;<sp/>++i)<sp/>addBitToStream(bitpointer,<sp/>bitstream,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)((value<sp/>&gt;&gt;<sp/>i)<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBitsToStreamReversed(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/><ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nbits;<sp/>++i)<sp/>addBitToStream(bitpointer,<sp/>bitstream,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)((value<sp/>&gt;&gt;<sp/>(nbits<sp/>-<sp/>1<sp/>-<sp/>i))<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>READBIT(bitpointer,<sp/>bitstream)<sp/>((bitstream[bitpointer<sp/>&gt;&gt;<sp/>3]<sp/>&gt;&gt;<sp/>(bitpointer<sp/>&amp;<sp/>0x7))<sp/>&amp;<sp/>(unsigned<sp/>char)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>readBitFromStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(READBIT(*bitpointer,<sp/>bitstream));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>++(*bitpointer);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readBitsFromStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0,<sp/>i;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>nbits;<sp/>++i)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>((unsigned)READBIT(*bitpointer,<sp/>bitstream))<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>++(*bitpointer);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Deflate<sp/>-<sp/>Huffman<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIRST_LENGTH_CODE_INDEX<sp/>257</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LAST_LENGTH_CODE_INDEX<sp/>285</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*256<sp/>literals,<sp/>the<sp/>end<sp/>code,<sp/>some<sp/>length<sp/>codes,<sp/>and<sp/>2<sp/>unused<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_DEFLATE_CODE_SYMBOLS<sp/>288</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>distance<sp/>codes<sp/>have<sp/>their<sp/>own<sp/>symbols,<sp/>30<sp/>used,<sp/>2<sp/>unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_DISTANCE_SYMBOLS<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>code<sp/>length<sp/>codes.<sp/>0-15:<sp/>code<sp/>lengths,<sp/>16:<sp/>copy<sp/>previous<sp/>3-6<sp/>times,<sp/>17:<sp/>3-10<sp/>zeros,<sp/>18:<sp/>11-138<sp/>zeros*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_CODE_LENGTH_CODES<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>base<sp/>lengths<sp/>represented<sp/>by<sp/>codes<sp/>257-285*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LENGTHBASE[29]</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>=<sp/>{3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>13,<sp/>15,<sp/>17,<sp/>19,<sp/>23,<sp/>27,<sp/>31,<sp/>35,<sp/>43,<sp/>51,<sp/>59,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>67,<sp/>83,<sp/>99,<sp/>115,<sp/>131,<sp/>163,<sp/>195,<sp/>227,<sp/>258};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>extra<sp/>bits<sp/>used<sp/>by<sp/>codes<sp/>257-285<sp/>(added<sp/>to<sp/>base<sp/>length)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LENGTHEXTRA[29]</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/><sp/>0,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/>1,<sp/><sp/>2,<sp/><sp/>2,<sp/><sp/>2,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>3,<sp/><sp/>3,<sp/><sp/>3,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/><sp/>4,<sp/><sp/>4,<sp/><sp/><sp/>4,<sp/><sp/><sp/>5,<sp/><sp/><sp/>5,<sp/><sp/><sp/>5,<sp/><sp/><sp/>5,<sp/><sp/><sp/>0};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>base<sp/>backwards<sp/>distances<sp/>(the<sp/>bits<sp/>of<sp/>distance<sp/>codes<sp/>appear<sp/>after<sp/>length<sp/>codes<sp/>and<sp/>use<sp/>their<sp/>own<sp/>huffman<sp/>tree)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>DISTANCEBASE[30]</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>7,<sp/>9,<sp/>13,<sp/>17,<sp/>25,<sp/>33,<sp/>49,<sp/>65,<sp/>97,<sp/>129,<sp/>193,<sp/>257,<sp/>385,<sp/>513,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>769,<sp/>1025,<sp/>1537,<sp/>2049,<sp/>3073,<sp/>4097,<sp/>6145,<sp/>8193,<sp/>12289,<sp/>16385,<sp/>24577};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>extra<sp/>bits<sp/>of<sp/>backwards<sp/>distances<sp/>(added<sp/>to<sp/>base)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>DISTANCEEXTRA[30]</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>2,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>5,<sp/><sp/><sp/>6,<sp/><sp/><sp/>6,<sp/><sp/><sp/>7,<sp/><sp/><sp/>7,<sp/><sp/><sp/>8,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,<sp/><sp/><sp/><sp/>9,<sp/><sp/><sp/><sp/>9,<sp/><sp/><sp/>10,<sp/><sp/><sp/>10,<sp/><sp/><sp/>11,<sp/><sp/><sp/>11,<sp/><sp/><sp/>12,<sp/><sp/><sp/><sp/>12,<sp/><sp/><sp/><sp/>13,<sp/><sp/><sp/><sp/>13};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>order<sp/>in<sp/>which<sp/>&quot;code<sp/>length<sp/>alphabet<sp/>code<sp/>lengths&quot;<sp/>are<sp/>stored,<sp/>out<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="481"><highlight class="comment">the<sp/>huffman<sp/>tree<sp/>of<sp/>the<sp/>dynamic<sp/>huffman<sp/>tree<sp/>lengths<sp/>is<sp/>generated*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CLCL_ORDER[NUM_CODE_LENGTH_CODES]</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>=<sp/>{16,<sp/>17,<sp/>18,<sp/>0,<sp/>8,<sp/>7,<sp/>9,<sp/>6,<sp/>10,<sp/>5,<sp/>11,<sp/>4,<sp/>12,<sp/>3,<sp/>13,<sp/>2,<sp/>14,<sp/>1,<sp/>15};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="488"><highlight class="comment">Huffman<sp/>tree<sp/>struct,<sp/>containing<sp/>multiple<sp/>representations<sp/>of<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="489"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">HuffmanTree</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>tree2d;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>tree1d;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>lengths;<sp/></highlight><highlight class="comment">/*the<sp/>lengths<sp/>of<sp/>the<sp/>codes<sp/>of<sp/>the<sp/>1d-tree*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxbitlen;<sp/></highlight><highlight class="comment">/*maximum<sp/>number<sp/>of<sp/>bits<sp/>a<sp/>single<sp/>code<sp/>can<sp/>get*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numcodes;<sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>symbols<sp/>in<sp/>the<sp/>alphabet<sp/>=<sp/>number<sp/>of<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">}<sp/>HuffmanTree;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/*function<sp/>used<sp/>for<sp/>debug<sp/>purposes<sp/>to<sp/>draw<sp/>the<sp/>tree<sp/>in<sp/>ascii<sp/>art<sp/>with<sp/>C++*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="501"><highlight class="comment">static<sp/>void<sp/>HuffmanTree_draw(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="502"><highlight class="comment">{</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;tree.<sp/>length:<sp/>&quot;<sp/>&lt;&lt;<sp/>tree-&gt;numcodes<sp/>&lt;&lt;<sp/>&quot;<sp/>maxbitlen:<sp/>&quot;<sp/>&lt;&lt;<sp/>tree-&gt;maxbitlen<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>tree-&gt;tree1d.size;<sp/>++i)</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/>if(tree-&gt;lengths.data[i])</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>tree-&gt;tree1d.data[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>tree-&gt;lengths.data[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="510"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HuffmanTree_init(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>tree-&gt;tree2d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>tree-&gt;tree1d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>tree-&gt;lengths<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HuffmanTree_cleanup(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>lodepng_free(tree-&gt;tree2d);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>lodepng_free(tree-&gt;tree1d);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>lodepng_free(tree-&gt;lengths);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*the<sp/>tree<sp/>representation<sp/>used<sp/>by<sp/>the<sp/>decoder.<sp/>return<sp/>value<sp/>is<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_make2DTree(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nodefilled<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*up<sp/>to<sp/>which<sp/>node<sp/>it<sp/>is<sp/>filled*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>treepos<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*position<sp/>in<sp/>the<sp/>tree<sp/>(1<sp/>of<sp/>the<sp/>numcodes<sp/>columns)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>tree-&gt;tree2d<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(tree-&gt;numcodes<sp/>*<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;tree2d)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/>convert<sp/>tree1d[]<sp/>to<sp/>tree2d[][].<sp/>In<sp/>the<sp/>2D<sp/>array,<sp/>a<sp/>value<sp/>of<sp/>32767<sp/>means</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/>uninited,<sp/>a<sp/>value<sp/>&gt;=<sp/>numcodes<sp/>is<sp/>an<sp/>address<sp/>to<sp/>another<sp/>bit,<sp/>a<sp/>value<sp/>&lt;<sp/>numcodes</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/>is<sp/>a<sp/>code.<sp/>The<sp/>2<sp/>rows<sp/>are<sp/>the<sp/>2<sp/>possible<sp/>bit<sp/>values<sp/>(0<sp/>or<sp/>1),<sp/>there<sp/>are<sp/>as</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/>many<sp/>columns<sp/>as<sp/>codes<sp/>-<sp/>1.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/>A<sp/>good<sp/>huffman<sp/>tree<sp/>has<sp/>N<sp/>*<sp/>2<sp/>-<sp/>1<sp/>nodes,<sp/>of<sp/>which<sp/>N<sp/>-<sp/>1<sp/>are<sp/>internal<sp/>nodes.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/>Here,<sp/>the<sp/>internal<sp/>nodes<sp/>are<sp/>stored<sp/>(what<sp/>their<sp/>0<sp/>and<sp/>1<sp/>option<sp/>point<sp/>to).</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/>There<sp/>is<sp/>only<sp/>memory<sp/>for<sp/>such<sp/>good<sp/>tree<sp/>currently,<sp/>if<sp/>there<sp/>are<sp/>more<sp/>nodes</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/>(due<sp/>to<sp/>too<sp/>long<sp/>length<sp/>codes),<sp/>error<sp/>55<sp/>will<sp/>happen</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>tree-&gt;numcodes<sp/>*<sp/>2;<sp/>++n)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>tree-&gt;tree2d[n]<sp/>=<sp/>32767;<sp/></highlight><highlight class="comment">/*32767<sp/>here<sp/>means<sp/>the<sp/>tree2d<sp/>isn&apos;t<sp/>filled<sp/>there<sp/>yet*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>tree-&gt;numcodes;<sp/>++n)<sp/></highlight><highlight class="comment">/*the<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>tree-&gt;lengths[n];<sp/>++i)<sp/></highlight><highlight class="comment">/*the<sp/>bits<sp/>for<sp/>this<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((tree-&gt;tree1d[n]<sp/>&gt;&gt;<sp/>(tree-&gt;lengths[n]<sp/>-<sp/>i<sp/>-<sp/>1))<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*oversubscribed,<sp/>see<sp/>comment<sp/>in<sp/>lodepng_error_text*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treepos<sp/>&gt;<sp/>2147483647<sp/>||<sp/>treepos<sp/>+<sp/>2<sp/>&gt;<sp/>tree-&gt;numcodes)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>55;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree-&gt;tree2d[2<sp/>*<sp/>treepos<sp/>+<sp/>bit]<sp/>==<sp/>32767)<sp/></highlight><highlight class="comment">/*not<sp/>yet<sp/>filled<sp/>in*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>+<sp/>1<sp/>==<sp/>tree-&gt;lengths[n])<sp/></highlight><highlight class="comment">/*last<sp/>bit*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;tree2d[2<sp/>*<sp/>treepos<sp/>+<sp/>bit]<sp/>=<sp/>n;<sp/></highlight><highlight class="comment">/*put<sp/>the<sp/>current<sp/>code<sp/>in<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>treepos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*put<sp/>address<sp/>of<sp/>the<sp/>next<sp/>step<sp/>in<sp/>here,<sp/>first<sp/>that<sp/>address<sp/>has<sp/>to<sp/>be<sp/>found<sp/>of<sp/>course</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it&apos;s<sp/>just<sp/>nodefilled<sp/>+<sp/>1)...*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nodefilled;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*addresses<sp/>encoded<sp/>with<sp/>numcodes<sp/>added<sp/>to<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;tree2d[2<sp/>*<sp/>treepos<sp/>+<sp/>bit]<sp/>=<sp/>nodefilled<sp/>+<sp/>tree-&gt;numcodes;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>treepos<sp/>=<sp/>nodefilled;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>treepos<sp/>=<sp/>tree-&gt;tree2d[2<sp/>*<sp/>treepos<sp/>+<sp/>bit]<sp/>-<sp/>tree-&gt;numcodes;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>tree-&gt;numcodes<sp/>*<sp/>2;<sp/>++n)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree-&gt;tree2d[n]<sp/>==<sp/>32767)<sp/>tree-&gt;tree2d[n]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*remove<sp/>possible<sp/>remaining<sp/>32767&apos;s*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="588"><highlight class="comment">Second<sp/>step<sp/>for<sp/>the<sp/>...makeFromLengths<sp/>and<sp/>...makeFromFrequencies<sp/>functions.</highlight></codeline>
<codeline lineno="589"><highlight class="comment">numcodes,<sp/>lengths<sp/>and<sp/>maxbitlen<sp/>must<sp/>already<sp/>be<sp/>filled<sp/>in<sp/>correctly.<sp/>return</highlight></codeline>
<codeline lineno="590"><highlight class="comment">value<sp/>is<sp/>error.</highlight></codeline>
<codeline lineno="591"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_makeFromLengths2(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>uivector<sp/>blcount;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>uivector<sp/>nextcode;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits,<sp/>n;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>uivector_init(&amp;blcount);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>uivector_init(&amp;nextcode);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>tree-&gt;tree1d<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(tree-&gt;numcodes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;tree1d)<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resizev(&amp;blcount,<sp/>tree-&gt;maxbitlen<sp/>+<sp/>1,<sp/>0)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>||<sp/>!uivector_resizev(&amp;nextcode,<sp/>tree-&gt;maxbitlen<sp/>+<sp/>1,<sp/>0))</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*step<sp/>1:<sp/>count<sp/>number<sp/>of<sp/>instances<sp/>of<sp/>each<sp/>code<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(bits<sp/>=<sp/>0;<sp/>bits<sp/>!=<sp/>tree-&gt;numcodes;<sp/>++bits)<sp/>++blcount.data[tree-&gt;lengths[bits]];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*step<sp/>2:<sp/>generate<sp/>the<sp/>nextcode<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(bits<sp/>=<sp/>1;<sp/>bits<sp/>&lt;=<sp/>tree-&gt;maxbitlen;<sp/>++bits)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextcode.data[bits]<sp/>=<sp/>(nextcode.data[bits<sp/>-<sp/>1]<sp/>+<sp/>blcount.data[bits<sp/>-<sp/>1])<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*step<sp/>3:<sp/>generate<sp/>all<sp/>the<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>!=<sp/>tree-&gt;numcodes;<sp/>++n)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree-&gt;lengths[n]<sp/>!=<sp/>0)<sp/>tree-&gt;tree1d[n]<sp/>=<sp/>nextcode.data[tree-&gt;lengths[n]]++;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;blcount);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;nextcode);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HuffmanTree_make2DTree(tree);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="633"><highlight class="comment">given<sp/>the<sp/>code<sp/>lengths<sp/>(as<sp/>stored<sp/>in<sp/>the<sp/>PNG<sp/>file),<sp/>generate<sp/>the<sp/>tree<sp/>as<sp/>defined</highlight></codeline>
<codeline lineno="634"><highlight class="comment">by<sp/>Deflate.<sp/>maxbitlen<sp/>is<sp/>the<sp/>maximum<sp/>bits<sp/>that<sp/>a<sp/>code<sp/>in<sp/>the<sp/>tree<sp/>can<sp/>have.</highlight></codeline>
<codeline lineno="635"><highlight class="comment">return<sp/>value<sp/>is<sp/>error.</highlight></codeline>
<codeline lineno="636"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_makeFromLengths(HuffmanTree*<sp/>tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numcodes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxbitlen)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>tree-&gt;lengths<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(numcodes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;lengths)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numcodes;<sp/>++i)<sp/>tree-&gt;lengths[i]<sp/>=<sp/>bitlen[i];</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>tree-&gt;numcodes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)numcodes;<sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>symbols*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>tree-&gt;maxbitlen<sp/>=<sp/>maxbitlen;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HuffmanTree_makeFromLengths2(tree);</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">/*BPM:<sp/>Boundary<sp/>Package<sp/>Merge,<sp/>see<sp/>&quot;A<sp/>Fast<sp/>and<sp/>Space-Economical<sp/>Algorithm<sp/>for<sp/>Length-Limited<sp/>Coding&quot;,</highlight></codeline>
<codeline lineno="652"><highlight class="comment">Jyrki<sp/>Katajainen,<sp/>Alistair<sp/>Moffat,<sp/>Andrew<sp/>Turpin,<sp/>1995.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">/*chain<sp/>node<sp/>for<sp/>boundary<sp/>package<sp/>merge*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BPMNode</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight;<sp/></highlight><highlight class="comment">/*the<sp/>sum<sp/>of<sp/>all<sp/>weights<sp/>in<sp/>this<sp/>chain*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index;<sp/></highlight><highlight class="comment">/*index<sp/>of<sp/>this<sp/>leaf<sp/>node<sp/>(called<sp/>&quot;count&quot;<sp/>in<sp/>the<sp/>paper)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BPMNode*<sp/>tail;<sp/></highlight><highlight class="comment">/*the<sp/>next<sp/>nodes<sp/>in<sp/>this<sp/>chain<sp/>(null<sp/>if<sp/>last)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_use;</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}<sp/>BPMNode;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*lists<sp/>of<sp/>chains*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BPMLists</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*memory<sp/>pool*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>memsize;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>BPMNode*<sp/>memory;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numfree;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nextfree;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>BPMNode**<sp/>freelist;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*two<sp/>heads<sp/>of<sp/>lookahead<sp/>chains<sp/>per<sp/>list*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>listsize;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>BPMNode**<sp/>chains0;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>BPMNode**<sp/>chains1;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}<sp/>BPMLists;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">/*creates<sp/>a<sp/>new<sp/>chain<sp/>node<sp/>with<sp/>the<sp/>given<sp/>parameters,<sp/>from<sp/>the<sp/>memory<sp/>in<sp/>the<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>BPMNode*<sp/>bpmnode_create(BPMLists*<sp/>lists,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/>BPMNode*<sp/>tail)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>BPMNode*<sp/>result;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*memory<sp/>full,<sp/>so<sp/>garbage<sp/>collect*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lists-&gt;nextfree<sp/>&gt;=<sp/>lists-&gt;numfree)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*mark<sp/>only<sp/>those<sp/>that<sp/>are<sp/>in<sp/>use*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lists-&gt;memsize;<sp/>++i)<sp/>lists-&gt;memory[i].in_use<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lists-&gt;listsize;<sp/>++i)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BPMNode*<sp/>node;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(node<sp/>=<sp/>lists-&gt;chains0[i];<sp/>node<sp/>!=<sp/>0;<sp/>node<sp/>=<sp/>node-&gt;tail)<sp/>node-&gt;in_use<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(node<sp/>=<sp/>lists-&gt;chains1[i];<sp/>node<sp/>!=<sp/>0;<sp/>node<sp/>=<sp/>node-&gt;tail)<sp/>node-&gt;in_use<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*collect<sp/>those<sp/>that<sp/>are<sp/>free*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;numfree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lists-&gt;memsize;<sp/>++i)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lists-&gt;memory[i].in_use)<sp/>lists-&gt;freelist[lists-&gt;numfree++]<sp/>=<sp/>&amp;lists-&gt;memory[i];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;nextfree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>lists-&gt;freelist[lists-&gt;nextfree++];</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>result-&gt;weight<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>result-&gt;index<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>result-&gt;tail<sp/>=<sp/>tail;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpmnode_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b)</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wa<sp/>=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BPMNode*)a)-&gt;weight;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wb<sp/>=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BPMNode*)b)-&gt;weight;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(wa<sp/>&lt;<sp/>wb)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(wa<sp/>&gt;<sp/>wb)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*make<sp/>the<sp/>qsort<sp/>a<sp/>stable<sp/>sort*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BPMNode*)a)-&gt;index<sp/>&lt;<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BPMNode*)b)-&gt;index<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">/*Boundary<sp/>Package<sp/>Merge<sp/>step,<sp/>numpresent<sp/>is<sp/>the<sp/>amount<sp/>of<sp/>leaves,<sp/>and<sp/>c<sp/>is<sp/>the<sp/>current<sp/>chain.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boundaryPM(BPMLists*<sp/>lists,<sp/>BPMNode*<sp/>leaves,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpresent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lastindex<sp/>=<sp/>lists-&gt;chains1[c]-&gt;index;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastindex<sp/>&gt;=<sp/>numpresent)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;chains0[c]<sp/>=<sp/>lists-&gt;chains1[c];</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;chains1[c]<sp/>=<sp/>bpmnode_create(lists,<sp/>leaves[lastindex].weight,<sp/>lastindex<sp/>+<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*sum<sp/>of<sp/>the<sp/>weights<sp/>of<sp/>the<sp/>head<sp/>nodes<sp/>of<sp/>the<sp/>previous<sp/>lookahead<sp/>chains.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>lists-&gt;chains0[c<sp/>-<sp/>1]-&gt;weight<sp/>+<sp/>lists-&gt;chains1[c<sp/>-<sp/>1]-&gt;weight;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;chains0[c]<sp/>=<sp/>lists-&gt;chains1[c];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lastindex<sp/>&lt;<sp/>numpresent<sp/>&amp;&amp;<sp/>sum<sp/>&gt;<sp/>leaves[lastindex].weight)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lists-&gt;chains1[c]<sp/>=<sp/>bpmnode_create(lists,<sp/>leaves[lastindex].weight,<sp/>lastindex<sp/>+<sp/>1,<sp/>lists-&gt;chains1[c]-&gt;tail);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>lists-&gt;chains1[c]<sp/>=<sp/>bpmnode_create(lists,<sp/>sum,<sp/>lastindex,<sp/>lists-&gt;chains1[c<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*in<sp/>the<sp/>end<sp/>we<sp/>are<sp/>only<sp/>interested<sp/>in<sp/>the<sp/>chain<sp/>of<sp/>the<sp/>last<sp/>list,<sp/>so<sp/>no</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>need<sp/>to<sp/>recurse<sp/>if<sp/>we&apos;re<sp/>at<sp/>the<sp/>last<sp/>one<sp/>(this<sp/>gives<sp/>measurable<sp/>speedup)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>+<sp/>1<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(2<sp/>*<sp/>numpresent<sp/>-<sp/>2))</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boundaryPM(lists,<sp/>leaves,<sp/>numpresent,<sp/>c<sp/>-<sp/>1,<sp/>num);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boundaryPM(lists,<sp/>leaves,<sp/>numpresent,<sp/>c<sp/>-<sp/>1,<sp/>num);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_huffman_code_lengths(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>lengths,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>frequencies,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numcodes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxbitlen)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpresent<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>symbols<sp/>with<sp/>non-zero<sp/>frequency*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>BPMNode*<sp/>leaves;<sp/></highlight><highlight class="comment">/*the<sp/>symbols,<sp/>only<sp/>those<sp/>with<sp/>&gt;<sp/>0<sp/>frequency*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numcodes<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>80;<sp/></highlight><highlight class="comment">/*error:<sp/>a<sp/>tree<sp/>of<sp/>0<sp/>symbols<sp/>is<sp/>not<sp/>supposed<sp/>to<sp/>be<sp/>made*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((1u<sp/>&lt;&lt;<sp/>maxbitlen)<sp/>&lt;<sp/>numcodes)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>80;<sp/></highlight><highlight class="comment">/*error:<sp/>represent<sp/>all<sp/>symbols*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>leaves<sp/>=<sp/>(BPMNode*)lodepng_malloc(numcodes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*leaves));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!leaves)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numcodes;<sp/>++i)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(frequencies[i]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leaves[numpresent].weight<sp/>=<sp/>(int)frequencies[i];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leaves[numpresent].index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++numpresent;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numcodes;<sp/>++i)<sp/>lengths[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*ensure<sp/>at<sp/>least<sp/>two<sp/>present<sp/>symbols.<sp/>There<sp/>should<sp/>be<sp/>at<sp/>least<sp/>one<sp/>symbol</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/>according<sp/>to<sp/>RFC<sp/>1951<sp/>section<sp/>3.2.7.<sp/>Some<sp/>decoders<sp/>incorrectly<sp/>require<sp/>two.<sp/>To</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>make<sp/>these<sp/>work<sp/>as<sp/>well<sp/>ensure<sp/>there<sp/>are<sp/>at<sp/>least<sp/>two<sp/>symbols.<sp/>The</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/>Package-Merge<sp/>code<sp/>below<sp/>also<sp/>doesn&apos;t<sp/>work<sp/>correctly<sp/>if<sp/>there&apos;s<sp/>only<sp/>one</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/>symbol,<sp/>it&apos;d<sp/>give<sp/>it<sp/>the<sp/>theoritical<sp/>0<sp/>bits<sp/>but<sp/>in<sp/>practice<sp/>zlib<sp/>wants<sp/>1<sp/>bit*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numpresent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>lengths[0]<sp/>=<sp/>lengths[1]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*note<sp/>that<sp/>for<sp/>RFC<sp/>1951<sp/>section<sp/>3.2.7,<sp/>only<sp/>lengths[0]<sp/>=<sp/>1<sp/>is<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numpresent<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>lengths[leaves[0].index]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>lengths[leaves[0].index<sp/>==<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMLists<sp/>lists;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMNode*<sp/>node;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(leaves,<sp/>numpresent,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BPMNode),<sp/>bpmnode_compare);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.listsize<sp/>=<sp/>maxbitlen;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.memsize<sp/>=<sp/>2<sp/>*<sp/>maxbitlen<sp/>*<sp/>(maxbitlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.nextfree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.numfree<sp/>=<sp/>lists.memsize;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.memory<sp/>=<sp/>(BPMNode*)lodepng_malloc(lists.memsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*lists.memory));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.freelist<sp/>=<sp/>(BPMNode**)lodepng_malloc(lists.memsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BPMNode*));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.chains0<sp/>=<sp/>(BPMNode**)lodepng_malloc(lists.listsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BPMNode*));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>lists.chains1<sp/>=<sp/>(BPMNode**)lodepng_malloc(lists.listsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BPMNode*));</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lists.memory<sp/>||<sp/>!lists.freelist<sp/>||<sp/>!lists.chains0<sp/>||<sp/>!lists.chains1)<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lists.memsize;<sp/>++i)<sp/>lists.freelist[i]<sp/>=<sp/>&amp;lists.memory[i];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bpmnode_create(&amp;lists,<sp/>leaves[0].weight,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bpmnode_create(&amp;lists,<sp/>leaves[1].weight,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lists.listsize;<sp/>++i)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lists.chains0[i]<sp/>=<sp/>&amp;lists.memory[0];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lists.chains1[i]<sp/>=<sp/>&amp;lists.memory[1];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*each<sp/>boundaryPM<sp/>call<sp/>adds<sp/>one<sp/>chain<sp/>to<sp/>the<sp/>last<sp/>list,<sp/>and<sp/>we<sp/>need<sp/>2<sp/>*<sp/>numpresent<sp/>-<sp/>2<sp/>chains.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>2;<sp/>i<sp/>!=<sp/>2<sp/>*<sp/>numpresent<sp/>-<sp/>2;<sp/>++i)<sp/>boundaryPM(&amp;lists,<sp/>leaves,<sp/>numpresent,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)maxbitlen<sp/>-<sp/>1,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(node<sp/>=<sp/>lists.chains1[maxbitlen<sp/>-<sp/>1];<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;tail)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>node-&gt;index;<sp/>++i)<sp/>++lengths[leaves[i].index];</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(lists.memory);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(lists.freelist);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(lists.chains0);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(lists.chains1);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>lodepng_free(leaves);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">/*Create<sp/>the<sp/>Huffman<sp/>tree<sp/>given<sp/>the<sp/>symbol<sp/>frequencies*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_makeFromFrequencies(HuffmanTree*<sp/>tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>frequencies,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mincodes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numcodes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxbitlen)</highlight></codeline>
<codeline lineno="845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!frequencies[numcodes<sp/>-<sp/>1]<sp/>&amp;&amp;<sp/>numcodes<sp/>&gt;<sp/>mincodes)<sp/>--numcodes;<sp/></highlight><highlight class="comment">/*trim<sp/>zeroes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>tree-&gt;maxbitlen<sp/>=<sp/>maxbitlen;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>tree-&gt;numcodes<sp/>=<sp/>(unsigned)numcodes;<sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>symbols*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>tree-&gt;lengths<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_realloc(tree-&gt;lengths,<sp/>numcodes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;lengths)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>all<sp/>lengths<sp/>to<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>memset(tree-&gt;lengths,<sp/>0,<sp/>numcodes<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_huffman_code_lengths(tree-&gt;lengths,<sp/>frequencies,<sp/>numcodes,<sp/>maxbitlen);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths2(tree);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_getCode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HuffmanTree*<sp/>tree,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tree-&gt;tree1d[index];</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HuffmanTree_getLength(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HuffmanTree*<sp/>tree,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tree-&gt;lengths[index];</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*get<sp/>the<sp/>literal<sp/>and<sp/>length<sp/>code<sp/>tree<sp/>of<sp/>a<sp/>deflated<sp/>block<sp/>with<sp/>fixed<sp/>tree,<sp/>as<sp/>per<sp/>the<sp/>deflate<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generateFixedLitLenTree(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bitlen)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*288<sp/>possible<sp/>codes:<sp/>0-255=literals,<sp/>256=endcode,<sp/>257-285=lengthcodes,<sp/>286-287=unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/><sp/><sp/>0;<sp/>i<sp/>&lt;=<sp/>143;<sp/>++i)<sp/>bitlen[i]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>144;<sp/>i<sp/>&lt;=<sp/>255;<sp/>++i)<sp/>bitlen[i]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>256;<sp/>i<sp/>&lt;=<sp/>279;<sp/>++i)<sp/>bitlen[i]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>280;<sp/>i<sp/>&lt;=<sp/>287;<sp/>++i)<sp/>bitlen[i]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths(tree,<sp/>bitlen,<sp/>NUM_DEFLATE_CODE_SYMBOLS,<sp/>15);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>lodepng_free(bitlen);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">/*get<sp/>the<sp/>distance<sp/>code<sp/>tree<sp/>of<sp/>a<sp/>deflated<sp/>block<sp/>with<sp/>fixed<sp/>tree,<sp/>as<sp/>specified<sp/>in<sp/>the<sp/>deflate<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generateFixedDistanceTree(HuffmanTree*<sp/>tree)</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(NUM_DISTANCE_SYMBOLS<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bitlen)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*there<sp/>are<sp/>32<sp/>distance<sp/>codes,<sp/>but<sp/>30-31<sp/>are<sp/>unused*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NUM_DISTANCE_SYMBOLS;<sp/>++i)<sp/>bitlen[i]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths(tree,<sp/>bitlen,<sp/>NUM_DISTANCE_SYMBOLS,<sp/>15);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>lodepng_free(bitlen);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="908"><highlight class="comment">returns<sp/>the<sp/>code,<sp/>or<sp/>(unsigned)(-1)<sp/>if<sp/>error<sp/>happened</highlight></codeline>
<codeline lineno="909"><highlight class="comment">inbitlength<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the<sp/>complete<sp/>buffer,<sp/>in<sp/>bits<sp/>(so<sp/>its<sp/>byte<sp/>length<sp/>times<sp/>8)</highlight></codeline>
<codeline lineno="910"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>huffmanDecodeSymbol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HuffmanTree*<sp/>codetree,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inbitlength)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>treepos<sp/>=<sp/>0,<sp/>ct;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*bp<sp/>&gt;=<sp/>inbitlength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1);<sp/></highlight><highlight class="comment">/*error:<sp/>end<sp/>of<sp/>input<sp/>memory<sp/>reached<sp/>without<sp/>endcode*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/><sp/>decode<sp/>the<sp/>symbol<sp/>from<sp/>the<sp/>tree.<sp/>The<sp/>&quot;readBitFromStream&quot;<sp/>code<sp/>is<sp/>inlined<sp/>in</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>expression<sp/>below<sp/>because<sp/>this<sp/>is<sp/>the<sp/>biggest<sp/>bottleneck<sp/>while<sp/>decoding</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>ct<sp/>=<sp/>codetree-&gt;tree2d[(treepos<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>READBIT(*bp,<sp/>in)];</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>++(*bp);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ct<sp/>&lt;<sp/>codetree-&gt;numcodes)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ct;<sp/></highlight><highlight class="comment">/*the<sp/>symbol<sp/>is<sp/>decoded,<sp/>return<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>treepos<sp/>=<sp/>ct<sp/>-<sp/>codetree-&gt;numcodes;<sp/></highlight><highlight class="comment">/*symbol<sp/>not<sp/>yet<sp/>decoded,<sp/>instead<sp/>move<sp/>tree<sp/>position*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(treepos<sp/>&gt;=<sp/>codetree-&gt;numcodes)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1);<sp/></highlight><highlight class="comment">/*error:<sp/>it<sp/>appeared<sp/>outside<sp/>the<sp/>codetree*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Inflator<sp/>(Decompressor)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">/*get<sp/>the<sp/>tree<sp/>of<sp/>a<sp/>deflated<sp/>block<sp/>with<sp/>fixed<sp/>tree,<sp/>as<sp/>specified<sp/>in<sp/>the<sp/>deflate<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getTreeInflateFixed(HuffmanTree*<sp/>tree_ll,<sp/>HuffmanTree*<sp/>tree_d)</highlight></codeline>
<codeline lineno="940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*TODO:<sp/>check<sp/>for<sp/>out<sp/>of<sp/>memory<sp/>errors*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>generateFixedLitLenTree(tree_ll);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>generateFixedDistanceTree(tree_d);</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">/*get<sp/>the<sp/>tree<sp/>of<sp/>a<sp/>deflated<sp/>block<sp/>with<sp/>dynamic<sp/>tree,<sp/>the<sp/>tree<sp/>itself<sp/>is<sp/>also<sp/>Huffman<sp/>compressed<sp/>with<sp/>a<sp/>known<sp/>tree*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getTreeInflateDynamic(HuffmanTree*<sp/>tree_ll,<sp/>HuffmanTree*<sp/>tree_d,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlength)</highlight></codeline>
<codeline lineno="949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*make<sp/>sure<sp/>that<sp/>length<sp/>values<sp/>that<sp/>aren&apos;t<sp/>filled<sp/>in<sp/>will<sp/>be<sp/>0,<sp/>or<sp/>a<sp/>wrong<sp/>tree<sp/>will<sp/>be<sp/>generated*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n,<sp/>HLIT,<sp/>HDIST,<sp/>HCLEN,<sp/>i;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inbitlength<sp/>=<sp/>inlength<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*see<sp/>comments<sp/>in<sp/>deflateDynamic<sp/>for<sp/>explanation<sp/>of<sp/>the<sp/>context<sp/>and<sp/>these<sp/>variables,<sp/>it<sp/>is<sp/>analogous*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen_ll<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*lit,len<sp/>code<sp/>lengths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen_d<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*dist<sp/>code<sp/>lengths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*code<sp/>length<sp/>code<sp/>lengths<sp/>(&quot;clcl&quot;),<sp/>the<sp/>bit<sp/>lengths<sp/>of<sp/>the<sp/>huffman<sp/>tree<sp/>used<sp/>to<sp/>compress<sp/>bitlen_ll<sp/>and<sp/>bitlen_d*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>bitlen_cl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_cl;<sp/></highlight><highlight class="comment">/*the<sp/>code<sp/>tree<sp/>for<sp/>code<sp/>length<sp/>codes<sp/>(the<sp/>huffman<sp/>tree<sp/>for<sp/>compressed<sp/>huffman<sp/>trees)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp)<sp/>+<sp/>14<sp/>&gt;<sp/>(inlength<sp/>&lt;&lt;<sp/>3))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>49;<sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>bit<sp/>pointer<sp/>is<sp/>or<sp/>will<sp/>go<sp/>past<sp/>the<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>literal/length<sp/>codes<sp/>+<sp/>257.<sp/>Unlike<sp/>the<sp/>spec,<sp/>the<sp/>value<sp/>257<sp/>is<sp/>added<sp/>to<sp/>it<sp/>here<sp/>already*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>HLIT<sp/>=<sp/><sp/>readBitsFromStream(bp,<sp/>in,<sp/>5)<sp/>+<sp/>257;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>distance<sp/>codes.<sp/>Unlike<sp/>the<sp/>spec,<sp/>the<sp/>value<sp/>1<sp/>is<sp/>added<sp/>to<sp/>it<sp/>here<sp/>already*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>HDIST<sp/>=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*number<sp/>of<sp/>code<sp/>length<sp/>codes.<sp/>Unlike<sp/>the<sp/>spec,<sp/>the<sp/>value<sp/>4<sp/>is<sp/>added<sp/>to<sp/>it<sp/>here<sp/>already*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>HCLEN<sp/>=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>4)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp)<sp/>+<sp/>HCLEN<sp/>*<sp/>3<sp/>&gt;<sp/>(inlength<sp/>&lt;&lt;<sp/>3))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>50;<sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>bit<sp/>pointer<sp/>is<sp/>or<sp/>will<sp/>go<sp/>past<sp/>the<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_cl);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>code<sp/>length<sp/>codes<sp/>out<sp/>of<sp/>3<sp/>*<sp/>(amount<sp/>of<sp/>code<sp/>length<sp/>codes)<sp/>bits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>bitlen_cl<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(NUM_CODE_LENGTH_CODES<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bitlen_cl)<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NUM_CODE_LENGTH_CODES;<sp/>++i)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HCLEN)<sp/>bitlen_cl[CLCL_ORDER[i]]<sp/>=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>3);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>bitlen_cl[CLCL_ORDER[i]]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*if<sp/>not,<sp/>it<sp/>must<sp/>stay<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths(&amp;tree_cl,<sp/>bitlen_cl,<sp/>NUM_CODE_LENGTH_CODES,<sp/>7);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*now<sp/>we<sp/>can<sp/>use<sp/>this<sp/>tree<sp/>to<sp/>read<sp/>the<sp/>lengths<sp/>for<sp/>the<sp/>tree<sp/>that<sp/>this<sp/>function<sp/>will<sp/>return*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>bitlen_ll<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>bitlen_d<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)lodepng_malloc(NUM_DISTANCE_SYMBOLS<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bitlen_ll<sp/>||<sp/>!bitlen_d)<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NUM_DEFLATE_CODE_SYMBOLS;<sp/>++i)<sp/>bitlen_ll[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NUM_DISTANCE_SYMBOLS;<sp/>++i)<sp/>bitlen_d[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*i<sp/>is<sp/>the<sp/>current<sp/>symbol<sp/>we&apos;re<sp/>reading<sp/>in<sp/>the<sp/>part<sp/>that<sp/>contains<sp/>the<sp/>code<sp/>lengths<sp/>of<sp/>lit/len<sp/>and<sp/>dist<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT<sp/>+<sp/>HDIST)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>huffmanDecodeSymbol(in,<sp/>bp,<sp/>&amp;tree_cl,<sp/>inbitlength);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>&lt;=<sp/>15)<sp/></highlight><highlight class="comment">/*a<sp/>length<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT)<sp/>bitlen_ll[i]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>bitlen_d[i<sp/>-<sp/>HLIT]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>16)<sp/></highlight><highlight class="comment">/*repeat<sp/>previous*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>replength<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">/*read<sp/>in<sp/>the<sp/>2<sp/>bits<sp/>that<sp/>indicate<sp/>repeat<sp/>length<sp/>(3-6)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value;<sp/></highlight><highlight class="comment">/*set<sp/>value<sp/>to<sp/>the<sp/>previous<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>0)<sp/>ERROR_BREAK(54);<sp/></highlight><highlight class="comment">/*can&apos;t<sp/>repeat<sp/>previous<sp/>if<sp/>i<sp/>is<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp<sp/>+<sp/>2)<sp/>&gt;<sp/>inbitlength)<sp/>ERROR_BREAK(50);<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>jumps<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replength<sp/>+=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>2);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT<sp/>+<sp/>1)<sp/>value<sp/>=<sp/>bitlen_ll[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>bitlen_d[i<sp/>-<sp/>HLIT<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*repeat<sp/>this<sp/>value<sp/>in<sp/>the<sp/>next<sp/>lengths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>replength;<sp/>++n)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&gt;=<sp/>HLIT<sp/>+<sp/>HDIST)<sp/>ERROR_BREAK(13);<sp/></highlight><highlight class="comment">/*error:<sp/>i<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT)<sp/>bitlen_ll[i]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>bitlen_d[i<sp/>-<sp/>HLIT]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>17)<sp/></highlight><highlight class="comment">/*repeat<sp/>&quot;0&quot;<sp/>3-10<sp/>times*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>replength<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">/*read<sp/>in<sp/>the<sp/>bits<sp/>that<sp/>indicate<sp/>repeat<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp<sp/>+<sp/>3)<sp/>&gt;<sp/>inbitlength)<sp/>ERROR_BREAK(50);<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>jumps<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replength<sp/>+=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>3);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*repeat<sp/>this<sp/>value<sp/>in<sp/>the<sp/>next<sp/>lengths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>replength;<sp/>++n)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&gt;=<sp/>HLIT<sp/>+<sp/>HDIST)<sp/>ERROR_BREAK(14);<sp/></highlight><highlight class="comment">/*error:<sp/>i<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT)<sp/>bitlen_ll[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>bitlen_d[i<sp/>-<sp/>HLIT]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>18)<sp/></highlight><highlight class="comment">/*repeat<sp/>&quot;0&quot;<sp/>11-138<sp/>times*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>replength<sp/>=<sp/>11;<sp/></highlight><highlight class="comment">/*read<sp/>in<sp/>the<sp/>bits<sp/>that<sp/>indicate<sp/>repeat<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp<sp/>+<sp/>7)<sp/>&gt;<sp/>inbitlength)<sp/>ERROR_BREAK(50);<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>jumps<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replength<sp/>+=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>7);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*repeat<sp/>this<sp/>value<sp/>in<sp/>the<sp/>next<sp/>lengths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>replength;<sp/>++n)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&gt;=<sp/>HLIT<sp/>+<sp/>HDIST)<sp/>ERROR_BREAK(15);<sp/></highlight><highlight class="comment">/*error:<sp/>i<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>HLIT)<sp/>bitlen_ll[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>bitlen_d[i<sp/>-<sp/>HLIT]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*if(code<sp/>==<sp/>(unsigned)(-1))*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*huffmanDecodeSymbol<sp/>returns<sp/>(unsigned)(-1)<sp/>in<sp/>case<sp/>of<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1))</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*return<sp/>error<sp/>code<sp/>10<sp/>or<sp/>11<sp/>depending<sp/>on<sp/>the<sp/>situation<sp/>that<sp/>happened<sp/>in<sp/>huffmanDecodeSymbol</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(10=no<sp/>endcode,<sp/>11=wrong<sp/>jump<sp/>outside<sp/>of<sp/>tree)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>(*bp)<sp/>&gt;<sp/>inbitlength<sp/>?<sp/>10<sp/>:<sp/>11;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>16;<sp/></highlight><highlight class="comment">/*unexisting<sp/>code,<sp/>this<sp/>can<sp/>never<sp/>happen*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_ll[256]<sp/>==<sp/>0)<sp/>ERROR_BREAK(64);<sp/></highlight><highlight class="comment">/*the<sp/>length<sp/>of<sp/>the<sp/>end<sp/>code<sp/>256<sp/>must<sp/>be<sp/>larger<sp/>than<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*now<sp/>we&apos;ve<sp/>finally<sp/>got<sp/>HLIT<sp/>and<sp/>HDIST,<sp/>so<sp/>generate<sp/>the<sp/>code<sp/>trees,<sp/>and<sp/>the<sp/>function<sp/>is<sp/>done*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths(tree_ll,<sp/>bitlen_ll,<sp/>NUM_DEFLATE_CODE_SYMBOLS,<sp/>15);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromLengths(tree_d,<sp/>bitlen_d,<sp/>NUM_DISTANCE_SYMBOLS,<sp/>15);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*end<sp/>of<sp/>error-while*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>lodepng_free(bitlen_cl);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>lodepng_free(bitlen_ll);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>lodepng_free(bitlen_d);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_cl);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">/*inflate<sp/>a<sp/>block<sp/>with<sp/>dynamic<sp/>of<sp/>fixed<sp/>Huffman<sp/>tree*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>inflateHuffmanBlock(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>pos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlength,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>btype)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_ll;<sp/></highlight><highlight class="comment">/*the<sp/>huffman<sp/>tree<sp/>for<sp/>literal<sp/>and<sp/>length<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_d;<sp/></highlight><highlight class="comment">/*the<sp/>huffman<sp/>tree<sp/>for<sp/>distance<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inbitlength<sp/>=<sp/>inlength<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_d);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(btype<sp/>==<sp/>1)<sp/>getTreeInflateFixed(&amp;tree_ll,<sp/>&amp;tree_d);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(btype<sp/>==<sp/>2)<sp/>error<sp/>=<sp/>getTreeInflateDynamic(&amp;tree_ll,<sp/>&amp;tree_d,<sp/>in,<sp/>bp,<sp/>inlength);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)<sp/></highlight><highlight class="comment">/*decode<sp/>all<sp/>symbols<sp/>until<sp/>end<sp/>reached,<sp/>breaks<sp/>at<sp/>end<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*code_ll<sp/>is<sp/>literal,<sp/>length<sp/>or<sp/>end<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code_ll<sp/>=<sp/>huffmanDecodeSymbol(in,<sp/>bp,<sp/>&amp;tree_ll,<sp/>inbitlength);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code_ll<sp/>&lt;=<sp/>255)<sp/></highlight><highlight class="comment">/*literal<sp/>symbol*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*ucvector_push_back<sp/>would<sp/>do<sp/>the<sp/>same,<sp/>but<sp/>for<sp/>some<sp/>reason<sp/>the<sp/>two<sp/>lines<sp/>below<sp/>run<sp/>10%<sp/>faster*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(out,<sp/>(*pos)<sp/>+<sp/>1))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;data[*pos]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)code_ll;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++(*pos);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code_ll<sp/>&gt;=<sp/>FIRST_LENGTH_CODE_INDEX<sp/>&amp;&amp;<sp/>code_ll<sp/>&lt;=<sp/>LAST_LENGTH_CODE_INDEX)<sp/></highlight><highlight class="comment">/*length<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code_d,<sp/>distance;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numextrabits_l,<sp/>numextrabits_d;<sp/></highlight><highlight class="comment">/*extra<sp/>bits<sp/>for<sp/>length<sp/>and<sp/>distance*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/>forward,<sp/>backward,<sp/>length;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*part<sp/>1:<sp/>get<sp/>length<sp/>base*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>LENGTHBASE[code_ll<sp/>-<sp/>FIRST_LENGTH_CODE_INDEX];</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*part<sp/>2:<sp/>get<sp/>extra<sp/>bits<sp/>and<sp/>add<sp/>the<sp/>value<sp/>of<sp/>that<sp/>to<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numextrabits_l<sp/>=<sp/>LENGTHEXTRA[code_ll<sp/>-<sp/>FIRST_LENGTH_CODE_INDEX];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp<sp/>+<sp/>numextrabits_l)<sp/>&gt;<sp/>inbitlength)<sp/>ERROR_BREAK(51);<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>will<sp/>jump<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>numextrabits_l);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*part<sp/>3:<sp/>get<sp/>distance<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code_d<sp/>=<sp/>huffmanDecodeSymbol(in,<sp/>bp,<sp/>&amp;tree_d,<sp/>inbitlength);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code_d<sp/>&gt;<sp/>29)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code_ll<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(-1))<sp/></highlight><highlight class="comment">/*huffmanDecodeSymbol<sp/>returns<sp/>(unsigned)(-1)<sp/>in<sp/>case<sp/>of<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*return<sp/>error<sp/>code<sp/>10<sp/>or<sp/>11<sp/>depending<sp/>on<sp/>the<sp/>situation<sp/>that<sp/>happened<sp/>in<sp/>huffmanDecodeSymbol</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(10=no<sp/>endcode,<sp/>11=wrong<sp/>jump<sp/>outside<sp/>of<sp/>tree)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>(*bp)<sp/>&gt;<sp/>inlength<sp/>*<sp/>8<sp/>?<sp/>10<sp/>:<sp/>11;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>18;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>distance<sp/>code<sp/>(30-31<sp/>are<sp/>never<sp/>used)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>=<sp/>DISTANCEBASE[code_d];</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*part<sp/>4:<sp/>get<sp/>extra<sp/>bits<sp/>from<sp/>distance*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numextrabits_d<sp/>=<sp/>DISTANCEEXTRA[code_d];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*bp<sp/>+<sp/>numextrabits_d)<sp/>&gt;<sp/>inbitlength)<sp/>ERROR_BREAK(51);<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>will<sp/>jump<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>+=<sp/>readBitsFromStream(bp,<sp/>in,<sp/>numextrabits_d);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*part<sp/>5:<sp/>fill<sp/>in<sp/>all<sp/>the<sp/>out[n]<sp/>values<sp/>based<sp/>on<sp/>the<sp/>length<sp/>and<sp/>dist*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>(*pos);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(distance<sp/>&gt;<sp/>start)<sp/>ERROR_BREAK(52);<sp/></highlight><highlight class="comment">/*too<sp/>long<sp/>backward<sp/>distance*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>backward<sp/>=<sp/>start<sp/>-<sp/>distance;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(out,<sp/>(*pos)<sp/>+<sp/>length))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(forward<sp/>=<sp/>0;<sp/>forward<sp/>&lt;<sp/>length;<sp/>++forward)</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;data[(*pos)++]<sp/>=<sp/>out-&gt;data[backward++];</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(out-&gt;data<sp/>+<sp/>*pos,<sp/>out-&gt;data<sp/>+<sp/>backward,<sp/>length);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pos<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code_ll<sp/>==<sp/>256)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*end<sp/>code,<sp/>break<sp/>the<sp/>loop*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*if(code<sp/>==<sp/>(unsigned)(-1))*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*huffmanDecodeSymbol<sp/>returns<sp/>(unsigned)(-1)<sp/>in<sp/>case<sp/>of<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*return<sp/>error<sp/>code<sp/>10<sp/>or<sp/>11<sp/>depending<sp/>on<sp/>the<sp/>situation<sp/>that<sp/>happened<sp/>in<sp/>huffmanDecodeSymbol</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(10=no<sp/>endcode,<sp/>11=wrong<sp/>jump<sp/>outside<sp/>of<sp/>tree)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>((*bp)<sp/>&gt;<sp/>inlength<sp/>*<sp/>8)<sp/>?<sp/>10<sp/>:<sp/>11;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_d);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>inflateNoCompression(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>pos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inlength)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LEN,<sp/>NLEN,<sp/>n,<sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*go<sp/>to<sp/>first<sp/>boundary<sp/>of<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(((*bp)<sp/>&amp;<sp/>0x7)<sp/>!=<sp/>0)<sp/>++(*bp);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>(*bp)<sp/>/<sp/>8;<sp/></highlight><highlight class="comment">/*byte<sp/>position*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>LEN<sp/>(2<sp/>bytes)<sp/>and<sp/>NLEN<sp/>(2<sp/>bytes)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>+<sp/>4<sp/>&gt;=<sp/>inlength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>52;<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>will<sp/>jump<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>LEN<sp/>=<sp/>in[p]<sp/>+<sp/>256u<sp/>*<sp/>in[p<sp/>+<sp/>1];<sp/>p<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>NLEN<sp/>=<sp/>in[p]<sp/>+<sp/>256u<sp/>*<sp/>in[p<sp/>+<sp/>1];<sp/>p<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*check<sp/>if<sp/>16-bit<sp/>NLEN<sp/>is<sp/>really<sp/>the<sp/>one&apos;s<sp/>complement<sp/>of<sp/>LEN*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LEN<sp/>+<sp/>NLEN<sp/>!=<sp/>65535)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>21;<sp/></highlight><highlight class="comment">/*error:<sp/>NLEN<sp/>is<sp/>not<sp/>one&apos;s<sp/>complement<sp/>of<sp/>LEN*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(out,<sp/>(*pos)<sp/>+<sp/>LEN))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>literal<sp/>data:<sp/>LEN<sp/>bytes<sp/>are<sp/>now<sp/>stored<sp/>in<sp/>the<sp/>out<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>+<sp/>LEN<sp/>&gt;<sp/>inlength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>23;<sp/></highlight><highlight class="comment">/*error:<sp/>reading<sp/>outside<sp/>of<sp/>in<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>LEN;<sp/>++n)<sp/>out-&gt;data[(*pos)++]<sp/>=<sp/>in[p++];</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>(*bp)<sp/>=<sp/>p<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_inflatev(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*bit<sp/>pointer<sp/>in<sp/>the<sp/>&quot;in&quot;<sp/>data,<sp/>current<sp/>byte<sp/>is<sp/>bp<sp/>&gt;&gt;<sp/>3,<sp/>current<sp/>bit<sp/>is<sp/>bp<sp/>&amp;<sp/>0x7<sp/>(from<sp/>lsb<sp/>to<sp/>msb<sp/>of<sp/>the<sp/>byte)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BFINAL<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*byte<sp/>position<sp/>in<sp/>the<sp/>out<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>(void)settings;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!BFINAL)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BTYPE;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bp<sp/>+<sp/>2<sp/>&gt;=<sp/>insize<sp/>*<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>52;<sp/></highlight><highlight class="comment">/*error,<sp/>bit<sp/>pointer<sp/>will<sp/>jump<sp/>past<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>BFINAL<sp/>=<sp/>readBitFromStream(&amp;bp,<sp/>in);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>BTYPE<sp/>=<sp/>1u<sp/>*<sp/>readBitFromStream(&amp;bp,<sp/>in);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>BTYPE<sp/>+=<sp/>2u<sp/>*<sp/>readBitFromStream(&amp;bp,<sp/>in);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(BTYPE<sp/>==<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>20;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>BTYPE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(BTYPE<sp/>==<sp/>0)<sp/>error<sp/>=<sp/>inflateNoCompression(out,<sp/>in,<sp/>&amp;bp,<sp/>&amp;pos,<sp/>insize);<sp/></highlight><highlight class="comment">/*no<sp/>compression*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>inflateHuffmanBlock(out,<sp/>in,<sp/>&amp;bp,<sp/>&amp;pos,<sp/>insize,<sp/>BTYPE);<sp/></highlight><highlight class="comment">/*compression,<sp/>BTYPE<sp/>01<sp/>or<sp/>10*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_inflate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>v;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>ucvector_init_buffer(&amp;v,<sp/>*out,<sp/>*outsize);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_inflatev(&amp;v,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>v.data;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>v.size;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>inflate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;custom_inflate)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_inflate(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_inflate(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Deflator<sp/>(Compressor)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MAX_SUPPORTED_DEFLATE_LENGTH<sp/>=<sp/>258;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">/*bitlen<sp/>is<sp/>the<sp/>size<sp/>in<sp/>bits<sp/>of<sp/>the<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addHuffmanSymbol(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/><ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>compressed,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitlen)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>addBitsToStreamReversed(bp,<sp/>compressed,<sp/>code,<sp/>bitlen);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">/*search<sp/>the<sp/>index<sp/>in<sp/>the<sp/>array,<sp/>that<sp/>has<sp/>the<sp/>largest<sp/>value<sp/>smaller<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>given<sp/>value,</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">given<sp/>array<sp/>must<sp/>be<sp/>sorted<sp/>(if<sp/>no<sp/>value<sp/>is<sp/>smaller,<sp/>it<sp/>returns<sp/>the<sp/>size<sp/>of<sp/>the<sp/>given<sp/>array)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>searchCodeIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>array_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*binary<sp/>search<sp/>(only<sp/>small<sp/>gain<sp/>over<sp/>linear).<sp/>TODO:<sp/>use<sp/>CPU<sp/>log2<sp/>instruction<sp/>for<sp/>getting<sp/>symbols<sp/>instead*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>array_size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(left<sp/>&lt;=<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>(left<sp/>+<sp/>right)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[mid]<sp/>&gt;=<sp/>value)<sp/>right<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(left<sp/>&gt;=<sp/>array_size<sp/>||<sp/>array[left]<sp/>&gt;<sp/>value)<sp/>left--;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addLengthDistance(uivector*<sp/>values,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>distance)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*values<sp/>in<sp/>encoded<sp/>vector<sp/>are<sp/>those<sp/>used<sp/>by<sp/>deflate:</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/><sp/>0-255:<sp/>literal<sp/>bytes</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/>256:<sp/>end</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/>257-285:<sp/>length/distance<sp/>pair<sp/>(length<sp/>code,<sp/>followed<sp/>by<sp/>extra<sp/>length<sp/>bits,<sp/>distance<sp/>code,<sp/>extra<sp/>distance<sp/>bits)</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/>286-287:<sp/>invalid*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length_code<sp/>=<sp/>(unsigned)searchCodeIndex(LENGTHBASE,<sp/>29,<sp/>length);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>extra_length<sp/>=<sp/>(unsigned)(length<sp/>-<sp/>LENGTHBASE[length_code]);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dist_code<sp/>=<sp/>(unsigned)searchCodeIndex(DISTANCEBASE,<sp/>30,<sp/>distance);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>extra_distance<sp/>=<sp/>(unsigned)(distance<sp/>-<sp/>DISTANCEBASE[dist_code]);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>uivector_push_back(values,<sp/>length_code<sp/>+<sp/>FIRST_LENGTH_CODE_INDEX);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>uivector_push_back(values,<sp/>extra_length);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>uivector_push_back(values,<sp/>dist_code);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>uivector_push_back(values,<sp/>extra_distance);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">/*3<sp/>bytes<sp/>of<sp/>data<sp/>get<sp/>encoded<sp/>into<sp/>two<sp/>bytes.<sp/>The<sp/>hash<sp/>cannot<sp/>use<sp/>more<sp/>than<sp/>3</highlight></codeline>
<codeline lineno="1327"><highlight class="comment">bytes<sp/>as<sp/>input<sp/>because<sp/>3<sp/>is<sp/>the<sp/>minimum<sp/>match<sp/>length<sp/>for<sp/>deflate*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HASH_NUM_VALUES<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HASH_BIT_MASK<sp/>=<sp/>65535;<sp/></highlight><highlight class="comment">/*HASH_NUM_VALUES<sp/>-<sp/>1,<sp/>but<sp/>C90<sp/>does<sp/>not<sp/>like<sp/>that<sp/>as<sp/>initializer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Hash</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>head;<sp/></highlight><highlight class="comment">/*hash<sp/>value<sp/>to<sp/>head<sp/>circular<sp/>pos<sp/>-<sp/>can<sp/>be<sp/>outdated<sp/>if<sp/>went<sp/>around<sp/>window*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*circular<sp/>pos<sp/>to<sp/>prev<sp/>circular<sp/>pos*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>chain;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>val;<sp/></highlight><highlight class="comment">/*circular<sp/>pos<sp/>to<sp/>hash<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*TODO:<sp/>do<sp/>this<sp/>not<sp/>only<sp/>for<sp/>zeros<sp/>but<sp/>for<sp/>any<sp/>repeated<sp/>byte.<sp/>However<sp/>for<sp/>PNG</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/>it&apos;s<sp/>always<sp/>going<sp/>to<sp/>be<sp/>the<sp/>zeros<sp/>that<sp/>dominate,<sp/>so<sp/>not<sp/>important<sp/>for<sp/>PNG*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>headz;<sp/></highlight><highlight class="comment">/*similar<sp/>to<sp/>head,<sp/>but<sp/>for<sp/>chainz*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>chainz;<sp/></highlight><highlight class="comment">/*those<sp/>with<sp/>same<sp/>amount<sp/>of<sp/>zeros*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>zeros;<sp/></highlight><highlight class="comment">/*length<sp/>of<sp/>zeros<sp/>streak,<sp/>used<sp/>as<sp/>a<sp/>second<sp/>hash<sp/>chain*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}<sp/>Hash;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>hash_init(Hash*<sp/>hash,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>windowsize)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>hash-&gt;head<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>HASH_NUM_VALUES);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>hash-&gt;val<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>windowsize);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>hash-&gt;chain<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>*<sp/>windowsize);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>hash-&gt;zeros<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>*<sp/>windowsize);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>hash-&gt;headz<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(MAX_SUPPORTED_DEFLATE_LENGTH<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>hash-&gt;chainz<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>*<sp/>windowsize);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hash-&gt;head<sp/>||<sp/>!hash-&gt;chain<sp/>||<sp/>!hash-&gt;val<sp/><sp/>||<sp/>!hash-&gt;headz||<sp/>!hash-&gt;chainz<sp/>||<sp/>!hash-&gt;zeros)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*initialize<sp/>hash<sp/>table*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>HASH_NUM_VALUES;<sp/>++i)<sp/>hash-&gt;head[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>windowsize;<sp/>++i)<sp/>hash-&gt;val[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>windowsize;<sp/>++i)<sp/>hash-&gt;chain[i]<sp/>=<sp/>i;<sp/></highlight><highlight class="comment">/*same<sp/>value<sp/>as<sp/>index<sp/>indicates<sp/>uninitialized*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>MAX_SUPPORTED_DEFLATE_LENGTH;<sp/>++i)<sp/>hash-&gt;headz[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>windowsize;<sp/>++i)<sp/>hash-&gt;chainz[i]<sp/>=<sp/>i;<sp/></highlight><highlight class="comment">/*same<sp/>value<sp/>as<sp/>index<sp/>indicates<sp/>uninitialized*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hash_cleanup(Hash*<sp/>hash)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;head);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;val);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;chain);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;zeros);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;headz);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>lodepng_free(hash-&gt;chainz);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getHash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>+<sp/>2<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*A<sp/>simple<sp/>shift<sp/>and<sp/>xor<sp/>hash<sp/>is<sp/>used.<sp/>Since<sp/>the<sp/>data<sp/>of<sp/>PNGs<sp/>is<sp/>dominated</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>zeroes<sp/>due<sp/>to<sp/>the<sp/>filters,<sp/>a<sp/>better<sp/>hash<sp/>does<sp/>not<sp/>have<sp/>a<sp/>significant</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/>effect<sp/>on<sp/>speed<sp/>in<sp/>traversing<sp/>the<sp/>chain,<sp/>and<sp/>causes<sp/>more<sp/>time<sp/>spend<sp/>on</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/>calculating<sp/>the<sp/>hash.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>^=<sp/>(unsigned)(data[pos<sp/>+<sp/>0]<sp/>&lt;&lt;<sp/>0u);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>^=<sp/>(unsigned)(data[pos<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>4u);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>^=<sp/>(unsigned)(data[pos<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/>8u);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>amount,<sp/>i;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>&gt;=<sp/>size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>amount<sp/>=<sp/>size<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>amount;<sp/>++i)<sp/>result<sp/>^=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(data[pos<sp/>+<sp/>i]<sp/>&lt;&lt;<sp/>(i<sp/>*<sp/>8u));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>&amp;<sp/>HASH_BIT_MASK;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>countZeros(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>start<sp/>=<sp/>data<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>start<sp/>+<sp/>MAX_SUPPORTED_DEFLATE_LENGTH;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end<sp/>&gt;<sp/>data<sp/>+<sp/>size)<sp/>end<sp/>=<sp/>data<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>data<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(data<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*data<sp/>==<sp/>0)<sp/>++data;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*subtracting<sp/>two<sp/>addresses<sp/>returned<sp/>as<sp/>32-bit<sp/>number<sp/>(max<sp/>value<sp/>is<sp/>MAX_SUPPORTED_DEFLATE_LENGTH)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(data<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">/*wpos<sp/>=<sp/>pos<sp/>&amp;<sp/>(windowsize<sp/>-<sp/>1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateHashChain(Hash*<sp/>hash,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wpos,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>hashval,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>numzeros)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>hash-&gt;val[wpos]<sp/>=<sp/>(int)hashval;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash-&gt;head[hashval]<sp/>!=<sp/>-1)<sp/>hash-&gt;chain[wpos]<sp/>=<sp/>hash-&gt;head[hashval];</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>hash-&gt;head[hashval]<sp/>=<sp/>wpos;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>hash-&gt;zeros[wpos]<sp/>=<sp/>numzeros;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash-&gt;headz[numzeros]<sp/>!=<sp/>-1)<sp/>hash-&gt;chainz[wpos]<sp/>=<sp/>hash-&gt;headz[numzeros];</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>hash-&gt;headz[numzeros]<sp/>=<sp/>wpos;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1430"><highlight class="comment">LZ77-encode<sp/>the<sp/>data.<sp/>Return<sp/>value<sp/>is<sp/>error<sp/>code.<sp/>The<sp/>input<sp/>are<sp/>raw<sp/>bytes,<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="1431"><highlight class="comment">is<sp/>in<sp/>the<sp/>form<sp/>of<sp/>unsigned<sp/>integers<sp/>with<sp/>codes<sp/>representing<sp/>for<sp/>example<sp/>literal<sp/>bytes,<sp/>or</highlight></codeline>
<codeline lineno="1432"><highlight class="comment">length/distance<sp/>pairs.</highlight></codeline>
<codeline lineno="1433"><highlight class="comment">It<sp/>uses<sp/>a<sp/>hash<sp/>table<sp/>technique<sp/>to<sp/>let<sp/>it<sp/>encode<sp/>faster.<sp/>When<sp/>doing<sp/>LZ77<sp/>encoding,<sp/>a</highlight></codeline>
<codeline lineno="1434"><highlight class="comment">sliding<sp/>window<sp/>(of<sp/>windowsize)<sp/>is<sp/>used,<sp/>and<sp/>all<sp/>past<sp/>bytes<sp/>in<sp/>that<sp/>window<sp/>can<sp/>be<sp/>used<sp/>as</highlight></codeline>
<codeline lineno="1435"><highlight class="comment">the<sp/>&quot;dictionary&quot;.<sp/>A<sp/>brute<sp/>force<sp/>search<sp/>through<sp/>all<sp/>possible<sp/>distances<sp/>would<sp/>be<sp/>slow,<sp/>and</highlight></codeline>
<codeline lineno="1436"><highlight class="comment">this<sp/>hash<sp/>technique<sp/>is<sp/>one<sp/>out<sp/>of<sp/>several<sp/>ways<sp/>to<sp/>speed<sp/>this<sp/>up.</highlight></codeline>
<codeline lineno="1437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encodeLZ77(uivector*<sp/>out,<sp/>Hash*<sp/>hash,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inpos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>windowsize,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>minmatch,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nicematch,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lazymatching)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*for<sp/>large<sp/>window<sp/>lengths,<sp/>assume<sp/>the<sp/>user<sp/>wants<sp/>no<sp/>compression<sp/>loss.<sp/>Otherwise,<sp/>max<sp/>hash<sp/>chain<sp/>length<sp/>speedup.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxchainlength<sp/>=<sp/>windowsize<sp/>&gt;=<sp/>8192<sp/>?<sp/>windowsize<sp/>:<sp/>windowsize<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxlazymatch<sp/>=<sp/>windowsize<sp/>&gt;=<sp/>8192<sp/>?<sp/>MAX_SUPPORTED_DEFLATE_LENGTH<sp/>:<sp/>64;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>usezeros<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*not<sp/>sure<sp/>if<sp/>setting<sp/>it<sp/>to<sp/>false<sp/>for<sp/>windowsize<sp/>&lt;<sp/>8192<sp/>is<sp/>better<sp/>or<sp/>worse*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numzeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset;<sp/></highlight><highlight class="comment">/*the<sp/>offset<sp/>represents<sp/>the<sp/>distance<sp/>in<sp/>LZ77<sp/>terminology*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lazy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lazylength<sp/>=<sp/>0,<sp/>lazyoffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>hashval;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>current_offset,<sp/>current_length;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prev_offset;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lastptr,<sp/>*foreptr,<sp/>*backptr;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>hashpos;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(windowsize<sp/>==<sp/>0<sp/>||<sp/>windowsize<sp/>&gt;<sp/>32768)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>60;<sp/></highlight><highlight class="comment">/*error:<sp/>windowsize<sp/>smaller/larger<sp/>than<sp/>allowed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((windowsize<sp/>&amp;<sp/>(windowsize<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>90;<sp/></highlight><highlight class="comment">/*error:<sp/>must<sp/>be<sp/>power<sp/>of<sp/>two*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nicematch<sp/>&gt;<sp/>MAX_SUPPORTED_DEFLATE_LENGTH)<sp/>nicematch<sp/>=<sp/>MAX_SUPPORTED_DEFLATE_LENGTH;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(pos<sp/>=<sp/>inpos;<sp/>pos<sp/>&lt;<sp/>insize;<sp/>++pos)</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wpos<sp/>=<sp/>pos<sp/>&amp;<sp/>(windowsize<sp/>-<sp/>1);<sp/></highlight><highlight class="comment">/*position<sp/>for<sp/>in<sp/>&apos;circular&apos;<sp/>hash<sp/>buffers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>chainlength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>hashval<sp/>=<sp/>getHash(in,<sp/>insize,<sp/>pos);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(usezeros<sp/>&amp;&amp;<sp/>hashval<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numzeros<sp/>==<sp/>0)<sp/>numzeros<sp/>=<sp/>countZeros(in,<sp/>insize,<sp/>pos);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>+<sp/>numzeros<sp/>&gt;<sp/>insize<sp/>||<sp/>in[pos<sp/>+<sp/>numzeros<sp/>-<sp/>1]<sp/>!=<sp/>0)<sp/>--numzeros;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numzeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>updateHashChain(hash,<sp/>wpos,<sp/>hashval,<sp/>numzeros);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>length<sp/>and<sp/>offset<sp/>found<sp/>for<sp/>the<sp/>current<sp/>position*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>hashpos<sp/>=<sp/>hash-&gt;chain[wpos];</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>lastptr<sp/>=<sp/>&amp;in[insize<sp/>&lt;<sp/>pos<sp/>+<sp/>MAX_SUPPORTED_DEFLATE_LENGTH<sp/>?<sp/>insize<sp/>:<sp/>pos<sp/>+<sp/>MAX_SUPPORTED_DEFLATE_LENGTH];</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*search<sp/>for<sp/>the<sp/>longest<sp/>string*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chainlength++<sp/>&gt;=<sp/>maxchainlength)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_offset<sp/>=<sp/>hashpos<sp/>&lt;=<sp/>wpos<sp/>?<sp/>wpos<sp/>-<sp/>hashpos<sp/>:<sp/>wpos<sp/>-<sp/>hashpos<sp/>+<sp/>windowsize;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_offset<sp/>&lt;<sp/>prev_offset)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*stop<sp/>when<sp/>went<sp/>completely<sp/>around<sp/>the<sp/>circular<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev_offset<sp/>=<sp/>current_offset;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_offset<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*test<sp/>the<sp/>next<sp/>characters*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreptr<sp/>=<sp/>&amp;in[pos];</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backptr<sp/>=<sp/>&amp;in[pos<sp/>-<sp/>current_offset];</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*common<sp/>case<sp/>in<sp/>PNGs<sp/>is<sp/>lots<sp/>of<sp/>zeros.<sp/>Quickly<sp/>skip<sp/>over<sp/>them<sp/>as<sp/>a<sp/>speedup*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numzeros<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>skip<sp/>=<sp/>hash-&gt;zeros[hashpos];</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skip<sp/>&gt;<sp/>numzeros)<sp/>skip<sp/>=<sp/>numzeros;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backptr<sp/>+=<sp/>skip;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreptr<sp/>+=<sp/>skip;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(foreptr<sp/>!=<sp/>lastptr<sp/>&amp;&amp;<sp/>*backptr<sp/>==<sp/>*foreptr)<sp/></highlight><highlight class="comment">/*maximum<sp/>supported<sp/>length<sp/>by<sp/>deflate<sp/>is<sp/>max<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++backptr;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++foreptr;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_length<sp/>=<sp/>(unsigned)(foreptr<sp/>-<sp/>&amp;in[pos]);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_length<sp/>&gt;<sp/>length)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>current_length;<sp/></highlight><highlight class="comment">/*the<sp/>longest<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>current_offset;<sp/></highlight><highlight class="comment">/*the<sp/>offset<sp/>that<sp/>is<sp/>related<sp/>to<sp/>this<sp/>longest<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*jump<sp/>out<sp/>once<sp/>a<sp/>length<sp/>of<sp/>max<sp/>length<sp/>is<sp/>found<sp/>(speed<sp/>gain).<sp/>This<sp/>also<sp/>jumps</highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>if<sp/>length<sp/>is<sp/>MAX_SUPPORTED_DEFLATE_LENGTH*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_length<sp/>&gt;=<sp/>nicematch)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hashpos<sp/>==<sp/>hash-&gt;chain[hashpos])<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numzeros<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>numzeros)</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashpos<sp/>=<sp/>hash-&gt;chainz[hashpos];</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash-&gt;zeros[hashpos]<sp/>!=<sp/>numzeros)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashpos<sp/>=<sp/>hash-&gt;chain[hashpos];</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*outdated<sp/>hash<sp/>value,<sp/>happens<sp/>if<sp/>particular<sp/>value<sp/>was<sp/>not<sp/>encountered<sp/>in<sp/>whole<sp/>last<sp/>window*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hash-&gt;val[hashpos]<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)hashval)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lazymatching)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lazy<sp/>&amp;&amp;<sp/>length<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>length<sp/>&lt;=<sp/>maxlazymatch<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>MAX_SUPPORTED_DEFLATE_LENGTH)</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazylength<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazyoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*try<sp/>the<sp/>next<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lazy)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>==<sp/>0)<sp/>ERROR_BREAK(81);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&gt;<sp/>lazylength<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*push<sp/>the<sp/>previous<sp/>character<sp/>as<sp/>literal*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_push_back(out,<sp/>in[pos<sp/>-<sp/>1]))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>lazylength;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>lazyoffset;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;head[hashval]<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*the<sp/>same<sp/>hashchain<sp/>update<sp/>will<sp/>be<sp/>done,<sp/>this<sp/>ensures<sp/>no<sp/>wrong<sp/>alteration*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash-&gt;headz[numzeros]<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*idem*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pos;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>offset<sp/>&gt;<sp/>windowsize)<sp/>ERROR_BREAK(86<sp/></highlight><highlight class="comment">/*too<sp/>big<sp/>(or<sp/>overflown<sp/>negative)<sp/>offset*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*encode<sp/>it<sp/>as<sp/>length/distance<sp/>pair<sp/>or<sp/>literal<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&lt;<sp/>3)<sp/></highlight><highlight class="comment">/*only<sp/>lengths<sp/>of<sp/>3<sp/>or<sp/>higher<sp/>are<sp/>supported<sp/>as<sp/>length/distance<sp/>pair*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_push_back(out,<sp/>in[pos]))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&lt;<sp/>minmatch<sp/>||<sp/>(length<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>offset<sp/>&gt;<sp/>4096))</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*compensate<sp/>for<sp/>the<sp/>fact<sp/>that<sp/>longer<sp/>offsets<sp/>have<sp/>more<sp/>extra<sp/>bits,<sp/>a</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>of<sp/>only<sp/>3<sp/>may<sp/>be<sp/>not<sp/>worth<sp/>it<sp/>then*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_push_back(out,<sp/>in[pos]))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addLengthDistance(out,<sp/>length,<sp/>offset);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pos;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos<sp/>=<sp/>pos<sp/>&amp;<sp/>(windowsize<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashval<sp/>=<sp/>getHash(in,<sp/>insize,<sp/>pos);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(usezeros<sp/>&amp;&amp;<sp/>hashval<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numzeros<sp/>==<sp/>0)<sp/>numzeros<sp/>=<sp/>countZeros(in,<sp/>insize,<sp/>pos);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>+<sp/>numzeros<sp/>&gt;<sp/>insize<sp/>||<sp/>in[pos<sp/>+<sp/>numzeros<sp/>-<sp/>1]<sp/>!=<sp/>0)<sp/>--numzeros;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numzeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateHashChain(hash,<sp/>wpos,<sp/>hashval,<sp/>numzeros);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*end<sp/>of<sp/>the<sp/>loop<sp/>through<sp/>each<sp/>character<sp/>of<sp/>input*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>///////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deflateNoCompression(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*non<sp/>compressed<sp/>deflate<sp/>block<sp/>data:<sp/>1<sp/>bit<sp/>BFINAL,2<sp/>bits<sp/>BTYPE,(5<sp/>bits):<sp/>it<sp/>jumps<sp/>to<sp/>start<sp/>of<sp/>next<sp/>byte,</highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/><sp/>2<sp/>bytes<sp/>LEN,<sp/>2<sp/>bytes<sp/>NLEN,<sp/>LEN<sp/>bytes<sp/>literal<sp/>DATA*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>numdeflateblocks<sp/>=<sp/>(datasize<sp/>+<sp/>65534)<sp/>/<sp/>65535;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>datapos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numdeflateblocks;<sp/>++i)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BFINAL,<sp/>BTYPE,<sp/>LEN,<sp/>NLEN;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>firstbyte;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>BFINAL<sp/>=<sp/>(i<sp/>==<sp/>numdeflateblocks<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>BTYPE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>firstbyte<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(BFINAL<sp/>+<sp/>((BTYPE<sp/>&amp;<sp/>1)<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>((BTYPE<sp/>&amp;<sp/>2)<sp/>&lt;&lt;<sp/>1));</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>firstbyte);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>LEN<sp/>=<sp/>65535;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(datasize<sp/>-<sp/>datapos<sp/>&lt;<sp/>65535)<sp/>LEN<sp/>=<sp/>(unsigned)datasize<sp/>-<sp/>datapos;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>NLEN<sp/>=<sp/>65535<sp/>-<sp/>LEN;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(LEN<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(LEN<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(NLEN<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(NLEN<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Decompressed<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>65535<sp/>&amp;&amp;<sp/>datapos<sp/>&lt;<sp/>datasize;<sp/>++j)</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(out,<sp/>data[datapos++]);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1655"><highlight class="comment">write<sp/>the<sp/>lz77-encoded<sp/>data,<sp/>which<sp/>has<sp/>lit,<sp/>len<sp/>and<sp/>dist<sp/>codes,<sp/>to<sp/>compressed<sp/>stream<sp/>using<sp/>huffman<sp/>trees.</highlight></codeline>
<codeline lineno="1656"><highlight class="comment">tree_ll:<sp/>the<sp/>tree<sp/>for<sp/>lit<sp/>and<sp/>len<sp/>codes.</highlight></codeline>
<codeline lineno="1657"><highlight class="comment">tree_d:<sp/>the<sp/>tree<sp/>for<sp/>distance<sp/>codes.</highlight></codeline>
<codeline lineno="1658"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeLZ77data(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/><ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uivector*<sp/>lz77_encoded,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HuffmanTree*<sp/>tree_ll,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HuffmanTree*<sp/>tree_d)</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lz77_encoded-&gt;size;<sp/>++i)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>lz77_encoded-&gt;data[i];</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(tree_ll,<sp/>val),<sp/>HuffmanTree_getLength(tree_ll,<sp/>val));</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(val<sp/>&gt;<sp/>256)<sp/></highlight><highlight class="comment">/*for<sp/>a<sp/>length<sp/>code,<sp/>3<sp/>more<sp/>things<sp/>have<sp/>to<sp/>be<sp/>added*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length_index<sp/>=<sp/>val<sp/>-<sp/>FIRST_LENGTH_CODE_INDEX;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n_length_extra_bits<sp/>=<sp/>LENGTHEXTRA[length_index];</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length_extra_bits<sp/>=<sp/>lz77_encoded-&gt;data[++i];</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>distance_code<sp/>=<sp/>lz77_encoded-&gt;data[++i];</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>distance_index<sp/>=<sp/>distance_code;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n_distance_extra_bits<sp/>=<sp/>DISTANCEEXTRA[distance_index];</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>distance_extra_bits<sp/>=<sp/>lz77_encoded-&gt;data[++i];</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addBitsToStream(bp,<sp/>out,<sp/>length_extra_bits,<sp/>n_length_extra_bits);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(tree_d,<sp/>distance_code),</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HuffmanTree_getLength(tree_d,<sp/>distance_code));</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addBitsToStream(bp,<sp/>out,<sp/>distance_extra_bits,<sp/>n_distance_extra_bits);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">/*Deflate<sp/>for<sp/>a<sp/>block<sp/>of<sp/>type<sp/>&quot;dynamic&quot;,<sp/>that<sp/>is,<sp/>with<sp/>freely,<sp/>optimally,<sp/>created<sp/>huffman<sp/>trees*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deflateDynamic(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/>Hash*<sp/>hash,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datapos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataend,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"><sp/><sp/>A<sp/>block<sp/>is<sp/>compressed<sp/>as<sp/>follows:<sp/>The<sp/>PNG<sp/>data<sp/>is<sp/>lz77<sp/>encoded,<sp/>resulting<sp/>in</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/>literal<sp/>bytes<sp/>and<sp/>length/distance<sp/>pairs.<sp/>This<sp/>is<sp/>then<sp/>huffman<sp/>compressed<sp/>with</highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/><sp/>two<sp/>huffman<sp/>trees.<sp/>One<sp/>huffman<sp/>tree<sp/>is<sp/>used<sp/>for<sp/>the<sp/>lit<sp/>and<sp/>len<sp/>values<sp/>(&quot;ll&quot;),</highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/><sp/>another<sp/>huffman<sp/>tree<sp/>is<sp/>used<sp/>for<sp/>the<sp/>dist<sp/>values<sp/>(&quot;d&quot;).<sp/>These<sp/>two<sp/>trees<sp/>are</highlight></codeline>
<codeline lineno="1699"><highlight class="comment"><sp/><sp/>stored<sp/>using<sp/>their<sp/>code<sp/>lengths,<sp/>and<sp/>to<sp/>compress<sp/>even<sp/>more<sp/>these<sp/>code<sp/>lengths</highlight></codeline>
<codeline lineno="1700"><highlight class="comment"><sp/><sp/>are<sp/>also<sp/>run-length<sp/>encoded<sp/>and<sp/>huffman<sp/>compressed.<sp/>This<sp/>gives<sp/>a<sp/>huffman<sp/>tree</highlight></codeline>
<codeline lineno="1701"><highlight class="comment"><sp/><sp/>of<sp/>code<sp/>lengths<sp/>&quot;cl&quot;.<sp/>The<sp/>code<sp/>lenghts<sp/>used<sp/>to<sp/>describe<sp/>this<sp/>third<sp/>tree<sp/>are</highlight></codeline>
<codeline lineno="1702"><highlight class="comment"><sp/><sp/>the<sp/>code<sp/>length<sp/>code<sp/>lengths<sp/>(&quot;clcl&quot;).</highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*The<sp/>lz77<sp/>encoded<sp/>data,<sp/>represented<sp/>with<sp/>integers<sp/>since<sp/>there<sp/>will<sp/>also<sp/>be<sp/>length<sp/>and<sp/>distance<sp/>codes<sp/>in<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>uivector<sp/>lz77_encoded;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_ll;<sp/></highlight><highlight class="comment">/*tree<sp/>for<sp/>lit,len<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_d;<sp/></highlight><highlight class="comment">/*tree<sp/>for<sp/>distance<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_cl;<sp/></highlight><highlight class="comment">/*tree<sp/>for<sp/>encoding<sp/>the<sp/>code<sp/>lengths<sp/>representing<sp/>tree_ll<sp/>and<sp/>tree_d*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>uivector<sp/>frequencies_ll;<sp/></highlight><highlight class="comment">/*frequency<sp/>of<sp/>lit,len<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>uivector<sp/>frequencies_d;<sp/></highlight><highlight class="comment">/*frequency<sp/>of<sp/>dist<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>uivector<sp/>frequencies_cl;<sp/></highlight><highlight class="comment">/*frequency<sp/>of<sp/>code<sp/>length<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>uivector<sp/>bitlen_lld;<sp/></highlight><highlight class="comment">/*lit,len,dist<sp/>code<sp/>lenghts<sp/>(int<sp/>bits),<sp/>literally<sp/>(without<sp/>repeat<sp/>codes).*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>uivector<sp/>bitlen_lld_e;<sp/></highlight><highlight class="comment">/*bitlen_lld<sp/>encoded<sp/>with<sp/>repeat<sp/>codes<sp/>(this<sp/>is<sp/>a<sp/>rudemtary<sp/>run<sp/>length<sp/>compression)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*bitlen_cl<sp/>is<sp/>the<sp/>code<sp/>length<sp/>code<sp/>lengths<sp/>(&quot;clcl&quot;).<sp/>The<sp/>bit<sp/>lengths<sp/>of<sp/>codes<sp/>to<sp/>represent<sp/>tree_cl</highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/><sp/>(these<sp/>are<sp/>written<sp/>as<sp/>is<sp/>in<sp/>the<sp/>file,<sp/>it<sp/>would<sp/>be<sp/>crazy<sp/>to<sp/>compress<sp/>these<sp/>using<sp/>yet<sp/>another<sp/>huffman</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/><sp/>tree<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>represented<sp/>by<sp/>yet<sp/>another<sp/>set<sp/>of<sp/>code<sp/>lengths)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>uivector<sp/>bitlen_cl;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize<sp/>=<sp/>dataend<sp/>-<sp/>datapos;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/><sp/>Due<sp/>to<sp/>the<sp/>huffman<sp/>compression<sp/>of<sp/>huffman<sp/>tree<sp/>representations<sp/>(&quot;two<sp/>levels&quot;),<sp/>there<sp/>are<sp/>some<sp/>anologies:</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/><sp/>bitlen_lld<sp/>is<sp/>to<sp/>tree_cl<sp/>what<sp/>data<sp/>is<sp/>to<sp/>tree_ll<sp/>and<sp/>tree_d.</highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/><sp/>bitlen_lld_e<sp/>is<sp/>to<sp/>bitlen_lld<sp/>what<sp/>lz77_encoded<sp/>is<sp/>to<sp/>data.</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/><sp/>bitlen_cl<sp/>is<sp/>to<sp/>bitlen_lld_e<sp/>what<sp/>bitlen_lld<sp/>is<sp/>to<sp/>lz77_encoded.</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BFINAL<sp/>=<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numcodes_ll,<sp/>numcodes_d,<sp/>i;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>HLIT,<sp/>HDIST,<sp/>HCLEN;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>uivector_init(&amp;lz77_encoded);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_d);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_cl);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>uivector_init(&amp;frequencies_ll);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>uivector_init(&amp;frequencies_d);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>uivector_init(&amp;frequencies_cl);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>uivector_init(&amp;bitlen_lld);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>uivector_init(&amp;bitlen_lld_e);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/>uivector_init(&amp;bitlen_cl);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*This<sp/>while<sp/>loop<sp/>never<sp/>loops<sp/>due<sp/>to<sp/>a<sp/>break<sp/>at<sp/>the<sp/>end,<sp/>it<sp/>is<sp/>here<sp/>to</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/>allow<sp/>breaking<sp/>out<sp/>of<sp/>it<sp/>to<sp/>the<sp/>cleanup<sp/>phase<sp/>on<sp/>error<sp/>conditions.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;use_lz77)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>encodeLZ77(&amp;lz77_encoded,<sp/>hash,<sp/>data,<sp/>datapos,<sp/>dataend,<sp/>settings-&gt;windowsize,</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings-&gt;minmatch,<sp/>settings-&gt;nicematch,<sp/>settings-&gt;lazymatching);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resize(&amp;lz77_encoded,<sp/>datasize))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>datapos;<sp/>i<sp/>&lt;<sp/>dataend;<sp/>++i)<sp/>lz77_encoded.data[i<sp/>-<sp/>datapos]<sp/>=<sp/>data[i];<sp/></highlight><highlight class="comment">/*no<sp/>LZ77,<sp/>but<sp/>still<sp/>will<sp/>be<sp/>Huffman<sp/>compressed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resizev(&amp;frequencies_ll,<sp/>286,<sp/>0))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resizev(&amp;frequencies_d,<sp/>30,<sp/>0))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Count<sp/>the<sp/>frequencies<sp/>of<sp/>lit,<sp/>len<sp/>and<sp/>dist<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>lz77_encoded.size;<sp/>++i)</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>symbol<sp/>=<sp/>lz77_encoded.data[i];</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++frequencies_ll.data[symbol];</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(symbol<sp/>&gt;<sp/>256)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>lz77_encoded.data[i<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++frequencies_d.data[dist];</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>frequencies_ll.data[256]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*there<sp/>will<sp/>be<sp/>exactly<sp/>1<sp/>end<sp/>code,<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>block*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Make<sp/>both<sp/>huffman<sp/>trees,<sp/>one<sp/>for<sp/>the<sp/>lit<sp/>and<sp/>len<sp/>codes,<sp/>one<sp/>for<sp/>the<sp/>dist<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromFrequencies(&amp;tree_ll,<sp/>frequencies_ll.data,<sp/>257,<sp/>frequencies_ll.size,<sp/>15);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*2,<sp/>not<sp/>1,<sp/>is<sp/>chosen<sp/>for<sp/>mincodes:<sp/>some<sp/>buggy<sp/>PNG<sp/>decoders<sp/>require<sp/>at<sp/>least<sp/>2<sp/>symbols<sp/>in<sp/>the<sp/>dist<sp/>tree*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromFrequencies(&amp;tree_d,<sp/>frequencies_d.data,<sp/>2,<sp/>frequencies_d.size,<sp/>15);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>numcodes_ll<sp/>=<sp/>tree_ll.numcodes;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numcodes_ll<sp/>&gt;<sp/>286)<sp/>numcodes_ll<sp/>=<sp/>286;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>numcodes_d<sp/>=<sp/>tree_d.numcodes;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numcodes_d<sp/>&gt;<sp/>30)<sp/>numcodes_d<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*store<sp/>the<sp/>code<sp/>lengths<sp/>of<sp/>both<sp/>generated<sp/>trees<sp/>in<sp/>bitlen_lld*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numcodes_ll;<sp/>++i)<sp/>uivector_push_back(&amp;bitlen_lld,<sp/>HuffmanTree_getLength(&amp;tree_ll,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)i));</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numcodes_d;<sp/>++i)<sp/>uivector_push_back(&amp;bitlen_lld,<sp/>HuffmanTree_getLength(&amp;tree_d,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)i));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*run-length<sp/>compress<sp/>bitlen_ldd<sp/>into<sp/>bitlen_lld_e<sp/>by<sp/>using<sp/>repeat<sp/>codes<sp/>16<sp/>(copy<sp/>length<sp/>3-6<sp/>times),</highlight></codeline>
<codeline lineno="1790"><highlight class="comment"><sp/><sp/><sp/><sp/>17<sp/>(3-10<sp/>zeroes),<sp/>18<sp/>(11-138<sp/>zeroes)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>(unsigned)bitlen_lld.size;<sp/>++i)</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*amount<sp/>of<sp/>repititions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>+<sp/>j<sp/>+<sp/>1<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)bitlen_lld.size<sp/>&amp;&amp;<sp/>bitlen_lld.data[i<sp/>+<sp/>j<sp/>+<sp/>1]<sp/>==<sp/>bitlen_lld.data[i])<sp/>++j;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_lld.data[i]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>j<sp/>&gt;=<sp/>2)<sp/></highlight><highlight class="comment">/*repeat<sp/>code<sp/>for<sp/>zeroes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;<sp/></highlight><highlight class="comment">/*include<sp/>the<sp/>first<sp/>zero*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;=<sp/>10)<sp/></highlight><highlight class="comment">/*repeat<sp/>code<sp/>17<sp/>supports<sp/>max<sp/>10<sp/>zeroes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>17);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>j<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*repeat<sp/>code<sp/>18<sp/>supports<sp/>max<sp/>138<sp/>zeroes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&gt;<sp/>138)<sp/>j<sp/>=<sp/>138;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>18);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>j<sp/>-<sp/>11);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>(j<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&gt;=<sp/>3)<sp/></highlight><highlight class="comment">/*repeat<sp/>code<sp/>for<sp/>value<sp/>other<sp/>than<sp/>zero*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>j<sp/>/<sp/>6,<sp/>rest<sp/>=<sp/>j<sp/>%<sp/>6;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>bitlen_lld.data[i]);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>num;<sp/>++k)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>16);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>6<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rest<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>16);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>rest<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>j<sp/>-=<sp/>rest;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>j;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*too<sp/>short<sp/>to<sp/>benefit<sp/>from<sp/>repeat<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uivector_push_back(&amp;bitlen_lld_e,<sp/>bitlen_lld.data[i]);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*generate<sp/>tree_cl,<sp/>the<sp/>huffmantree<sp/>of<sp/>huffmantrees*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resizev(&amp;frequencies_cl,<sp/>NUM_CODE_LENGTH_CODES,<sp/>0))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bitlen_lld_e.size;<sp/>++i)</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++frequencies_cl.data[bitlen_lld_e.data[i]];</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*after<sp/>a<sp/>repeat<sp/>code<sp/>come<sp/>the<sp/>bits<sp/>that<sp/>specify<sp/>the<sp/>number<sp/>of<sp/>repetitions,</highlight></codeline>
<codeline lineno="1843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>those<sp/>don&apos;t<sp/>need<sp/>to<sp/>be<sp/>in<sp/>the<sp/>frequencies_cl<sp/>calculation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_lld_e.data[i]<sp/>&gt;=<sp/>16)<sp/>++i;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>HuffmanTree_makeFromFrequencies(&amp;tree_cl,<sp/>frequencies_cl.data,</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequencies_cl.size,<sp/>frequencies_cl.size,<sp/>7);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resize(&amp;bitlen_cl,<sp/>tree_cl.numcodes))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>tree_cl.numcodes;<sp/>++i)</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lenghts<sp/>of<sp/>code<sp/>length<sp/>tree<sp/>is<sp/>in<sp/>the<sp/>order<sp/>as<sp/>specified<sp/>by<sp/>deflate*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitlen_cl.data[i]<sp/>=<sp/>HuffmanTree_getLength(&amp;tree_cl,<sp/>CLCL_ORDER[i]);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bitlen_cl.data[bitlen_cl.size<sp/>-<sp/>1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bitlen_cl.size<sp/>&gt;<sp/>4)</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*remove<sp/>zeros<sp/>at<sp/>the<sp/>end,<sp/>but<sp/>minimum<sp/>size<sp/>must<sp/>be<sp/>4*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!uivector_resize(&amp;bitlen_cl,<sp/>bitlen_cl.size<sp/>-<sp/>1))<sp/>ERROR_BREAK(83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1865"><highlight class="comment"><sp/><sp/><sp/><sp/>Write<sp/>everything<sp/>into<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="1866"><highlight class="comment"></highlight></codeline>
<codeline lineno="1867"><highlight class="comment"><sp/><sp/><sp/><sp/>After<sp/>the<sp/>BFINAL<sp/>and<sp/>BTYPE,<sp/>the<sp/>dynamic<sp/>block<sp/>consists<sp/>out<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="1868"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>5<sp/>bits<sp/>HLIT,<sp/>5<sp/>bits<sp/>HDIST,<sp/>4<sp/>bits<sp/>HCLEN</highlight></codeline>
<codeline lineno="1869"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>(HCLEN+4)*3<sp/>bits<sp/>code<sp/>lengths<sp/>of<sp/>code<sp/>length<sp/>alphabet</highlight></codeline>
<codeline lineno="1870"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>HLIT<sp/>+<sp/>257<sp/>code<sp/>lenghts<sp/>of<sp/>lit/length<sp/>alphabet<sp/>(encoded<sp/>using<sp/>the<sp/>code<sp/>length</highlight></codeline>
<codeline lineno="1871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>alphabet,<sp/>+<sp/>possible<sp/>repetition<sp/>codes<sp/>16,<sp/>17,<sp/>18)</highlight></codeline>
<codeline lineno="1872"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>HDIST<sp/>+<sp/>1<sp/>code<sp/>lengths<sp/>of<sp/>distance<sp/>alphabet<sp/>(encoded<sp/>using<sp/>the<sp/>code<sp/>length</highlight></codeline>
<codeline lineno="1873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>alphabet,<sp/>+<sp/>possible<sp/>repetition<sp/>codes<sp/>16,<sp/>17,<sp/>18)</highlight></codeline>
<codeline lineno="1874"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>compressed<sp/>data</highlight></codeline>
<codeline lineno="1875"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>256<sp/>(end<sp/>code)</highlight></codeline>
<codeline lineno="1876"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Write<sp/>block<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>BFINAL);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>0);<sp/></highlight><highlight class="comment">/*first<sp/>bit<sp/>of<sp/>BTYPE<sp/>&quot;dynamic&quot;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>1);<sp/></highlight><highlight class="comment">/*second<sp/>bit<sp/>of<sp/>BTYPE<sp/>&quot;dynamic&quot;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>the<sp/>HLIT,<sp/>HDIST<sp/>and<sp/>HCLEN<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>HLIT<sp/>=<sp/>(unsigned)(numcodes_ll<sp/>-<sp/>257);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>HDIST<sp/>=<sp/>(unsigned)(numcodes_d<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>HCLEN<sp/>=<sp/>(unsigned)bitlen_cl.size<sp/>-<sp/>4;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*trim<sp/>zeroes<sp/>for<sp/>HCLEN.<sp/>HLIT<sp/>and<sp/>HDIST<sp/>were<sp/>already<sp/>trimmed<sp/>at<sp/>tree<sp/>creation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!bitlen_cl.data[HCLEN<sp/>+<sp/>4<sp/>-<sp/>1]<sp/>&amp;&amp;<sp/>HCLEN<sp/>&gt;<sp/>0)<sp/>--HCLEN;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitsToStream(bp,<sp/>out,<sp/>HLIT,<sp/>5);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitsToStream(bp,<sp/>out,<sp/>HDIST,<sp/>5);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>addBitsToStream(bp,<sp/>out,<sp/>HCLEN,<sp/>4);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>the<sp/>code<sp/>lenghts<sp/>of<sp/>the<sp/>code<sp/>length<sp/>alphabet*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>HCLEN<sp/>+<sp/>4;<sp/>++i)<sp/>addBitsToStream(bp,<sp/>out,<sp/>bitlen_cl.data[i],<sp/>3);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>the<sp/>lenghts<sp/>of<sp/>the<sp/>lit/len<sp/>AND<sp/>the<sp/>dist<sp/>alphabet*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bitlen_lld_e.size;<sp/>++i)</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(&amp;tree_cl,<sp/>bitlen_lld_e.data[i]),</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HuffmanTree_getLength(&amp;tree_cl,<sp/>bitlen_lld_e.data[i]));</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*extra<sp/>bits<sp/>of<sp/>repeat<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_lld_e.data[i]<sp/>==<sp/>16)<sp/>addBitsToStream(bp,<sp/>out,<sp/>bitlen_lld_e.data[++i],<sp/>2);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_lld_e.data[i]<sp/>==<sp/>17)<sp/>addBitsToStream(bp,<sp/>out,<sp/>bitlen_lld_e.data[++i],<sp/>3);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitlen_lld_e.data[i]<sp/>==<sp/>18)<sp/>addBitsToStream(bp,<sp/>out,<sp/>bitlen_lld_e.data[++i],<sp/>7);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>the<sp/>compressed<sp/>data<sp/>symbols*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>writeLZ77data(bp,<sp/>out,<sp/>&amp;lz77_encoded,<sp/>&amp;tree_ll,<sp/>&amp;tree_d);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>length<sp/>of<sp/>the<sp/>end<sp/>code<sp/>256<sp/>must<sp/>be<sp/>larger<sp/>than<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HuffmanTree_getLength(&amp;tree_ll,<sp/>256)<sp/>==<sp/>0)<sp/>ERROR_BREAK(64);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>the<sp/>end<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(&amp;tree_ll,<sp/>256),<sp/>HuffmanTree_getLength(&amp;tree_ll,<sp/>256));</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*end<sp/>of<sp/>error-while*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*cleanup*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;lz77_encoded);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_d);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_cl);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;frequencies_ll);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;frequencies_d);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;frequencies_cl);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;bitlen_lld_e);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;bitlen_lld);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>uivector_cleanup(&amp;bitlen_cl);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deflateFixed(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bp,<sp/>Hash*<sp/>hash,</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datapos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataend,</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_ll;<sp/></highlight><highlight class="comment">/*tree<sp/>for<sp/>literal<sp/>values<sp/>and<sp/>length<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>HuffmanTree<sp/>tree_d;<sp/></highlight><highlight class="comment">/*tree<sp/>for<sp/>distance<sp/>codes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>BFINAL<sp/>=<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>HuffmanTree_init(&amp;tree_d);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/>generateFixedLitLenTree(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>generateFixedDistanceTree(&amp;tree_d);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>BFINAL);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>1);<sp/></highlight><highlight class="comment">/*first<sp/>bit<sp/>of<sp/>BTYPE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>addBitToStream(bp,<sp/>out,<sp/>0);<sp/></highlight><highlight class="comment">/*second<sp/>bit<sp/>of<sp/>BTYPE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;use_lz77)<sp/></highlight><highlight class="comment">/*LZ77<sp/>encoded*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>uivector<sp/>lz77_encoded;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>uivector_init(&amp;lz77_encoded);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>encodeLZ77(&amp;lz77_encoded,<sp/>hash,<sp/>data,<sp/>datapos,<sp/>dataend,<sp/>settings-&gt;windowsize,</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings-&gt;minmatch,<sp/>settings-&gt;nicematch,<sp/>settings-&gt;lazymatching);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>writeLZ77data(bp,<sp/>out,<sp/>&amp;lz77_encoded,<sp/>&amp;tree_ll,<sp/>&amp;tree_d);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>uivector_cleanup(&amp;lz77_encoded);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*no<sp/>LZ77,<sp/>but<sp/>still<sp/>will<sp/>be<sp/>Huffman<sp/>compressed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>datapos;<sp/>i<sp/>&lt;<sp/>dataend;<sp/>++i)</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(&amp;tree_ll,<sp/>data[i]),<sp/>HuffmanTree_getLength(&amp;tree_ll,<sp/>data[i]));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*add<sp/>END<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>addHuffmanSymbol(bp,<sp/>out,<sp/>HuffmanTree_getCode(&amp;tree_ll,<sp/>256),<sp/>HuffmanTree_getLength(&amp;tree_ll,<sp/>256));</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*cleanup*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_ll);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>HuffmanTree_cleanup(&amp;tree_d);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_deflatev(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>blocksize,<sp/>numdeflateblocks;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*the<sp/>bit<sp/>pointer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>Hash<sp/>hash;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;btype<sp/>&gt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>61;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;btype<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deflateNoCompression(out,<sp/>in,<sp/>insize);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;btype<sp/>==<sp/>1)<sp/>blocksize<sp/>=<sp/>insize;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*if(settings-&gt;btype<sp/>==<sp/>2)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*on<sp/>PNGs,<sp/>deflate<sp/>blocks<sp/>of<sp/>65-262k<sp/>seem<sp/>to<sp/>give<sp/>most<sp/>dense<sp/>encoding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>blocksize<sp/>=<sp/>insize<sp/>/<sp/>8<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(blocksize<sp/>&lt;<sp/>65536)<sp/>blocksize<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(blocksize<sp/>&gt;<sp/>262144)<sp/>blocksize<sp/>=<sp/>262144;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>numdeflateblocks<sp/>=<sp/>(insize<sp/>+<sp/>blocksize<sp/>-<sp/>1)<sp/>/<sp/>blocksize;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numdeflateblocks<sp/>==<sp/>0)<sp/>numdeflateblocks<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>hash_init(&amp;hash,<sp/>settings-&gt;windowsize);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numdeflateblocks<sp/>&amp;&amp;<sp/>!error;<sp/>++i)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>(i<sp/>==<sp/>numdeflateblocks<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>i<sp/>*<sp/>blocksize;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>start<sp/>+<sp/>blocksize;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(end<sp/>&gt;<sp/>insize)<sp/>end<sp/>=<sp/>insize;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;btype<sp/>==<sp/>1)<sp/>error<sp/>=<sp/>deflateFixed(out,<sp/>&amp;bp,<sp/>&amp;hash,<sp/>in,<sp/>start,<sp/>end,<sp/>settings,<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;btype<sp/>==<sp/>2)<sp/>error<sp/>=<sp/>deflateDynamic(out,<sp/>&amp;bp,<sp/>&amp;hash,<sp/>in,<sp/>start,<sp/>end,<sp/>settings,<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>hash_cleanup(&amp;hash);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_deflate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>v;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>ucvector_init_buffer(&amp;v,<sp/>*out,<sp/>*outsize);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_deflatev(&amp;v,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>v.data;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>v.size;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>deflate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;custom_deflate)</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_deflate(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_deflate(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Adler32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>update_adler32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>adler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>adler<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>(adler<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(len<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*at<sp/>least<sp/>5550<sp/>sums<sp/>can<sp/>be<sp/>done<sp/>before<sp/>the<sp/>sums<sp/>overflow,<sp/>saving<sp/>a<sp/>lot<sp/>of<sp/>module<sp/>divisions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>len<sp/>&gt;<sp/>5550<sp/>?<sp/>5550<sp/>:<sp/>len;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>amount;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(amount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/>(*data++);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--amount;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>65521;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>%=<sp/>65521;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>s1;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">/*Return<sp/>the<sp/>adler32<sp/>of<sp/>the<sp/>bytes<sp/>data[0..len-1]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>adler32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>update_adler32(1L,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Zlib<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_zlib_decompress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CM,<sp/>CINFO,<sp/>FDICT;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(insize<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>53;<sp/></highlight><highlight class="comment">/*error,<sp/>size<sp/>of<sp/>zlib<sp/>data<sp/>too<sp/>small*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>information<sp/>from<sp/>zlib<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((in[0]<sp/>*<sp/>256<sp/>+<sp/>in[1])<sp/>%<sp/>31<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>256<sp/>*<sp/>in[0]<sp/>+<sp/>in[1]<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>31,<sp/>the<sp/>FCHECK<sp/>value<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>made<sp/>that<sp/>way*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>24;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/>CM<sp/>=<sp/>in[0]<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/>CINFO<sp/>=<sp/>(in[0]<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*FCHECK<sp/>=<sp/>in[1]<sp/>&amp;<sp/>31;*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*FCHECK<sp/>is<sp/>already<sp/>tested<sp/>above*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/>FDICT<sp/>=<sp/>(in[1]<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*FLEVEL<sp/>=<sp/>(in[1]<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>3;*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*FLEVEL<sp/>is<sp/>not<sp/>used<sp/>here*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CM<sp/>!=<sp/>8<sp/>||<sp/>CINFO<sp/>&gt;<sp/>7)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>only<sp/>compression<sp/>method<sp/>8:<sp/>inflate<sp/>with<sp/>sliding<sp/>window<sp/>of<sp/>32k<sp/>is<sp/>supported<sp/>by<sp/>the<sp/>PNG<sp/>spec*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>25;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FDICT<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>specification<sp/>of<sp/>PNG<sp/>says<sp/>about<sp/>the<sp/>zlib<sp/>stream:</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;The<sp/>additional<sp/>flags<sp/>shall<sp/>not<sp/>specify<sp/>a<sp/>preset<sp/>dictionary.&quot;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>26;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>inflate(out,<sp/>outsize,<sp/>in<sp/>+<sp/>2,<sp/>insize<sp/>-<sp/>2,<sp/>settings);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!settings-&gt;ignore_adler32)</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADLER32<sp/>=<sp/>lodepng_read32bitInt(&amp;in[insize<sp/>-<sp/>4]);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>checksum<sp/>=<sp/>adler32(*out,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(*outsize));</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(checksum<sp/>!=<sp/>ADLER32)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>58;<sp/></highlight><highlight class="comment">/*error,<sp/>adler<sp/>checksum<sp/>not<sp/>correct,<sp/>data<sp/>must<sp/>be<sp/>corrupted*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*no<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>zlib_decompress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;custom_zlib)</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_zlib(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_zlib_decompress(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_zlib_compress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*initially,<sp/>*out<sp/>must<sp/>be<sp/>NULL<sp/>and<sp/>outsize<sp/>0,<sp/>if<sp/>you<sp/>just<sp/>give<sp/>some<sp/>random<sp/>*out</highlight></codeline>
<codeline lineno="2156"><highlight class="comment"><sp/><sp/>that&apos;s<sp/>pointing<sp/>to<sp/>a<sp/>non<sp/>allocated<sp/>buffer,<sp/>this&apos;ll<sp/>crash*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>outv;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>deflatedata<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>deflatesize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*zlib<sp/>data:<sp/>1<sp/>byte<sp/>CMF<sp/>(CM+CINFO),<sp/>1<sp/>byte<sp/>FLG,<sp/>deflate<sp/>data,<sp/>4<sp/>byte<sp/>ADLER32<sp/>checksum<sp/>of<sp/>the<sp/>Decompressed<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CMF<sp/>=<sp/>120;<sp/></highlight><highlight class="comment">/*0b01111000:<sp/>CM<sp/>8,<sp/>CINFO<sp/>7.<sp/>With<sp/>CINFO<sp/>7,<sp/>any<sp/>window<sp/>size<sp/>up<sp/>to<sp/>32768<sp/>can<sp/>be<sp/>used.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FLEVEL<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FDICT<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CMFFLG<sp/>=<sp/>256<sp/>*<sp/>CMF<sp/>+<sp/>FDICT<sp/>*<sp/>32<sp/>+<sp/>FLEVEL<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FCHECK<sp/>=<sp/>31<sp/>-<sp/>CMFFLG<sp/>%<sp/>31;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>CMFFLG<sp/>+=<sp/>FCHECK;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*ucvector-controlled<sp/>version<sp/>of<sp/>the<sp/>output<sp/>buffer,<sp/>for<sp/>dynamic<sp/>array*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>ucvector_init_buffer(&amp;outv,<sp/>*out,<sp/>*outsize);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;outv,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(CMFFLG<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;outv,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(CMFFLG<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>deflate(&amp;deflatedata,<sp/>&amp;deflatesize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADLER32<sp/>=<sp/>adler32(in,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)insize);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>deflatesize;<sp/>++i)<sp/>ucvector_push_back(&amp;outv,<sp/>deflatedata[i]);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(deflatedata);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_add32bitInt(&amp;outv,<sp/>ADLER32);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>outv.data;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>outv.size;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compress<sp/>using<sp/>the<sp/>default<sp/>or<sp/>custom<sp/>zlib<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>zlib_compress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;custom_zlib)</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_zlib(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_zlib_compress(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*no<sp/>LODEPNG_COMPILE_ZLIB*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>zlib_decompress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!settings-&gt;custom_zlib)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>87;<sp/></highlight><highlight class="comment">/*no<sp/>custom<sp/>zlib<sp/>function<sp/>provided<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_zlib(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>zlib_compress(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!settings-&gt;custom_zlib)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>87;<sp/></highlight><highlight class="comment">/*no<sp/>custom<sp/>zlib<sp/>function<sp/>provided<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;custom_zlib(out,<sp/>outsize,<sp/>in,<sp/>insize,<sp/>settings);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ZLIB*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment">/*this<sp/>is<sp/>a<sp/>good<sp/>tradeoff<sp/>between<sp/>speed<sp/>and<sp/>compression<sp/>ratio*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_WINDOWSIZE<sp/>2048</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_compress_settings_init(LodePNGCompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*compress<sp/>with<sp/>dynamic<sp/>huffman<sp/>tree<sp/>(not<sp/>in<sp/>the<sp/>mathematical<sp/>sense,<sp/>just<sp/>not<sp/>the<sp/>predefined<sp/>one)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>settings-&gt;btype<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/>settings-&gt;use_lz77<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>settings-&gt;windowsize<sp/>=<sp/>DEFAULT_WINDOWSIZE;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/>settings-&gt;minmatch<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/>settings-&gt;nicematch<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>settings-&gt;lazymatching<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/>settings-&gt;custom_zlib<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>settings-&gt;custom_deflate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>settings-&gt;custom_context<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings<sp/>lodepng_default_compress_settings<sp/>=<sp/>{2,<sp/>1,<sp/>DEFAULT_WINDOWSIZE,<sp/>3,<sp/>128,<sp/>1,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_decompress_settings_init(LodePNGDecompressSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="2260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>settings-&gt;ignore_adler32<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>settings-&gt;custom_zlib<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>settings-&gt;custom_inflate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>settings-&gt;custom_context<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings<sp/>lodepng_default_decompress_settings<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//<sp/>End<sp/>of<sp/>Zlib<sp/>related<sp/>code.<sp/>Begin<sp/>of<sp/>PNG<sp/>related<sp/>code.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>CRC32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LODEPNG_NO_COMPILE_CRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CRC<sp/>polynomial:<sp/>0xedb88320<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_crc32_table[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0u,<sp/>1996959894u,<sp/>3993919788u,<sp/>2567524794u,<sp/><sp/>124634137u,<sp/>1886057615u,<sp/>3915621685u,<sp/>2657392035u,</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/>249268274u,<sp/>2044508324u,<sp/>3772115230u,<sp/>2547177864u,<sp/><sp/>162941995u,<sp/>2125561021u,<sp/>3887607047u,<sp/>2428444049u,</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/>498536548u,<sp/>1789927666u,<sp/>4089016648u,<sp/>2227061214u,<sp/><sp/>450548861u,<sp/>1843258603u,<sp/>4107580753u,<sp/>2211677639u,</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/>325883990u,<sp/>1684777152u,<sp/>4251122042u,<sp/>2321926636u,<sp/><sp/>335633487u,<sp/>1661365465u,<sp/>4195302755u,<sp/>2366115317u,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/>997073096u,<sp/>1281953886u,<sp/>3579855332u,<sp/>2724688242u,<sp/>1006888145u,<sp/>1258607687u,<sp/>3524101629u,<sp/>2768942443u,</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/>901097722u,<sp/>1119000684u,<sp/>3686517206u,<sp/>2898065728u,<sp/><sp/>853044451u,<sp/>1172266101u,<sp/>3705015759u,<sp/>2882616665u,</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/>651767980u,<sp/>1373503546u,<sp/>3369554304u,<sp/>3218104598u,<sp/><sp/>565507253u,<sp/>1454621731u,<sp/>3485111705u,<sp/>3099436303u,</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/>671266974u,<sp/>1594198024u,<sp/>3322730930u,<sp/>2970347812u,<sp/><sp/>795835527u,<sp/>1483230225u,<sp/>3244367275u,<sp/>3060149565u,</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>1994146192u,<sp/><sp/><sp/>31158534u,<sp/>2563907772u,<sp/>4023717930u,<sp/>1907459465u,<sp/><sp/>112637215u,<sp/>2680153253u,<sp/>3904427059u,</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>2013776290u,<sp/><sp/>251722036u,<sp/>2517215374u,<sp/>3775830040u,<sp/>2137656763u,<sp/><sp/>141376813u,<sp/>2439277719u,<sp/>3865271297u,</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>1802195444u,<sp/><sp/>476864866u,<sp/>2238001368u,<sp/>4066508878u,<sp/>1812370925u,<sp/><sp/>453092731u,<sp/>2181625025u,<sp/>4111451223u,</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>1706088902u,<sp/><sp/>314042704u,<sp/>2344532202u,<sp/>4240017532u,<sp/>1658658271u,<sp/><sp/>366619977u,<sp/>2362670323u,<sp/>4224994405u,</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>1303535960u,<sp/><sp/>984961486u,<sp/>2747007092u,<sp/>3569037538u,<sp/>1256170817u,<sp/>1037604311u,<sp/>2765210733u,<sp/>3554079995u,</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>1131014506u,<sp/><sp/>879679996u,<sp/>2909243462u,<sp/>3663771856u,<sp/>1141124467u,<sp/><sp/>855842277u,<sp/>2852801631u,<sp/>3708648649u,</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>1342533948u,<sp/><sp/>654459306u,<sp/>3188396048u,<sp/>3373015174u,<sp/>1466479909u,<sp/><sp/>544179635u,<sp/>3110523913u,<sp/>3462522015u,</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>1591671054u,<sp/><sp/>702138776u,<sp/>2966460450u,<sp/>3352799412u,<sp/>1504918807u,<sp/><sp/>783551873u,<sp/>3082640443u,<sp/>3233442989u,</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>3988292384u,<sp/>2596254646u,<sp/><sp/><sp/>62317068u,<sp/>1957810842u,<sp/>3939845945u,<sp/>2647816111u,<sp/><sp/><sp/>81470997u,<sp/>1943803523u,</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>3814918930u,<sp/>2489596804u,<sp/><sp/>225274430u,<sp/>2053790376u,<sp/>3826175755u,<sp/>2466906013u,<sp/><sp/>167816743u,<sp/>2097651377u,</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>4027552580u,<sp/>2265490386u,<sp/><sp/>503444072u,<sp/>1762050814u,<sp/>4150417245u,<sp/>2154129355u,<sp/><sp/>426522225u,<sp/>1852507879u,</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>4275313526u,<sp/>2312317920u,<sp/><sp/>282753626u,<sp/>1742555852u,<sp/>4189708143u,<sp/>2394877945u,<sp/><sp/>397917763u,<sp/>1622183637u,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>3604390888u,<sp/>2714866558u,<sp/><sp/>953729732u,<sp/>1340076626u,<sp/>3518719985u,<sp/>2797360999u,<sp/>1068828381u,<sp/>1219638859u,</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>3624741850u,<sp/>2936675148u,<sp/><sp/>906185462u,<sp/>1090812512u,<sp/>3747672003u,<sp/>2825379669u,<sp/><sp/>829329135u,<sp/>1181335161u,</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>3412177804u,<sp/>3160834842u,<sp/><sp/>628085408u,<sp/>1382605366u,<sp/>3423369109u,<sp/>3138078467u,<sp/><sp/>570562233u,<sp/>1426400815u,</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/>3317316542u,<sp/>2998733608u,<sp/><sp/>733239954u,<sp/>1555261956u,<sp/>3268935591u,<sp/>3050360625u,<sp/><sp/>752459403u,<sp/>1541320221u,</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>2607071920u,<sp/>3965973030u,<sp/>1969922972u,<sp/><sp/><sp/>40735498u,<sp/>2617837225u,<sp/>3943577151u,<sp/>1913087877u,<sp/><sp/><sp/>83908371u,</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>2512341634u,<sp/>3803740692u,<sp/>2075208622u,<sp/><sp/>213261112u,<sp/>2463272603u,<sp/>3855990285u,<sp/>2094854071u,<sp/><sp/>198958881u,</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>2262029012u,<sp/>4057260610u,<sp/>1759359992u,<sp/><sp/>534414190u,<sp/>2176718541u,<sp/>4139329115u,<sp/>1873836001u,<sp/><sp/>414664567u,</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>2282248934u,<sp/>4279200368u,<sp/>1711684554u,<sp/><sp/>285281116u,<sp/>2405801727u,<sp/>4167216745u,<sp/>1634467795u,<sp/><sp/>376229701u,</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>2685067896u,<sp/>3608007406u,<sp/>1308918612u,<sp/><sp/>956543938u,<sp/>2808555105u,<sp/>3495958263u,<sp/>1231636301u,<sp/>1047427035u,</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/>2932959818u,<sp/>3654703836u,<sp/>1088359270u,<sp/><sp/>936918000u,<sp/>2847714899u,<sp/>3736837829u,<sp/>1202900863u,<sp/><sp/>817233897u,</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>3183342108u,<sp/>3401237130u,<sp/>1404277552u,<sp/><sp/>615818150u,<sp/>3134207493u,<sp/>3453421203u,<sp/>1423857449u,<sp/><sp/>601450431u,</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>3009837614u,<sp/>3294710456u,<sp/>1567103746u,<sp/><sp/>711928724u,<sp/>3020668471u,<sp/>3272380065u,<sp/>1510334235u,<sp/><sp/>755167117u</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">/*Return<sp/>the<sp/>CRC<sp/>of<sp/>the<sp/>bytes<sp/>buf[0..len-1].*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_crc32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0xffffffffu;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>lodepng_crc32_table[(r<sp/>^<sp/>data[i])<sp/>&amp;<sp/>0xff]<sp/>^<sp/>(r<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>^<sp/>0xffffffffu;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!LODEPNG_NO_COMPILE_CRC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_crc32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!LODEPNG_NO_COMPILE_CRC<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Reading<sp/>and<sp/>writing<sp/>single<sp/>bits<sp/>and<sp/>bytes<sp/>from/to<sp/>stream<sp/>for<sp/>LodePNG<sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>readBitFromReversedStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream)</highlight></codeline>
<codeline lineno="2342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((bitstream[(*bitpointer)<sp/>&gt;&gt;<sp/>3]<sp/>&gt;&gt;<sp/>(7<sp/>-<sp/>((*bitpointer)<sp/>&amp;<sp/>0x7)))<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>++(*bitpointer);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readBitsFromReversedStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>nbits<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/>nbits;<sp/>--i)</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>(unsigned)readBitFromReversedStream(bitpointer,<sp/>bitstream)<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBitOfReversedStream0(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>current<sp/>bit<sp/>in<sp/>bitstream<sp/>must<sp/>be<sp/>0<sp/>for<sp/>this<sp/>to<sp/>work*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bit)</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*earlier<sp/>bit<sp/>of<sp/>huffman<sp/>code<sp/>is<sp/>in<sp/>a<sp/>lesser<sp/>significant<sp/>bit<sp/>of<sp/>an<sp/>earlier<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstream[(*bitpointer)<sp/>&gt;&gt;<sp/>3]<sp/>|=<sp/>(bit<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>((*bitpointer)<sp/>&amp;<sp/>0x7)));</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>++(*bitpointer);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBitOfReversedStream(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bitpointer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bitstream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>current<sp/>bit<sp/>in<sp/>bitstream<sp/>may<sp/>be<sp/>0<sp/>or<sp/>1<sp/>for<sp/>this<sp/>to<sp/>work*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bit<sp/>==<sp/>0)<sp/>bitstream[(*bitpointer)<sp/>&gt;&gt;<sp/>3]<sp/>&amp;=<sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(~(1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>((*bitpointer)<sp/>&amp;<sp/>0x7))));</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitstream[(*bitpointer)<sp/>&gt;&gt;<sp/>3]<sp/>|=<sp/><sp/>(1<sp/>&lt;&lt;<sp/>(7<sp/>-<sp/>((*bitpointer)<sp/>&amp;<sp/>0x7)));</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>++(*bitpointer);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>PNG<sp/>chunks<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_chunk_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_read32bitInt(&amp;chunk[0]);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_chunk_type(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type[5],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>4;<sp/>++i)<sp/>type[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)chunk[4<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>type[4]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*null<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lodepng_chunk_type_equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type)</highlight></codeline>
<codeline lineno="2397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strlen(type)<sp/>!=<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(chunk[4]<sp/>==<sp/>type[0]<sp/>&amp;&amp;<sp/>chunk[5]<sp/>==<sp/>type[1]<sp/>&amp;&amp;<sp/>chunk[6]<sp/>==<sp/>type[2]<sp/>&amp;&amp;<sp/>chunk[7]<sp/>==<sp/>type[3]);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lodepng_chunk_ancillary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((chunk[4]<sp/>&amp;<sp/>32)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lodepng_chunk_private(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((chunk[6]<sp/>&amp;<sp/>32)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lodepng_chunk_safetocopy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((chunk[7]<sp/>&amp;<sp/>32)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lodepng_chunk_data(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;chunk[8];</highlight></codeline>
<codeline lineno="2420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lodepng_chunk_data_const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;chunk[8];</highlight></codeline>
<codeline lineno="2425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_chunk_check_crc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>lodepng_chunk_length(chunk);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CRC<sp/>=<sp/>lodepng_read32bitInt(&amp;chunk[length<sp/>+<sp/>8]);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>CRC<sp/>is<sp/>taken<sp/>of<sp/>the<sp/>data<sp/>and<sp/>the<sp/>4<sp/>chunk<sp/>type<sp/>letters,<sp/>not<sp/>the<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>checksum<sp/>=<sp/>lodepng_crc32(&amp;chunk[4],<sp/>length<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CRC<sp/>!=<sp/>checksum)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_chunk_generate_crc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>lodepng_chunk_length(chunk);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CRC<sp/>=<sp/>lodepng_crc32(&amp;chunk[4],<sp/>length<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>lodepng_set32bitInt(chunk<sp/>+<sp/>8<sp/>+<sp/>length,<sp/>CRC);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lodepng_chunk_next(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_chunk_length<sp/>=<sp/>lodepng_chunk_length(chunk)<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;chunk[total_chunk_length];</highlight></codeline>
<codeline lineno="2448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lodepng_chunk_next_const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_chunk_length<sp/>=<sp/>lodepng_chunk_length(chunk)<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;chunk[total_chunk_length];</highlight></codeline>
<codeline lineno="2454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_chunk_append(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outlength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk)</highlight></codeline>
<codeline lineno="2457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_chunk_length<sp/>=<sp/>lodepng_chunk_length(chunk)<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chunk_start,<sp/>*new_buffer;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_length<sp/>=<sp/>(*outlength)<sp/>+<sp/>total_chunk_length;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_length<sp/>&lt;<sp/>total_chunk_length<sp/>||<sp/>new_length<sp/>&lt;<sp/>(*outlength))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>77;<sp/></highlight><highlight class="comment">/*integer<sp/>overflow<sp/>happened*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>new_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_realloc(*out,<sp/>new_length);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!new_buffer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/>(*out)<sp/>=<sp/>new_buffer;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>(*outlength)<sp/>=<sp/>new_length;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>chunk_start<sp/>=<sp/>&amp;(*out)[new_length<sp/>-<sp/>total_chunk_length];</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>total_chunk_length;<sp/>++i)<sp/>chunk_start[i]<sp/>=<sp/>chunk[i];</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_chunk_create(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outlength,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline lineno="2477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chunk,<sp/>*new_buffer;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_length<sp/>=<sp/>(*outlength)<sp/>+<sp/>length<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_length<sp/>&lt;<sp/>length<sp/>+<sp/>12<sp/>||<sp/>new_length<sp/>&lt;<sp/>(*outlength))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>77;<sp/></highlight><highlight class="comment">/*integer<sp/>overflow<sp/>happened*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/>new_buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_realloc(*out,<sp/>new_length);</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!new_buffer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>(*out)<sp/>=<sp/>new_buffer;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>(*outlength)<sp/>=<sp/>new_length;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>chunk<sp/>=<sp/>&amp;(*out)[(*outlength)<sp/>-<sp/>length<sp/>-<sp/>12];</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*1:<sp/>length*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/>lodepng_set32bitInt(chunk,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)length);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*2:<sp/>chunk<sp/>name<sp/>(4<sp/>letters)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>chunk[4]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)type[0];</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/>chunk[5]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)type[1];</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>chunk[6]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)type[2];</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>chunk[7]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)type[3];</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*3:<sp/>the<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>chunk[8<sp/>+<sp/>i]<sp/>=<sp/>data[i];</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*4:<sp/>CRC<sp/>(of<sp/>the<sp/>chunkname<sp/>characters<sp/>and<sp/>the<sp/>data)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>lodepng_chunk_generate_crc(chunk);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>Color<sp/>types<sp/>and<sp/>such<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="comment">/*return<sp/>type<sp/>is<sp/>a<sp/>LodePNG<sp/>error<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>checkColorValidity(LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bd)<sp/></highlight><highlight class="comment">/*bd<sp/>=<sp/>bitdepth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(colortype)</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(bd<sp/>==<sp/>1<sp/>||<sp/>bd<sp/>==<sp/>2<sp/>||<sp/>bd<sp/>==<sp/>4<sp/>||<sp/>bd<sp/>==<sp/>8<sp/>||<sp/>bd<sp/>==<sp/>16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*grey*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd<sp/>==<sp/>8<sp/>||<sp/>bd<sp/>==<sp/>16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*RGB*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(bd<sp/>==<sp/>1<sp/>||<sp/>bd<sp/>==<sp/>2<sp/>||<sp/>bd<sp/>==<sp/>4<sp/>||<sp/>bd<sp/>==<sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*palette*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd<sp/>==<sp/>8<sp/>||<sp/>bd<sp/>==<sp/>16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*grey<sp/>+<sp/>alpha*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd<sp/>==<sp/>8<sp/>||<sp/>bd<sp/>==<sp/>16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>37;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*RGBA*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>31;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*allowed<sp/>color<sp/>type<sp/>/<sp/>bits<sp/>combination*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getNumColorChannels(LodePNGColorType<sp/>colortype)</highlight></codeline>
<codeline lineno="2526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(colortype)</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*grey*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;<sp/></highlight><highlight class="comment">/*RGB*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">/*palette*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/></highlight><highlight class="comment">/*grey<sp/>+<sp/>alpha*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;<sp/></highlight><highlight class="comment">/*RGBA*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*unexisting<sp/>color<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_get_bpp_lct(LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="2539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*bits<sp/>per<sp/>pixel<sp/>is<sp/>amount<sp/>of<sp/>channels<sp/>*<sp/>bits<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getNumColorChannels(colortype)<sp/>*<sp/>bitdepth;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_color_mode_init(LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>info-&gt;key_defined<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>info-&gt;key_r<sp/>=<sp/>info-&gt;key_g<sp/>=<sp/>info-&gt;key_b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>info-&gt;colortype<sp/>=<sp/>LCT_RGBA;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>info-&gt;bitdepth<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>info-&gt;palette<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>info-&gt;palettesize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_color_mode_cleanup(LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>lodepng_palette_clear(info);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_color_mode_copy(LodePNGColorMode*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>source)</highlight></codeline>
<codeline lineno="2562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>lodepng_color_mode_cleanup(dest);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/>*source;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(source-&gt;palette)</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;palette<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(1024);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!dest-&gt;palette<sp/>&amp;&amp;<sp/>source-&gt;palettesize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>source-&gt;palettesize<sp/>*<sp/>4;<sp/>++i)<sp/>dest-&gt;palette[i]<sp/>=<sp/>source-&gt;palette[i];</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lodepng_color_mode_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>b)</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;colortype<sp/>!=<sp/>b-&gt;colortype)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;bitdepth<sp/>!=<sp/>b-&gt;bitdepth)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;key_defined<sp/>!=<sp/>b-&gt;key_defined)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;key_defined)</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;key_r<sp/>!=<sp/>b-&gt;key_r)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;key_g<sp/>!=<sp/>b-&gt;key_g)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;key_b<sp/>!=<sp/>b-&gt;key_b)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*if<sp/>one<sp/>of<sp/>the<sp/>palette<sp/>sizes<sp/>is<sp/>0,<sp/>then<sp/>we<sp/>consider<sp/>it<sp/>to<sp/>be<sp/>the<sp/>same<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="2588"><highlight class="comment"><sp/><sp/>other:<sp/>it<sp/>means<sp/>that<sp/>e.g.<sp/>the<sp/>palette<sp/>was<sp/>not<sp/>given<sp/>by<sp/>the<sp/>user<sp/>and<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="2589"><highlight class="comment"><sp/><sp/>considered<sp/>the<sp/>same<sp/>as<sp/>the<sp/>palette<sp/>inside<sp/>the<sp/>PNG.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(1</highlight><highlight class="comment">/*a-&gt;palettesize<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>b-&gt;palettesize<sp/>!=<sp/>0*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;palettesize<sp/>!=<sp/>b-&gt;palettesize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>a-&gt;palettesize<sp/>*<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a-&gt;palette[i]<sp/>!=<sp/>b-&gt;palette[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_palette_clear(LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;palette)<sp/>lodepng_free(info-&gt;palette);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>info-&gt;palette<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>info-&gt;palettesize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_palette_add(LodePNGColorMode*<sp/>info,</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="2609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>same<sp/>resize<sp/>technique<sp/>as<sp/>C++<sp/>std::vectors<sp/>is<sp/>used,<sp/>and<sp/>here<sp/>it&apos;s<sp/>made<sp/>so<sp/>that<sp/>for<sp/>a<sp/>palette<sp/>with</highlight></codeline>
<codeline lineno="2612"><highlight class="comment"><sp/><sp/>the<sp/>max<sp/>of<sp/>256<sp/>colors,<sp/>it&apos;ll<sp/>have<sp/>the<sp/>exact<sp/>alloc<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!info-&gt;palette)<sp/></highlight><highlight class="comment">/*allocate<sp/>palette<sp/>if<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*room<sp/>for<sp/>256<sp/>colors<sp/>with<sp/>4<sp/>bytes<sp/>each*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_realloc(info-&gt;palette,<sp/>1024);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>info-&gt;palette<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>info-&gt;palette[4<sp/>*<sp/>info-&gt;palettesize<sp/>+<sp/>0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>info-&gt;palette[4<sp/>*<sp/>info-&gt;palettesize<sp/>+<sp/>1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>info-&gt;palette[4<sp/>*<sp/>info-&gt;palettesize<sp/>+<sp/>2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>info-&gt;palette[4<sp/>*<sp/>info-&gt;palettesize<sp/>+<sp/>3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>++info-&gt;palettesize;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_get_bpp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*calculate<sp/>bits<sp/>per<sp/>pixel<sp/>out<sp/>of<sp/>colortype<sp/>and<sp/>bitdepth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_get_bpp_lct(info-&gt;colortype,<sp/>info-&gt;bitdepth);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_get_channels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getNumColorChannels(info-&gt;colortype);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_is_greyscale_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;colortype<sp/>==<sp/>LCT_GREY<sp/>||<sp/>info-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_is_alpha_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(info-&gt;colortype<sp/>&amp;<sp/>4)<sp/>!=<sp/>0;<sp/></highlight><highlight class="comment">/*4<sp/>or<sp/>6*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_is_palette_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;colortype<sp/>==<sp/>LCT_PALETTE;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_has_palette_alpha(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info-&gt;palettesize;<sp/>++i)</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;palette[i<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>&lt;<sp/>255)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_can_have_alpha(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="2665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info-&gt;key_defined</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>lodepng_is_alpha_type(info)</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>lodepng_has_palette_alpha(info);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lodepng_get_raw_size(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>color)</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*will<sp/>not<sp/>overflow<sp/>for<sp/>any<sp/>color<sp/>type<sp/>if<sp/>roughly<sp/>w<sp/>*<sp/>h<sp/>&lt;<sp/>268435455*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(color);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>w<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((n<sp/>/<sp/>8)<sp/>*<sp/>bpp)<sp/>+<sp/>((n<sp/>&amp;<sp/>7)<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lodepng_get_raw_size_lct(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="2680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*will<sp/>not<sp/>overflow<sp/>for<sp/>any<sp/>color<sp/>type<sp/>if<sp/>roughly<sp/>w<sp/>*<sp/>h<sp/>&lt;<sp/>268435455*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp_lct(colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>w<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((n<sp/>/<sp/>8)<sp/>*<sp/>bpp)<sp/>+<sp/>((n<sp/>&amp;<sp/>7)<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="comment">/*in<sp/>an<sp/>idat<sp/>chunk,<sp/>each<sp/>scanline<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>8<sp/>bits,<sp/>unlike<sp/>the<sp/>lodepng<sp/>output<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lodepng_get_raw_size_idat(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>color)</highlight></codeline>
<codeline lineno="2692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*will<sp/>not<sp/>overflow<sp/>for<sp/>any<sp/>color<sp/>type<sp/>if<sp/>roughly<sp/>w<sp/>*<sp/>h<sp/>&lt;<sp/>268435455*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(color);</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>((w<sp/>/<sp/>8)<sp/>*<sp/>bpp)<sp/>+<sp/>((w<sp/>&amp;<sp/>7)<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h<sp/>*<sp/>line;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_PNG*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGUnknownChunks_init(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>3;<sp/>++i)<sp/>info-&gt;unknown_chunks_data[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>3;<sp/>++i)<sp/>info-&gt;unknown_chunks_size[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGUnknownChunks_cleanup(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>3;<sp/>++i)<sp/>lodepng_free(info-&gt;unknown_chunks_data[i]);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNGUnknownChunks_copy(LodePNGInfo*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>src)</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/>LodePNGUnknownChunks_cleanup(dest);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;unknown_chunks_size[i]<sp/>=<sp/>src-&gt;unknown_chunks_size[i];</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>dest-&gt;unknown_chunks_data[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(src-&gt;unknown_chunks_size[i]);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!dest-&gt;unknown_chunks_data[i]<sp/>&amp;&amp;<sp/>dest-&gt;unknown_chunks_size[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>src-&gt;unknown_chunks_size[i];<sp/>++j)</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;unknown_chunks_data[i][j]<sp/>=<sp/>src-&gt;unknown_chunks_data[i][j];</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGText_init(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>info-&gt;text_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>info-&gt;text_keys<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>info-&gt;text_strings<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGText_cleanup(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info-&gt;text_num;<sp/>++i)</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;text_keys[i]);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;text_strings[i]);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;text_keys);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;text_strings);</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNGText_copy(LodePNGInfo*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>source)</highlight></codeline>
<codeline lineno="2759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>dest-&gt;text_keys<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>dest-&gt;text_strings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>dest-&gt;text_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>source-&gt;text_num;<sp/>++i)</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(lodepng_add_text(dest,<sp/>source-&gt;text_keys[i],<sp/>source-&gt;text_strings[i]));</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_clear_text(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>LodePNGText_cleanup(info);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_add_text(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_keys<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;text_keys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;text_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_strings<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;text_strings,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;text_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!new_keys<sp/>||<sp/>!new_strings)</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_keys);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_strings);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/>++info-&gt;text_num;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>info-&gt;text_keys<sp/>=<sp/>new_keys;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>info-&gt;text_strings<sp/>=<sp/>new_strings;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;text_keys[info-&gt;text_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;text_keys[info-&gt;text_num<sp/>-<sp/>1],<sp/>key);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;text_strings[info-&gt;text_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;text_strings[info-&gt;text_num<sp/>-<sp/>1],<sp/>str);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGIText_init(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>info-&gt;itext_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>info-&gt;itext_keys<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/>info-&gt;itext_langtags<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>info-&gt;itext_transkeys<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>info-&gt;itext_strings<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LodePNGIText_cleanup(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info-&gt;itext_num;<sp/>++i)</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;itext_keys[i]);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;itext_langtags[i]);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;itext_transkeys[i]);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>string_cleanup(&amp;info-&gt;itext_strings[i]);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;itext_keys);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;itext_langtags);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;itext_transkeys);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/>lodepng_free(info-&gt;itext_strings);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>LodePNGIText_copy(LodePNGInfo*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>source)</highlight></codeline>
<codeline lineno="2828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>dest-&gt;itext_keys<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/>dest-&gt;itext_langtags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>dest-&gt;itext_transkeys<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>dest-&gt;itext_strings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/>dest-&gt;itext_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>source-&gt;itext_num;<sp/>++i)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(lodepng_add_itext(dest,<sp/>source-&gt;itext_keys[i],<sp/>source-&gt;itext_langtags[i],</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;itext_transkeys[i],<sp/>source-&gt;itext_strings[i]));</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_clear_itext(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/>LodePNGIText_cleanup(info);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_add_itext(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>langtag,</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>transkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_keys<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;itext_keys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;itext_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_langtags<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;itext_langtags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;itext_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_transkeys<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;itext_transkeys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;itext_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>new_strings<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)(lodepng_realloc(info-&gt;itext_strings,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(info-&gt;itext_num<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!new_keys<sp/>||<sp/>!new_langtags<sp/>||<sp/>!new_transkeys<sp/>||<sp/>!new_strings)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_keys);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_langtags);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_transkeys);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(new_strings);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/>++info-&gt;itext_num;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>info-&gt;itext_keys<sp/>=<sp/>new_keys;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/>info-&gt;itext_langtags<sp/>=<sp/>new_langtags;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/>info-&gt;itext_transkeys<sp/>=<sp/>new_transkeys;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>info-&gt;itext_strings<sp/>=<sp/>new_strings;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;itext_keys[info-&gt;itext_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;itext_keys[info-&gt;itext_num<sp/>-<sp/>1],<sp/>key);</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;itext_langtags[info-&gt;itext_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;itext_langtags[info-&gt;itext_num<sp/>-<sp/>1],<sp/>langtag);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;itext_transkeys[info-&gt;itext_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;itext_transkeys[info-&gt;itext_num<sp/>-<sp/>1],<sp/>transkey);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/>string_init(&amp;info-&gt;itext_strings[info-&gt;itext_num<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/>string_set(&amp;info-&gt;itext_strings[info-&gt;itext_num<sp/>-<sp/>1],<sp/>str);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_info_init(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>lodepng_color_mode_init(&amp;info-&gt;color);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/>info-&gt;interlace_method<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>info-&gt;compression_method<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>info-&gt;filter_method<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>info-&gt;background_defined<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>info-&gt;background_r<sp/>=<sp/>info-&gt;background_g<sp/>=<sp/>info-&gt;background_b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/>LodePNGText_init(info);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>LodePNGIText_init(info);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>info-&gt;time_defined<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>info-&gt;phys_defined<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>LodePNGUnknownChunks_init(info);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_info_cleanup(LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="2907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>lodepng_color_mode_cleanup(&amp;info-&gt;color);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>LodePNGText_cleanup(info);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>LodePNGIText_cleanup(info);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>LodePNGUnknownChunks_cleanup(info);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_info_copy(LodePNGInfo*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>source)</highlight></codeline>
<codeline lineno="2918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>lodepng_info_cleanup(dest);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/>*source;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/>lodepng_color_mode_init(&amp;dest-&gt;color);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>CERROR_TRY_RETURN(lodepng_color_mode_copy(&amp;dest-&gt;color,<sp/>&amp;source-&gt;color));</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>CERROR_TRY_RETURN(LodePNGText_copy(dest,<sp/>source));</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>CERROR_TRY_RETURN(LodePNGIText_copy(dest,<sp/>source));</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>LodePNGUnknownChunks_init(dest);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/>CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest,<sp/>source));</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_info_swap(LodePNGInfo*<sp/>a,<sp/>LodePNGInfo*<sp/>b)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>LodePNGInfo<sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">/*index:<sp/>bitgroup<sp/>index,<sp/>bits:<sp/>bitgroup<sp/>size(1,<sp/>2<sp/>or<sp/>4),<sp/>in:<sp/>bitgroup<sp/>value,<sp/>out:<sp/>octet<sp/>array<sp/>to<sp/>add<sp/>bits<sp/>to*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addColorBits(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>bits<sp/>==<sp/>1<sp/>?<sp/>7<sp/>:<sp/>bits<sp/>==<sp/>2<sp/>?<sp/>3<sp/>:<sp/>1;<sp/></highlight><highlight class="comment">/*8<sp/>/<sp/>bits<sp/>-<sp/>1*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*p<sp/>=<sp/>the<sp/>partial<sp/>index<sp/>in<sp/>the<sp/>byte,<sp/>e.g.<sp/>with<sp/>4<sp/>palettebits<sp/>it<sp/>is<sp/>0<sp/>for<sp/>first<sp/>half<sp/>or<sp/>1<sp/>for<sp/>second<sp/>half*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>index<sp/>&amp;<sp/>m;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>in<sp/>&amp;=<sp/>(1u<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1u;<sp/></highlight><highlight class="comment">/*filter<sp/>out<sp/>any<sp/>other<sp/>bits<sp/>of<sp/>the<sp/>input<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>in<sp/>=<sp/>in<sp/>&lt;&lt;<sp/>(bits<sp/>*<sp/>(m<sp/>-<sp/>p));</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>0)<sp/>out[index<sp/>*<sp/>bits<sp/>/<sp/>8]<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>out[index<sp/>*<sp/>bits<sp/>/<sp/>8]<sp/>|=<sp/>in;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColorTree<sp/>ColorTree;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2958"><highlight class="comment">One<sp/>node<sp/>of<sp/>a<sp/>color<sp/>tree</highlight></codeline>
<codeline lineno="2959"><highlight class="comment">This<sp/>is<sp/>the<sp/>data<sp/>structure<sp/>used<sp/>to<sp/>count<sp/>the<sp/>number<sp/>of<sp/>unique<sp/>colors<sp/>and<sp/>to<sp/>get<sp/>a<sp/>palette</highlight></codeline>
<codeline lineno="2960"><highlight class="comment">index<sp/>for<sp/>a<sp/>color.<sp/>It&apos;s<sp/>like<sp/>an<sp/>octree,<sp/>but<sp/>because<sp/>the<sp/>alpha<sp/>channel<sp/>is<sp/>used<sp/>too,<sp/>each</highlight></codeline>
<codeline lineno="2961"><highlight class="comment">node<sp/>has<sp/>16<sp/>instead<sp/>of<sp/>8<sp/>children.</highlight></codeline>
<codeline lineno="2962"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColorTree</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/>ColorTree*<sp/>children[16];<sp/></highlight><highlight class="comment">/*up<sp/>to<sp/>16<sp/>pointers<sp/>to<sp/>ColorTree<sp/>of<sp/>next<sp/>level*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;<sp/></highlight><highlight class="comment">/*the<sp/>payload.<sp/>Only<sp/>has<sp/>a<sp/>meaningful<sp/>value<sp/>if<sp/>this<sp/>is<sp/>in<sp/>the<sp/>last<sp/>level*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>color_tree_init(ColorTree*<sp/>tree)</highlight></codeline>
<codeline lineno="2970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>16;<sp/>++i)<sp/>tree-&gt;children[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/>tree-&gt;index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>color_tree_cleanup(ColorTree*<sp/>tree)</highlight></codeline>
<codeline lineno="2977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree-&gt;children[i])</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_tree_cleanup(tree-&gt;children[i]);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_free(tree-&gt;children[i]);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight><highlight class="comment">/*returns<sp/>-1<sp/>if<sp/>color<sp/>not<sp/>present,<sp/>its<sp/>index<sp/>otherwise*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color_tree_get(ColorTree*<sp/>tree,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="2991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(bit<sp/>=<sp/>0;<sp/>bit<sp/>&lt;<sp/>8;<sp/>++bit)</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>8<sp/>*<sp/>((r<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>4<sp/>*<sp/>((g<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>2<sp/>*<sp/>((b<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>1<sp/>*<sp/>((a<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;children[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>tree<sp/>=<sp/>tree-&gt;children[i];</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tree<sp/>?<sp/>tree-&gt;index<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color_tree_has(ColorTree*<sp/>tree,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="3004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_tree_get(tree,<sp/>r,<sp/>g,<sp/>b,<sp/>a)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="comment">/*color<sp/>is<sp/>not<sp/>allowed<sp/>to<sp/>already<sp/>exist.</highlight></codeline>
<codeline lineno="3010"><highlight class="comment">Index<sp/>should<sp/>be<sp/>&gt;=<sp/>0<sp/>(it&apos;s<sp/>signed<sp/>to<sp/>be<sp/>compatible<sp/>with<sp/>using<sp/>-1<sp/>for<sp/>&quot;doesn&apos;t<sp/>exist&quot;)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>color_tree_add(ColorTree*<sp/>tree,</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="3013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(bit<sp/>=<sp/>0;<sp/>bit<sp/>&lt;<sp/>8;<sp/>++bit)</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>8<sp/>*<sp/>((r<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>4<sp/>*<sp/>((g<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>2<sp/>*<sp/>((b<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1)<sp/>+<sp/>1<sp/>*<sp/>((a<sp/>&gt;&gt;<sp/>bit)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tree-&gt;children[i])</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;children[i]<sp/>=<sp/>(ColorTree*)lodepng_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ColorTree));</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_tree_init(tree-&gt;children[i]);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;children[i];</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/>tree-&gt;index<sp/>=<sp/>(int)index;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="comment">/*put<sp/>a<sp/>pixel,<sp/>given<sp/>its<sp/>RGBA<sp/>color,<sp/>into<sp/>image<sp/>of<sp/>any<sp/>color<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rgba8ToPixel(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode,<sp/>ColorTree*<sp/>tree<sp/></highlight><highlight class="comment">/*for<sp/>palette*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="3032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>grey<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">/*((unsigned<sp/>short)r<sp/>+<sp/>g<sp/>+<sp/>b)<sp/>/<sp/>3*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)<sp/>out[i]<sp/>=<sp/>grey;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>16)<sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>=<sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>grey;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*take<sp/>the<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>grey*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grey<sp/>=<sp/>(grey<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>mode-&gt;bitdepth))<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>mode-&gt;bitdepth)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addColorBits(out,<sp/>i,<sp/>mode-&gt;bitdepth,<sp/>grey);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>3<sp/>+<sp/>0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>3<sp/>+<sp/>1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>3<sp/>+<sp/>2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>=<sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>1]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>=<sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>3]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>=<sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>5]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>color_tree_get(tree,<sp/>r,<sp/>g,<sp/>b,<sp/>a);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>82;<sp/></highlight><highlight class="comment">/*color<sp/>not<sp/>in<sp/>palette*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)<sp/>out[i]<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>addColorBits(out,<sp/>i,<sp/>mode-&gt;bitdepth,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)index);</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>grey<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">/*((unsigned<sp/>short)r<sp/>+<sp/>g<sp/>+<sp/>b)<sp/>/<sp/>3*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>=<sp/>grey;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>=<sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>=<sp/>grey;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>=<sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>0]<sp/>=<sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>1]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>2]<sp/>=<sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>3]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>4]<sp/>=<sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>5]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>6]<sp/>=<sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>7]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*no<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment">/*put<sp/>a<sp/>pixel,<sp/>given<sp/>its<sp/>RGBA16<sp/>color,<sp/>into<sp/>image<sp/>of<sp/>any<sp/>color<sp/>16-bitdepth<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rgba16ToPixel(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode,</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="3106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>grey<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">/*((unsigned)r<sp/>+<sp/>g<sp/>+<sp/>b)<sp/>/<sp/>3*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>=<sp/>(grey<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>grey<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>=<sp/>(r<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>1]<sp/>=<sp/>r<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>=<sp/>(g<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>3]<sp/>=<sp/>g<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>=<sp/>(b<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>6<sp/>+<sp/>5]<sp/>=<sp/>b<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>grey<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">/*((unsigned)r<sp/>+<sp/>g<sp/>+<sp/>b)<sp/>/<sp/>3*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>=<sp/>(grey<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>=<sp/>grey<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>=<sp/>(a<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>=<sp/>a<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>0]<sp/>=<sp/>(r<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>1]<sp/>=<sp/>r<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>2]<sp/>=<sp/>(g<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>3]<sp/>=<sp/>g<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>4]<sp/>=<sp/>(b<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>5]<sp/>=<sp/>b<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>6]<sp/>=<sp/>(a<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i<sp/>*<sp/>8<sp/>+<sp/>7]<sp/>=<sp/>a<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">/*Get<sp/>RGBA8<sp/>color<sp/>of<sp/>pixel<sp/>with<sp/>index<sp/>i<sp/>(y<sp/>*<sp/>width<sp/>+<sp/>x)<sp/>from<sp/>the<sp/>raw<sp/>image<sp/>with<sp/>given<sp/>color<sp/>type.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getPixelColorRGBA8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>g,</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a,</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode)</highlight></codeline>
<codeline lineno="3148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>*r<sp/>==<sp/>mode-&gt;key_r)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>highest<sp/>=<sp/>((1U<sp/>&lt;&lt;<sp/>mode-&gt;bitdepth)<sp/>-<sp/>1U);<sp/></highlight><highlight class="comment">/*highest<sp/>possible<sp/>value<sp/>for<sp/>this<sp/>bit<sp/>depth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>*<sp/>mode-&gt;bitdepth;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>readBitsFromReversedStream(&amp;j,<sp/>in,<sp/>mode-&gt;bitdepth);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>(value<sp/>*<sp/>255)<sp/>/<sp/>highest;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>value<sp/>==<sp/>mode-&gt;key_r)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>0];<sp/>*g<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>1];<sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>*r<sp/>==<sp/>mode-&gt;key_r<sp/>&amp;&amp;<sp/>*g<sp/>==<sp/>mode-&gt;key_g<sp/>&amp;&amp;<sp/>*b<sp/>==<sp/>mode-&gt;key_b)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4];</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>3]<sp/>==<sp/>mode-&gt;key_g</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>5]<sp/>==<sp/>mode-&gt;key_b)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)<sp/>index<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>*<sp/>mode-&gt;bitdepth;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>readBitsFromReversedStream(&amp;j,<sp/>in,<sp/>mode-&gt;bitdepth);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>mode-&gt;palettesize)</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*This<sp/>is<sp/>an<sp/>error<sp/>according<sp/>to<sp/>the<sp/>PNG<sp/>spec,<sp/>but<sp/>common<sp/>PNG<sp/>decoders<sp/>make<sp/>it<sp/>black<sp/>instead.</highlight></codeline>
<codeline lineno="3205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Done<sp/>here<sp/>too,<sp/>slightly<sp/>faster<sp/>due<sp/>to<sp/>no<sp/>error<sp/>handling<sp/>needed.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>4];</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>6];</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="comment">/*Similar<sp/>to<sp/>getPixelColorRGBA8,<sp/>but<sp/>with<sp/>all<sp/>the<sp/>for<sp/>loops<sp/>inside<sp/>of<sp/>the<sp/>color</highlight></codeline>
<codeline lineno="3250"><highlight class="comment">mode<sp/>test<sp/>cases,<sp/>optimized<sp/>to<sp/>convert<sp/>the<sp/>colors<sp/>much<sp/>faster,<sp/>when<sp/>converting</highlight></codeline>
<codeline lineno="3251"><highlight class="comment">to<sp/>RGBA<sp/>or<sp/>RGB<sp/>with<sp/>8<sp/>bit<sp/>per<sp/>cannel.<sp/>buffer<sp/>must<sp/>be<sp/>RGBA<sp/>or<sp/>RGB<sp/>output<sp/>with</highlight></codeline>
<codeline lineno="3252"><highlight class="comment">enough<sp/>memory,<sp/>if<sp/>has_alpha<sp/>is<sp/>true<sp/>the<sp/>output<sp/>is<sp/>RGBA.<sp/>mode<sp/>has<sp/>the<sp/>color<sp/>mode</highlight></codeline>
<codeline lineno="3253"><highlight class="comment">of<sp/>the<sp/>input<sp/>buffer.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getPixelColorsRGBA8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpixels,</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>has_alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode)</highlight></codeline>
<codeline lineno="3257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_channels<sp/>=<sp/>has_alpha<sp/>?<sp/>4<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;key_defined<sp/>&amp;&amp;<sp/>in[i]<sp/>==<sp/>mode-&gt;key_r<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;key_defined<sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>highest<sp/>=<sp/>((1U<sp/>&lt;&lt;<sp/>mode-&gt;bitdepth)<sp/>-<sp/>1U);<sp/></highlight><highlight class="comment">/*highest<sp/>possible<sp/>value<sp/>for<sp/>this<sp/>bit<sp/>depth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>readBitsFromReversedStream(&amp;j,<sp/>in,<sp/>mode-&gt;bitdepth);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>(value<sp/>*<sp/>255)<sp/>/<sp/>highest;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;key_defined<sp/>&amp;&amp;<sp/>value<sp/>==<sp/>mode-&gt;key_r<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>3<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;key_defined<sp/>&amp;&amp;<sp/>buffer[0]<sp/>==<sp/>mode-&gt;key_r</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>buffer[1]==<sp/>mode-&gt;key_g<sp/>&amp;&amp;<sp/>buffer[2]<sp/>==<sp/>mode-&gt;key_b<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4];</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;key_defined</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>3]<sp/>==<sp/>mode-&gt;key_g</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>5]<sp/>==<sp/>mode-&gt;key_b<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)<sp/>index<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>readBitsFromReversedStream(&amp;j,<sp/>in,<sp/>mode-&gt;bitdepth);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>mode-&gt;palettesize)</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*This<sp/>is<sp/>an<sp/>error<sp/>according<sp/>to<sp/>the<sp/>PNG<sp/>spec,<sp/>but<sp/>most<sp/>PNG<sp/>decoders<sp/>make<sp/>it<sp/>black<sp/>instead.</highlight></codeline>
<codeline lineno="3329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Done<sp/>here<sp/>too,<sp/>slightly<sp/>faster<sp/>due<sp/>to<sp/>no<sp/>error<sp/>handling<sp/>needed.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[2]<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>mode-&gt;palette[index<sp/>*<sp/>4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>buffer[1]<sp/>=<sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i,<sp/>buffer<sp/>+=<sp/>num_channels)</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[0]<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[1]<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[2]<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>4];</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_alpha)<sp/>buffer[3]<sp/>=<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>6];</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="comment">/*Get<sp/>RGBA16<sp/>color<sp/>of<sp/>pixel<sp/>with<sp/>index<sp/>i<sp/>(y<sp/>*<sp/>width<sp/>+<sp/>x)<sp/>from<sp/>the<sp/>raw<sp/>image<sp/>with</highlight></codeline>
<codeline lineno="3387"><highlight class="comment">given<sp/>color<sp/>type,<sp/>but<sp/>the<sp/>given<sp/>color<sp/>type<sp/>must<sp/>be<sp/>16-bit<sp/>itself.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getPixelColorRGBA16(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>g,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/>a,</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode)</highlight></codeline>
<codeline lineno="3390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>256<sp/>*<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined<sp/>&amp;&amp;<sp/>256U<sp/>*<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>65535;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>5];</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;key_defined</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>1]<sp/>==<sp/>mode-&gt;key_r</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>3]<sp/>==<sp/>mode-&gt;key_g</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>4]<sp/>+<sp/>in[i<sp/>*<sp/>6<sp/>+<sp/>5]<sp/>==<sp/>mode-&gt;key_b)<sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>65535;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*g<sp/>=<sp/>*b<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>4<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>0]<sp/>+<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/>*g<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>2]<sp/>+<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>4]<sp/>+<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>5];</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>256u<sp/>*<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>6]<sp/>+<sp/>in[i<sp/>*<sp/>8<sp/>+<sp/>7];</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode_out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode_in,</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="3425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>ColorTree<sp/>tree;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpixels<sp/>=<sp/>w<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_color_mode_equal(mode_out,<sp/>mode_in))</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numbytes<sp/>=<sp/>lodepng_get_raw_size(w,<sp/>h,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numbytes;<sp/>++i)<sp/>out[i]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_out-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>palettesize<sp/>=<sp/>mode_out-&gt;palettesize;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>palette<sp/>=<sp/>mode_out-&gt;palette;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>palsize<sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>mode_out-&gt;bitdepth;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>the<sp/>user<sp/>specified<sp/>output<sp/>palette<sp/>but<sp/>did<sp/>not<sp/>give<sp/>the<sp/>values,<sp/>assume</highlight></codeline>
<codeline lineno="3443"><highlight class="comment"><sp/><sp/><sp/><sp/>they<sp/>want<sp/>the<sp/>values<sp/>of<sp/>the<sp/>input<sp/>color<sp/>type<sp/>(assuming<sp/>that<sp/>one<sp/>is<sp/>palette).</highlight></codeline>
<codeline lineno="3444"><highlight class="comment"><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>we<sp/>never<sp/>create<sp/>a<sp/>new<sp/>palette<sp/>ourselves.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(palettesize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>palettesize<sp/>=<sp/>mode_in-&gt;palettesize;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>palette<sp/>=<sp/>mode_in-&gt;palette;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(palettesize<sp/>&lt;<sp/>palsize)<sp/>palsize<sp/>=<sp/>palettesize;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>color_tree_init(&amp;tree);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>palsize;<sp/>++i)</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>&amp;palette[i<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_tree_add(&amp;tree,<sp/>p[0],<sp/>p[1],<sp/>p[2],<sp/>p[3],<sp/>i);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_in-&gt;bitdepth<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>mode_out-&gt;bitdepth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i)</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0,<sp/>g<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0,<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getPixelColorRGBA16(&amp;r,<sp/>&amp;g,<sp/>&amp;b,<sp/>&amp;a,<sp/>in,<sp/>i,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgba16ToPixel(out,<sp/>i,<sp/>mode_out,<sp/>r,<sp/>g,<sp/>b,<sp/>a);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_out-&gt;bitdepth<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>mode_out-&gt;colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>getPixelColorsRGBA8(out,<sp/>numpixels,<sp/>1,<sp/>in,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_out-&gt;bitdepth<sp/>==<sp/>8<sp/>&amp;&amp;<sp/>mode_out-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/>getPixelColorsRGBA8(out,<sp/>numpixels,<sp/>0,<sp/>in,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0,<sp/>g<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0,<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i)</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getPixelColorRGBA8(&amp;r,<sp/>&amp;g,<sp/>&amp;b,<sp/>&amp;a,<sp/>in,<sp/>i,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(rgba8ToPixel(out,<sp/>i,<sp/>mode_out,<sp/>&amp;tree,<sp/>r,<sp/>g,<sp/>b,<sp/>a));</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_out-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>color_tree_cleanup(&amp;tree);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*no<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_color_profile_init(LodePNGColorProfile*<sp/>profile)</highlight></codeline>
<codeline lineno="3497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>profile-&gt;colored<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>profile-&gt;key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/>profile-&gt;alpha<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/>profile-&gt;key_r<sp/>=<sp/>profile-&gt;key_g<sp/>=<sp/>profile-&gt;key_b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/>profile-&gt;numcolors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/>profile-&gt;bits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight><highlight class="comment">/*function<sp/>used<sp/>for<sp/>debug<sp/>purposes<sp/>with<sp/>C++*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="comment">/*void<sp/>printColorProfile(LodePNGColorProfile*<sp/>p)</highlight></codeline>
<codeline lineno="3508"><highlight class="comment">{</highlight></codeline>
<codeline lineno="3509"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;colored:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;colored<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3510"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;key:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;key<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3511"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;key_r:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;key_r<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3512"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;key_g:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;key_g<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3513"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;key_b:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;key_b<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3514"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;alpha:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;alpha<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3515"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;numcolors:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;numcolors<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3516"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;bits:<sp/>&quot;<sp/>&lt;&lt;<sp/>(int)p-&gt;bits<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3517"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight><highlight class="comment">/*Returns<sp/>how<sp/>many<sp/>bits<sp/>needed<sp/>to<sp/>represent<sp/>given<sp/>value<sp/>(max<sp/>8<sp/>bit)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getValueRequiredBits(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="3521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>==<sp/>0<sp/>||<sp/>value<sp/>==<sp/>255)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*The<sp/>scaling<sp/>of<sp/>2-bit<sp/>and<sp/>4-bit<sp/>values<sp/>uses<sp/>multiples<sp/>of<sp/>85<sp/>and<sp/>17*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>%<sp/>17<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>%<sp/>85<sp/>==<sp/>0<sp/>?<sp/>2<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="comment">/*profile<sp/>must<sp/>already<sp/>have<sp/>been<sp/>inited<sp/>with<sp/>mode.</highlight></codeline>
<codeline lineno="3529"><highlight class="comment">It&apos;s<sp/>ok<sp/>to<sp/>set<sp/>some<sp/>parameters<sp/>of<sp/>profile<sp/>to<sp/>done<sp/>already.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_get_color_profile(LodePNGColorProfile*<sp/>profile,</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode)</highlight></codeline>
<codeline lineno="3533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/>ColorTree<sp/>tree;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpixels<sp/>=<sp/>w<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>colored_done<sp/>=<sp/>lodepng_is_greyscale_type(mode)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>alpha_done<sp/>=<sp/>lodepng_can_have_alpha(mode)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numcolors_done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(mode);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits_done<sp/>=<sp/>bpp<sp/>==<sp/>1<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>maxnumcolors<sp/>=<sp/>257;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sixteen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&lt;=<sp/>8)<sp/>maxnumcolors<sp/>=<sp/>bpp<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>(bpp<sp/>==<sp/>2<sp/>?<sp/>4<sp/>:<sp/>(bpp<sp/>==<sp/>4<sp/>?<sp/>16<sp/>:<sp/>256));</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/>color_tree_init(&amp;tree);</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>if<sp/>the<sp/>16-bit<sp/>input<sp/>is<sp/>truly<sp/>16-bit*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode-&gt;bitdepth<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b,<sp/>a;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i)</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getPixelColorRGBA16(&amp;r,<sp/>&amp;g,<sp/>&amp;b,<sp/>&amp;a,<sp/>in,<sp/>i,<sp/>mode);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((r<sp/>&amp;<sp/>255)<sp/>!=<sp/>((r<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255)<sp/>||<sp/>(g<sp/>&amp;<sp/>255)<sp/>!=<sp/>((g<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255)<sp/>||</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b<sp/>&amp;<sp/>255)<sp/>!=<sp/>((b<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255)<sp/>||<sp/>(a<sp/>&amp;<sp/>255)<sp/>!=<sp/>((a<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>255))<sp/></highlight><highlight class="comment">/*first<sp/>and<sp/>second<sp/>byte<sp/>differ*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sixteen<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sixteen)</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0,<sp/>g<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0,<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;bits<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_done<sp/>=<sp/>numcolors_done<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*counting<sp/>colors<sp/>no<sp/>longer<sp/>useful,<sp/>palette<sp/>doesn&apos;t<sp/>support<sp/>16-bit*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i)</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getPixelColorRGBA16(&amp;r,<sp/>&amp;g,<sp/>&amp;b,<sp/>&amp;a,<sp/>in,<sp/>i,<sp/>mode);</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!colored_done<sp/>&amp;&amp;<sp/>(r<sp/>!=<sp/>g<sp/>||<sp/>r<sp/>!=<sp/>b))</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;colored<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colored_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!alpha_done)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>matchkey<sp/>=<sp/>(r<sp/>==<sp/>profile-&gt;key_r<sp/>&amp;&amp;<sp/>g<sp/>==<sp/>profile-&gt;key_g<sp/>&amp;&amp;<sp/>b<sp/>==<sp/>profile-&gt;key_b);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>!=<sp/>65535<sp/>&amp;&amp;<sp/>(a<sp/>!=<sp/>0<sp/>||<sp/>(profile-&gt;key<sp/>&amp;&amp;<sp/>!matchkey)))</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;alpha<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(profile-&gt;bits<sp/>&lt;<sp/>8)<sp/>profile-&gt;bits<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*PNG<sp/>has<sp/>no<sp/>alphachannel<sp/>modes<sp/>with<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!profile-&gt;alpha<sp/>&amp;&amp;<sp/>!profile-&gt;key)</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_g<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_b<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>65535<sp/>&amp;&amp;<sp/>profile-&gt;key<sp/>&amp;&amp;<sp/>matchkey)</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Color<sp/>key<sp/>cannot<sp/>be<sp/>used<sp/>if<sp/>an<sp/>opaque<sp/>pixel<sp/>also<sp/>has<sp/>that<sp/>RGB<sp/>color.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;alpha<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alpha_done<sp/>&amp;&amp;<sp/>numcolors_done<sp/>&amp;&amp;<sp/>colored_done<sp/>&amp;&amp;<sp/>bits_done)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>&lt;<sp/>16-bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>numpixels;<sp/>++i)</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0,<sp/>g<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0,<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getPixelColorRGBA8(&amp;r,<sp/>&amp;g,<sp/>&amp;b,<sp/>&amp;a,<sp/>in,<sp/>i,<sp/>mode);</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bits_done<sp/>&amp;&amp;<sp/>profile-&gt;bits<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*only<sp/>r<sp/>is<sp/>checked,<sp/>&lt;<sp/>8<sp/>bits<sp/>is<sp/>only<sp/>relevant<sp/>for<sp/>greyscale*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bits<sp/>=<sp/>getValueRequiredBits(r);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bits<sp/>&gt;<sp/>profile-&gt;bits)<sp/>profile-&gt;bits<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits_done<sp/>=<sp/>(profile-&gt;bits<sp/>&gt;=<sp/>bpp);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!colored_done<sp/>&amp;&amp;<sp/>(r<sp/>!=<sp/>g<sp/>||<sp/>r<sp/>!=<sp/>b))</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;colored<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colored_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(profile-&gt;bits<sp/>&lt;<sp/>8)<sp/>profile-&gt;bits<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*PNG<sp/>has<sp/>no<sp/>colored<sp/>modes<sp/>with<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!alpha_done)</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>matchkey<sp/>=<sp/>(r<sp/>==<sp/>profile-&gt;key_r<sp/>&amp;&amp;<sp/>g<sp/>==<sp/>profile-&gt;key_g<sp/>&amp;&amp;<sp/>b<sp/>==<sp/>profile-&gt;key_b);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>!=<sp/>255<sp/>&amp;&amp;<sp/>(a<sp/>!=<sp/>0<sp/>||<sp/>(profile-&gt;key<sp/>&amp;&amp;<sp/>!matchkey)))</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;alpha<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(profile-&gt;bits<sp/>&lt;<sp/>8)<sp/>profile-&gt;bits<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*PNG<sp/>has<sp/>no<sp/>alphachannel<sp/>modes<sp/>with<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!profile-&gt;alpha<sp/>&amp;&amp;<sp/>!profile-&gt;key)</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_g<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;key_b<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>==<sp/>255<sp/>&amp;&amp;<sp/>profile-&gt;key<sp/>&amp;&amp;<sp/>matchkey)</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Color<sp/>key<sp/>cannot<sp/>be<sp/>used<sp/>if<sp/>an<sp/>opaque<sp/>pixel<sp/>also<sp/>has<sp/>that<sp/>RGB<sp/>color.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;alpha<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(profile-&gt;bits<sp/>&lt;<sp/>8)<sp/>profile-&gt;bits<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*PNG<sp/>has<sp/>no<sp/>alphachannel<sp/>modes<sp/>with<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!numcolors_done)</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!color_tree_has(&amp;tree,<sp/>r,<sp/>g,<sp/>b,<sp/>a))</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_tree_add(&amp;tree,<sp/>r,<sp/>g,<sp/>b,<sp/>a,<sp/>profile-&gt;numcolors);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(profile-&gt;numcolors<sp/>&lt;<sp/>256)</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>profile-&gt;palette;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>profile-&gt;numcolors;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n<sp/>*<sp/>4<sp/>+<sp/>2]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n<sp/>*<sp/>4<sp/>+<sp/>3]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++profile-&gt;numcolors;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numcolors_done<sp/>=<sp/>profile-&gt;numcolors<sp/>&gt;=<sp/>maxnumcolors;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alpha_done<sp/>&amp;&amp;<sp/>numcolors_done<sp/>&amp;&amp;<sp/>colored_done<sp/>&amp;&amp;<sp/>bits_done)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*make<sp/>the<sp/>profile&apos;s<sp/>key<sp/>always<sp/>16-bit<sp/>for<sp/>consistency<sp/>-<sp/>repeat<sp/>each<sp/>byte<sp/>twice*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;key_r<sp/>+=<sp/>(profile-&gt;key_r<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;key_g<sp/>+=<sp/>(profile-&gt;key_g<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;key_b<sp/>+=<sp/>(profile-&gt;key_b<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/>color_tree_cleanup(&amp;tree);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="comment">/*Automatically<sp/>chooses<sp/>color<sp/>type<sp/>that<sp/>gives<sp/>smallest<sp/>amount<sp/>of<sp/>bits<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="3689"><highlight class="comment">output<sp/>image,<sp/>e.g.<sp/>grey<sp/>if<sp/>there<sp/>are<sp/>only<sp/>greyscale<sp/>pixels,<sp/>palette<sp/>if<sp/>there</highlight></codeline>
<codeline lineno="3690"><highlight class="comment">are<sp/>less<sp/>than<sp/>256<sp/>colors,<sp/>...</highlight></codeline>
<codeline lineno="3691"><highlight class="comment">Updates<sp/>values<sp/>of<sp/>mode<sp/>with<sp/>a<sp/>potentially<sp/>smaller<sp/>color<sp/>model.<sp/>mode_out<sp/>should</highlight></codeline>
<codeline lineno="3692"><highlight class="comment">contain<sp/>the<sp/>user<sp/>chosen<sp/>color<sp/>model,<sp/>but<sp/>will<sp/>be<sp/>overwritten<sp/>with<sp/>the<sp/>new<sp/>chosen<sp/>one.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_auto_choose_color(LodePNGColorMode*<sp/>mode_out,</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>mode_in)</highlight></codeline>
<codeline lineno="3696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/>LodePNGColorProfile<sp/>prof;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>n,<sp/>palettebits,<sp/>grey_ok,<sp/>palette_ok;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>lodepng_color_profile_init(&amp;prof);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_get_color_profile(&amp;prof,<sp/>image,<sp/>w,<sp/>h,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/>mode_out-&gt;key_defined<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prof.key<sp/>&amp;&amp;<sp/>w<sp/>*<sp/>h<sp/>&lt;=<sp/>16)</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>prof.alpha<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*too<sp/>few<sp/>pixels<sp/>to<sp/>justify<sp/>tRNS<sp/>chunk<sp/>overhead*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prof.bits<sp/>&lt;<sp/>8)<sp/>prof.bits<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">/*PNG<sp/>has<sp/>no<sp/>alphachannel<sp/>modes<sp/>with<sp/>less<sp/>than<sp/>8-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/>grey_ok<sp/>=<sp/>!prof.colored<sp/>&amp;&amp;<sp/>!prof.alpha;<sp/></highlight><highlight class="comment">/*grey<sp/>without<sp/>alpha,<sp/>with<sp/>potentially<sp/>low<sp/>bits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>prof.numcolors;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/>palettebits<sp/>=<sp/>n<sp/>&lt;=<sp/>2<sp/>?<sp/>1<sp/>:<sp/>(n<sp/>&lt;=<sp/>4<sp/>?<sp/>2<sp/>:<sp/>(n<sp/>&lt;=<sp/>16<sp/>?<sp/>4<sp/>:<sp/>8));</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/>palette_ok<sp/>=<sp/>n<sp/>&lt;=<sp/>256<sp/>&amp;&amp;<sp/>(n<sp/>*<sp/>2<sp/>&lt;<sp/>w<sp/>*<sp/>h)<sp/>&amp;&amp;<sp/>prof.bits<sp/>&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(w<sp/>*<sp/>h<sp/>&lt;<sp/>n<sp/>*<sp/>2)<sp/>palette_ok<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*don&apos;t<sp/>add<sp/>palette<sp/>overhead<sp/>if<sp/>image<sp/>has<sp/>only<sp/>a<sp/>few<sp/>pixels*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(grey_ok<sp/>&amp;&amp;<sp/>prof.bits<sp/>&lt;=<sp/>palettebits)<sp/>palette_ok<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*grey<sp/>is<sp/>less<sp/>overhead*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(palette_ok)</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>prof.palette;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_palette_clear(mode_out);<sp/></highlight><highlight class="comment">/*remove<sp/>potential<sp/>earlier<sp/>palette*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>prof.numcolors;<sp/>++i)</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>lodepng_palette_add(mode_out,<sp/>p[i<sp/>*<sp/>4<sp/>+<sp/>0],<sp/>p[i<sp/>*<sp/>4<sp/>+<sp/>1],<sp/>p[i<sp/>*<sp/>4<sp/>+<sp/>2],<sp/>p[i<sp/>*<sp/>4<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>mode_out-&gt;colortype<sp/>=<sp/>LCT_PALETTE;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/>mode_out-&gt;bitdepth<sp/>=<sp/>palettebits;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode_in-&gt;colortype<sp/>==<sp/>LCT_PALETTE<sp/>&amp;&amp;<sp/>mode_in-&gt;palettesize<sp/>&gt;=<sp/>mode_out-&gt;palettesize</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>mode_in-&gt;bitdepth<sp/>==<sp/>mode_out-&gt;bitdepth)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>input<sp/>should<sp/>have<sp/>same<sp/>palette<sp/>colors,<sp/>keep<sp/>original<sp/>to<sp/>preserve<sp/>its<sp/>order<sp/>and<sp/>prevent<sp/>conversion*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_color_mode_cleanup(mode_out);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_color_mode_copy(mode_out,<sp/>mode_in);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*8-bit<sp/>or<sp/>16-bit<sp/>per<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/>mode_out-&gt;bitdepth<sp/>=<sp/>prof.bits;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/>mode_out-&gt;colortype<sp/>=<sp/>prof.alpha<sp/>?<sp/>(prof.colored<sp/>?<sp/>LCT_RGBA<sp/>:<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(prof.colored<sp/>?<sp/>LCT_RGB<sp/>:<sp/>LCT_GREY);</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prof.key<sp/>&amp;&amp;<sp/>!prof.alpha)</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>mode_out-&gt;bitdepth)<sp/>-<sp/>1u;<sp/></highlight><highlight class="comment">/*profile<sp/>always<sp/>uses<sp/>16-bit,<sp/>mask<sp/>converts<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode_out-&gt;key_r<sp/>=<sp/>prof.key_r<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode_out-&gt;key_g<sp/>=<sp/>prof.key_g<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode_out-&gt;key_b<sp/>=<sp/>prof.key_b<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode_out-&gt;key_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifdef<sp/>LODEPNG_COMPILE_ENCODER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3761"><highlight class="comment">Paeth<sp/>predicter,<sp/>used<sp/>by<sp/>PNG<sp/>filter<sp/>type<sp/>4</highlight></codeline>
<codeline lineno="3762"><highlight class="comment">The<sp/>parameters<sp/>are<sp/>of<sp/>type<sp/>short,<sp/>but<sp/>should<sp/>come<sp/>from<sp/>unsigned<sp/>chars,<sp/>the<sp/>shorts</highlight></codeline>
<codeline lineno="3763"><highlight class="comment">are<sp/>only<sp/>needed<sp/>to<sp/>make<sp/>the<sp/>paeth<sp/>calculation<sp/>correct.</highlight></codeline>
<codeline lineno="3764"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>paethPredictor(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="3766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>pa<sp/>=<sp/>abs(b<sp/>-<sp/>c);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>pb<sp/>=<sp/>abs(a<sp/>-<sp/>c);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>pc<sp/>=<sp/>abs(a<sp/>+<sp/>b<sp/>-<sp/>c<sp/>-<sp/>c);</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pc<sp/>&lt;<sp/>pa<sp/>&amp;&amp;<sp/>pc<sp/>&lt;<sp/>pb)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)c;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pb<sp/>&lt;<sp/>pa)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)b;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)a;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="comment">/*shared<sp/>values<sp/>used<sp/>by<sp/>multiple<sp/>Adam7<sp/>related<sp/>functions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADAM7_IX[7]<sp/>=<sp/>{<sp/>0,<sp/>4,<sp/>0,<sp/>2,<sp/>0,<sp/>1,<sp/>0<sp/>};<sp/></highlight><highlight class="comment">/*x<sp/>start<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADAM7_IY[7]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>4,<sp/>0,<sp/>2,<sp/>0,<sp/>1<sp/>};<sp/></highlight><highlight class="comment">/*y<sp/>start<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADAM7_DX[7]<sp/>=<sp/>{<sp/>8,<sp/>8,<sp/>4,<sp/>4,<sp/>2,<sp/>2,<sp/>1<sp/>};<sp/></highlight><highlight class="comment">/*x<sp/>delta<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ADAM7_DY[7]<sp/>=<sp/>{<sp/>8,<sp/>8,<sp/>8,<sp/>4,<sp/>4,<sp/>2,<sp/>2<sp/>};<sp/></highlight><highlight class="comment">/*y<sp/>delta<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3784"><highlight class="comment">Outputs<sp/>various<sp/>dimensions<sp/>and<sp/>positions<sp/>in<sp/>the<sp/>image<sp/>related<sp/>to<sp/>the<sp/>Adam7<sp/>reduced<sp/>images.</highlight></codeline>
<codeline lineno="3785"><highlight class="comment">passw:<sp/>output<sp/>containing<sp/>the<sp/>width<sp/>of<sp/>the<sp/>7<sp/>passes</highlight></codeline>
<codeline lineno="3786"><highlight class="comment">passh:<sp/>output<sp/>containing<sp/>the<sp/>height<sp/>of<sp/>the<sp/>7<sp/>passes</highlight></codeline>
<codeline lineno="3787"><highlight class="comment">filter_passstart:<sp/>output<sp/>containing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>each</highlight></codeline>
<codeline lineno="3788"><highlight class="comment"><sp/>reduced<sp/>image<sp/>with<sp/>filter<sp/>bytes</highlight></codeline>
<codeline lineno="3789"><highlight class="comment">padded_passstart<sp/>output<sp/>containing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>each</highlight></codeline>
<codeline lineno="3790"><highlight class="comment"><sp/>reduced<sp/>image<sp/>when<sp/>without<sp/>filter<sp/>bytes<sp/>but<sp/>with<sp/>padded<sp/>scanlines</highlight></codeline>
<codeline lineno="3791"><highlight class="comment">passstart:<sp/>output<sp/>containing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>each<sp/>reduced</highlight></codeline>
<codeline lineno="3792"><highlight class="comment"><sp/>image<sp/>without<sp/>padding<sp/>between<sp/>scanlines,<sp/>but<sp/>still<sp/>padding<sp/>between<sp/>the<sp/>images</highlight></codeline>
<codeline lineno="3793"><highlight class="comment">w,<sp/>h:<sp/>width<sp/>and<sp/>height<sp/>of<sp/>non-interlaced<sp/>image</highlight></codeline>
<codeline lineno="3794"><highlight class="comment">bpp:<sp/>bits<sp/>per<sp/>pixel</highlight></codeline>
<codeline lineno="3795"><highlight class="comment">&quot;padded&quot;<sp/>is<sp/>only<sp/>relevant<sp/>if<sp/>bpp<sp/>is<sp/>less<sp/>than<sp/>8<sp/>and<sp/>a<sp/>scanline<sp/>or<sp/>image<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="3796"><highlight class="comment"><sp/>end<sp/>at<sp/>a<sp/>full<sp/>byte</highlight></codeline>
<codeline lineno="3797"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Adam7_getpassvalues(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passw[7],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passh[7],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>filter_passstart[8],</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>padded_passstart[8],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>passstart[8],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp)</highlight></codeline>
<codeline lineno="3800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>passstart<sp/>values<sp/>have<sp/>8<sp/>values:<sp/>the<sp/>8th<sp/>one<sp/>indicates<sp/>the<sp/>byte<sp/>after<sp/>the<sp/>end<sp/>of<sp/>the<sp/>7th<sp/>(=<sp/>last)<sp/>pass*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*calculate<sp/>width<sp/>and<sp/>height<sp/>in<sp/>pixels<sp/>of<sp/>each<sp/>pass*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/>passw[i]<sp/>=<sp/>(w<sp/>+<sp/>ADAM7_DX[i]<sp/>-<sp/>ADAM7_IX[i]<sp/>-<sp/>1)<sp/>/<sp/>ADAM7_DX[i];</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/>passh[i]<sp/>=<sp/>(h<sp/>+<sp/>ADAM7_DY[i]<sp/>-<sp/>ADAM7_IY[i]<sp/>-<sp/>1)<sp/>/<sp/>ADAM7_DY[i];</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(passw[i]<sp/>==<sp/>0)<sp/>passh[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(passh[i]<sp/>==<sp/>0)<sp/>passw[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/>filter_passstart[0]<sp/>=<sp/>padded_passstart[0]<sp/>=<sp/>passstart[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>passw[i]<sp/>is<sp/>0,<sp/>it&apos;s<sp/>0<sp/>bytes,<sp/>not<sp/>1<sp/>(no<sp/>filtertype-byte)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_passstart[i<sp/>+<sp/>1]<sp/>=<sp/>filter_passstart[i]</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((passw[i]<sp/>&amp;&amp;<sp/>passh[i])<sp/>?<sp/>passh[i]<sp/>*<sp/>(1<sp/>+<sp/>(passw[i]<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*bits<sp/>padded<sp/>if<sp/>needed<sp/>to<sp/>fill<sp/>full<sp/>byte<sp/>at<sp/>end<sp/>of<sp/>each<sp/>scanline*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>padded_passstart[i<sp/>+<sp/>1]<sp/>=<sp/>padded_passstart[i]<sp/>+<sp/>passh[i]<sp/>*<sp/>((passw[i]<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*only<sp/>padded<sp/>at<sp/>end<sp/>of<sp/>reduced<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/>passstart[i<sp/>+<sp/>1]<sp/>=<sp/>passstart[i]<sp/>+<sp/>(passh[i]<sp/>*<sp/>passw[i]<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>PNG<sp/>Decoder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="comment">/*read<sp/>the<sp/>information<sp/>from<sp/>the<sp/>header<sp/>and<sp/>store<sp/>it<sp/>in<sp/>the<sp/>LodePNGInfo.<sp/>return<sp/>value<sp/>is<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_inspect(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/>LodePNGState*<sp/>state,</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="3835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/>LodePNGInfo*<sp/>info<sp/>=<sp/>&amp;state-&gt;info_png;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(insize<sp/>==<sp/>0<sp/>||<sp/>in<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>48);<sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>given<sp/>data<sp/>is<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(insize<sp/>&lt;<sp/>33)</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>27);<sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>data<sp/>length<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>length<sp/>of<sp/>a<sp/>PNG<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*when<sp/>decoding<sp/>a<sp/>new<sp/>PNG<sp/>image,<sp/>make<sp/>sure<sp/>all<sp/>parameters<sp/>created<sp/>after<sp/>previous<sp/>decoding<sp/>are<sp/>reset*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>lodepng_info_cleanup(info);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/>lodepng_info_init(info);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in[0]<sp/>!=<sp/>137<sp/>||<sp/>in[1]<sp/>!=<sp/>80<sp/>||<sp/>in[2]<sp/>!=<sp/>78<sp/>||<sp/>in[3]<sp/>!=<sp/>71</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>||<sp/>in[4]<sp/>!=<sp/>13<sp/>||<sp/>in[5]<sp/>!=<sp/>10<sp/>||<sp/>in[6]<sp/>!=<sp/>26<sp/>||<sp/>in[7]<sp/>!=<sp/>10)</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>28);<sp/></highlight><highlight class="comment">/*error:<sp/>the<sp/>first<sp/>8<sp/>bytes<sp/>are<sp/>not<sp/>the<sp/>correct<sp/>PNG<sp/>signature*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_length(in<sp/>+<sp/>8)<sp/>!=<sp/>13)</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>94);<sp/></highlight><highlight class="comment">/*error:<sp/>header<sp/>size<sp/>must<sp/>be<sp/>13<sp/>bytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lodepng_chunk_type_equals(in<sp/>+<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;IHDR&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>29);<sp/></highlight><highlight class="comment">/*error:<sp/>it<sp/>doesn&apos;t<sp/>start<sp/>with<sp/>a<sp/>IHDR<sp/>chunk!*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>values<sp/>given<sp/>in<sp/>the<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>*w<sp/>=<sp/>lodepng_read32bitInt(&amp;in[16]);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>*h<sp/>=<sp/>lodepng_read32bitInt(&amp;in[20]);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>info-&gt;color.bitdepth<sp/>=<sp/>in[24];</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>info-&gt;color.colortype<sp/>=<sp/>(LodePNGColorType)in[25];</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>info-&gt;compression_method<sp/>=<sp/>in[26];</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>info-&gt;filter_method<sp/>=<sp/>in[27];</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>info-&gt;interlace_method<sp/>=<sp/>in[28];</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*w<sp/>==<sp/>0<sp/>||<sp/>*h<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>93);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;decoder.ignore_crc)</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CRC<sp/>=<sp/>lodepng_read32bitInt(&amp;in[29]);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>checksum<sp/>=<sp/>lodepng_crc32(&amp;in[12],<sp/>17);</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CRC<sp/>!=<sp/>checksum)</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>57);<sp/></highlight><highlight class="comment">/*invalid<sp/>CRC*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>only<sp/>compression<sp/>method<sp/>0<sp/>is<sp/>allowed<sp/>in<sp/>the<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;compression_method<sp/>!=<sp/>0)<sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>32);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>only<sp/>filter<sp/>method<sp/>0<sp/>is<sp/>allowed<sp/>in<sp/>the<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;filter_method<sp/>!=<sp/>0)<sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>33);</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>only<sp/>interlace<sp/>methods<sp/>0<sp/>and<sp/>1<sp/>exist<sp/>in<sp/>the<sp/>specification*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;interlace_method<sp/>&gt;<sp/>1)<sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>34);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>checkColorValidity(info-&gt;color.colortype,<sp/>info-&gt;color.bitdepth);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>unfilterScanline(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>recon,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>scanline,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>precon,</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filterType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="3901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3903"><highlight class="comment"><sp/><sp/>For<sp/>PNG<sp/>filter<sp/>method<sp/>0</highlight></codeline>
<codeline lineno="3904"><highlight class="comment"><sp/><sp/>unfilter<sp/>a<sp/>PNG<sp/>image<sp/>scanline<sp/>by<sp/>scanline.<sp/>when<sp/>the<sp/>pixels<sp/>are<sp/>smaller<sp/>than<sp/>1<sp/>byte,</highlight></codeline>
<codeline lineno="3905"><highlight class="comment"><sp/><sp/>the<sp/>filter<sp/>works<sp/>byte<sp/>per<sp/>byte<sp/>(bytewidth<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="3906"><highlight class="comment"><sp/><sp/>precon<sp/>is<sp/>the<sp/>previous<sp/>unfiltered<sp/>scanline,<sp/>recon<sp/>the<sp/>result,<sp/>scanline<sp/>the<sp/>current<sp/>one</highlight></codeline>
<codeline lineno="3907"><highlight class="comment"><sp/><sp/>the<sp/>incoming<sp/>scanlines<sp/>do<sp/>NOT<sp/>include<sp/>the<sp/>filtertype<sp/>byte,<sp/>that<sp/>one<sp/>is<sp/>given<sp/>in<sp/>the<sp/>parameter<sp/>filterType<sp/>instead</highlight></codeline>
<codeline lineno="3908"><highlight class="comment"><sp/><sp/>recon<sp/>and<sp/>scanline<sp/>MAY<sp/>be<sp/>the<sp/>same<sp/>memory<sp/>address!<sp/>precon<sp/>must<sp/>be<sp/>disjoint.</highlight></codeline>
<codeline lineno="3909"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(filterType)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i]<sp/>+<sp/>recon[i<sp/>-<sp/>bytewidth];</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(precon)</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i]<sp/>+<sp/>precon[i];</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(precon)</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i]<sp/>+<sp/>(precon[i]<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i]<sp/>+<sp/>((recon[i<sp/>-<sp/>bytewidth]<sp/>+<sp/>precon[i])<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>recon[i]<sp/>=<sp/>scanline[i]<sp/>+<sp/>(recon[i<sp/>-<sp/>bytewidth]<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(precon)</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recon[i]<sp/>=<sp/>(scanline[i]<sp/>+<sp/>precon[i]);<sp/></highlight><highlight class="comment">/*paethPredictor(0,<sp/>precon[i],<sp/>0)<sp/>is<sp/>always<sp/>precon[i]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recon[i]<sp/>=<sp/>(scanline[i]<sp/>+<sp/>paethPredictor(recon[i<sp/>-<sp/>bytewidth],<sp/>precon[i],<sp/>precon[i<sp/>-<sp/>bytewidth]));</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recon[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*paethPredictor(recon[i<sp/>-<sp/>bytewidth],<sp/>0,<sp/>0)<sp/>is<sp/>always<sp/>recon[i<sp/>-<sp/>bytewidth]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recon[i]<sp/>=<sp/>(scanline[i]<sp/>+<sp/>recon[i<sp/>-<sp/>bytewidth]);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>36;<sp/></highlight><highlight class="comment">/*error:<sp/>unexisting<sp/>filter<sp/>type<sp/>given*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>unfilter(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp)</highlight></codeline>
<codeline lineno="3974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3976"><highlight class="comment"><sp/><sp/>For<sp/>PNG<sp/>filter<sp/>method<sp/>0</highlight></codeline>
<codeline lineno="3977"><highlight class="comment"><sp/><sp/>this<sp/>function<sp/>unfilters<sp/>a<sp/>single<sp/>image<sp/>(e.g.<sp/>without<sp/>interlacing<sp/>this<sp/>is<sp/>called<sp/>once,<sp/>with<sp/>Adam7<sp/>seven<sp/>times)</highlight></codeline>
<codeline lineno="3978"><highlight class="comment"><sp/><sp/>out<sp/>must<sp/>have<sp/>enough<sp/>bytes<sp/>allocated<sp/>already,<sp/>in<sp/>must<sp/>have<sp/>the<sp/>scanlines<sp/>+<sp/>1<sp/>filtertype<sp/>byte<sp/>per<sp/>scanline</highlight></codeline>
<codeline lineno="3979"><highlight class="comment"><sp/><sp/>w<sp/>and<sp/>h<sp/>are<sp/>image<sp/>dimensions<sp/>or<sp/>dimensions<sp/>of<sp/>reduced<sp/>image,<sp/>bpp<sp/>is<sp/>bits<sp/>per<sp/>pixel</highlight></codeline>
<codeline lineno="3980"><highlight class="comment"><sp/><sp/>in<sp/>and<sp/>out<sp/>are<sp/>allowed<sp/>to<sp/>be<sp/>the<sp/>same<sp/>memory<sp/>address<sp/>(but<sp/>aren&apos;t<sp/>the<sp/>same<sp/>size<sp/>since<sp/>in<sp/>has<sp/>the<sp/>extra<sp/>filter<sp/>bytes)</highlight></codeline>
<codeline lineno="3981"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prevline<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*bytewidth<sp/>is<sp/>used<sp/>for<sp/>filtering,<sp/>is<sp/>1<sp/>when<sp/>bpp<sp/>&lt;<sp/>8,<sp/>number<sp/>of<sp/>bytes<sp/>per<sp/>pixel<sp/>otherwise*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth<sp/>=<sp/>(bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>linebytes<sp/>=<sp/>(w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>outindex<sp/>=<sp/>linebytes<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inindex<sp/>=<sp/>(1<sp/>+<sp/>linebytes)<sp/>*<sp/>y;<sp/></highlight><highlight class="comment">/*the<sp/>extra<sp/>filterbyte<sp/>added<sp/>to<sp/>each<sp/>row*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filterType<sp/>=<sp/>in[inindex];</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(unfilterScanline(&amp;out[outindex],<sp/>&amp;in[inindex<sp/>+<sp/>1],<sp/>prevline,<sp/>bytewidth,<sp/>filterType,<sp/>linebytes));</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;out[outindex];</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4005"><highlight class="comment">in:<sp/>Adam7<sp/>interlaced<sp/>image,<sp/>with<sp/>no<sp/>padding<sp/>bits<sp/>between<sp/>scanlines,<sp/>but<sp/>between</highlight></codeline>
<codeline lineno="4006"><highlight class="comment"><sp/>reduced<sp/>images<sp/>so<sp/>that<sp/>each<sp/>reduced<sp/>image<sp/>starts<sp/>at<sp/>a<sp/>byte.</highlight></codeline>
<codeline lineno="4007"><highlight class="comment">out:<sp/>the<sp/>same<sp/>pixels,<sp/>but<sp/>re-ordered<sp/>so<sp/>that<sp/>they&apos;re<sp/>now<sp/>a<sp/>non-interlaced<sp/>image<sp/>with<sp/>size<sp/>w*h</highlight></codeline>
<codeline lineno="4008"><highlight class="comment">bpp:<sp/>bits<sp/>per<sp/>pixel</highlight></codeline>
<codeline lineno="4009"><highlight class="comment">out<sp/>has<sp/>the<sp/>following<sp/>size<sp/>in<sp/>bits:<sp/>w<sp/>*<sp/>h<sp/>*<sp/>bpp.</highlight></codeline>
<codeline lineno="4010"><highlight class="comment">in<sp/>is<sp/>possibly<sp/>bigger<sp/>due<sp/>to<sp/>padding<sp/>bits<sp/>between<sp/>reduced<sp/>images.</highlight></codeline>
<codeline lineno="4011"><highlight class="comment">out<sp/>must<sp/>be<sp/>big<sp/>enough<sp/>AND<sp/>must<sp/>be<sp/>0<sp/>everywhere<sp/>if<sp/>bpp<sp/>&lt;<sp/>8<sp/>in<sp/>the<sp/>current<sp/>implementation</highlight></codeline>
<codeline lineno="4012"><highlight class="comment">(because<sp/>that&apos;s<sp/>likely<sp/>a<sp/>little<sp/>bit<sp/>faster)</highlight></codeline>
<codeline lineno="4013"><highlight class="comment">NOTE:<sp/>comments<sp/>about<sp/>padding<sp/>bits<sp/>are<sp/>only<sp/>relevant<sp/>if<sp/>bpp<sp/>&lt;<sp/>8</highlight></codeline>
<codeline lineno="4014"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Adam7_deinterlace(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passw[7],<sp/>passh[7];</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>filter_passstart[8],<sp/>padded_passstart[8],<sp/>passstart[8];</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>Adam7_getpassvalues(passw,<sp/>passh,<sp/>filter_passstart,<sp/>padded_passstart,<sp/>passstart,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>b;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth<sp/>=<sp/>bpp<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>passh[i];<sp/>++y)</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>passw[i];<sp/>++x)</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pixelinstart<sp/>=<sp/>passstart[i]<sp/>+<sp/>(y<sp/>*<sp/>passw[i]<sp/>+<sp/>x)<sp/>*<sp/>bytewidth;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pixeloutstart<sp/>=<sp/>((ADAM7_IY[i]<sp/>+<sp/>y<sp/>*<sp/>ADAM7_DY[i])<sp/>*<sp/>w<sp/>+<sp/>ADAM7_IX[i]<sp/>+<sp/>x<sp/>*<sp/>ADAM7_DX[i])<sp/>*<sp/>bytewidth;</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>bytewidth;<sp/>++b)</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[pixeloutstart<sp/>+<sp/>b]<sp/>=<sp/>in[pixelinstart<sp/>+<sp/>b];</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*bpp<sp/>&lt;<sp/>8:<sp/>Adam7<sp/>with<sp/>pixels<sp/>&lt;<sp/>8<sp/>bit<sp/>is<sp/>a<sp/>bit<sp/>trickier:<sp/>with<sp/>bit<sp/>pointers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>b;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ilinebits<sp/>=<sp/>bpp<sp/>*<sp/>passw[i];</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>olinebits<sp/>=<sp/>bpp<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>obp,<sp/>ibp;<sp/></highlight><highlight class="comment">/*bit<sp/>pointers<sp/>(for<sp/>out<sp/>and<sp/>in<sp/>buffer)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>passh[i];<sp/>++y)</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>passw[i];<sp/>++x)</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibp<sp/>=<sp/>(8<sp/>*<sp/>passstart[i])<sp/>+<sp/>(y<sp/>*<sp/>ilinebits<sp/>+<sp/>x<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obp<sp/>=<sp/>(ADAM7_IY[i]<sp/>+<sp/>y<sp/>*<sp/>ADAM7_DY[i])<sp/>*<sp/>olinebits<sp/>+<sp/>(ADAM7_IX[i]<sp/>+<sp/>x<sp/>*<sp/>ADAM7_DX[i])<sp/>*<sp/>bpp;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>bpp;<sp/>++b)</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>readBitFromReversedStream(&amp;ibp,<sp/>in);</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*note<sp/>that<sp/>this<sp/>function<sp/>assumes<sp/>the<sp/>out<sp/>buffer<sp/>is<sp/>completely<sp/>0,<sp/>use<sp/>setBitOfReversedStream<sp/>otherwise*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setBitOfReversedStream0(&amp;obp,<sp/>out,<sp/>bit);</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>removePaddingBits(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>olinebits,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilinebits,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="4067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4069"><highlight class="comment"><sp/><sp/>After<sp/>filtering<sp/>there<sp/>are<sp/>still<sp/>padding<sp/>bits<sp/>if<sp/>scanlines<sp/>have<sp/>non<sp/>multiple<sp/>of<sp/>8<sp/>bit<sp/>amounts.<sp/>They<sp/>need</highlight></codeline>
<codeline lineno="4070"><highlight class="comment"><sp/><sp/>to<sp/>be<sp/>removed<sp/>(except<sp/>at<sp/>last<sp/>scanline<sp/>of<sp/>(Adam7-reduced)<sp/>image)<sp/>before<sp/>working<sp/>with<sp/>pure<sp/>image<sp/>buffers</highlight></codeline>
<codeline lineno="4071"><highlight class="comment"><sp/><sp/>for<sp/>the<sp/>Adam7<sp/>code,<sp/>the<sp/>color<sp/>convert<sp/>code<sp/>and<sp/>the<sp/>output<sp/>to<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="4072"><highlight class="comment"><sp/><sp/>in<sp/>and<sp/>out<sp/>are<sp/>allowed<sp/>to<sp/>be<sp/>the<sp/>same<sp/>buffer,<sp/>in<sp/>may<sp/>also<sp/>be<sp/>higher<sp/>but<sp/>still<sp/>overlapping;<sp/>in<sp/>must</highlight></codeline>
<codeline lineno="4073"><highlight class="comment"><sp/><sp/>have<sp/>&gt;=<sp/>ilinebits*h<sp/>bits,<sp/>out<sp/>must<sp/>have<sp/>&gt;=<sp/>olinebits*h<sp/>bits,<sp/>olinebits<sp/>must<sp/>be<sp/>&lt;=<sp/>ilinebits</highlight></codeline>
<codeline lineno="4074"><highlight class="comment"><sp/><sp/>also<sp/>used<sp/>to<sp/>move<sp/>bits<sp/>after<sp/>earlier<sp/>such<sp/>operations<sp/>happened,<sp/>e.g.<sp/>in<sp/>a<sp/>sequence<sp/>of<sp/>reduced<sp/>images<sp/>from<sp/>Adam7</highlight></codeline>
<codeline lineno="4075"><highlight class="comment"><sp/><sp/>only<sp/>useful<sp/>if<sp/>(ilinebits<sp/>-<sp/>olinebits)<sp/>is<sp/>a<sp/>value<sp/>in<sp/>the<sp/>range<sp/>1..7</highlight></codeline>
<codeline lineno="4076"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>ilinebits<sp/>-<sp/>olinebits;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ibp<sp/>=<sp/>0,<sp/>obp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*input<sp/>and<sp/>output<sp/>bit<sp/>pointers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>olinebits;<sp/>++x)</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>readBitFromReversedStream(&amp;ibp,<sp/>in);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBitOfReversedStream(&amp;obp,<sp/>out,<sp/>bit);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>ibp<sp/>+=<sp/>diff;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="comment">/*out<sp/>must<sp/>be<sp/>buffer<sp/>big<sp/>enough<sp/>to<sp/>contain<sp/>full<sp/>image,<sp/>and<sp/>in<sp/>must<sp/>contain<sp/>the<sp/>full<sp/>decompressed<sp/>data<sp/>from</highlight></codeline>
<codeline lineno="4093"><highlight class="comment">the<sp/>IDAT<sp/>chunks<sp/>(with<sp/>filter<sp/>index<sp/>bytes<sp/>and<sp/>possible<sp/>padding<sp/>bits)</highlight></codeline>
<codeline lineno="4094"><highlight class="comment">return<sp/>value<sp/>is<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>postProcessScanlines(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>info_png)</highlight></codeline>
<codeline lineno="4097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4099"><highlight class="comment"><sp/><sp/>This<sp/>function<sp/>converts<sp/>the<sp/>filtered-padded-interlaced<sp/>data<sp/>into<sp/>pure<sp/>2D<sp/>image<sp/>buffer<sp/>with<sp/>the<sp/>PNG&apos;s<sp/>colortype.</highlight></codeline>
<codeline lineno="4100"><highlight class="comment"><sp/><sp/>Steps:</highlight></codeline>
<codeline lineno="4101"><highlight class="comment"><sp/><sp/>*)<sp/>if<sp/>no<sp/>Adam7:<sp/>1)<sp/>unfilter<sp/>2)<sp/>remove<sp/>padding<sp/>bits<sp/>(=<sp/>posible<sp/>extra<sp/>bits<sp/>per<sp/>scanline<sp/>if<sp/>bpp<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="4102"><highlight class="comment"><sp/><sp/>*)<sp/>if<sp/>adam7:<sp/>1)<sp/>7x<sp/>unfilter<sp/>2)<sp/>7x<sp/>remove<sp/>padding<sp/>bits<sp/>3)<sp/>Adam7_deinterlace</highlight></codeline>
<codeline lineno="4103"><highlight class="comment"><sp/><sp/>NOTE:<sp/>the<sp/>in<sp/>buffer<sp/>will<sp/>be<sp/>overwritten<sp/>with<sp/>intermediate<sp/>data!</highlight></codeline>
<codeline lineno="4104"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(&amp;info_png-&gt;color);</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>31;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>colortype*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info_png-&gt;interlace_method<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/>w<sp/>*<sp/>bpp<sp/>!=<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8)</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(unfilter(in,<sp/>in,<sp/>w,<sp/>h,<sp/>bpp));</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removePaddingBits(out,<sp/>in,<sp/>w<sp/>*<sp/>bpp,<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8,<sp/>h);</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*we<sp/>can<sp/>immediately<sp/>filter<sp/>into<sp/>the<sp/>out<sp/>buffer,<sp/>no<sp/>other<sp/>steps<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>CERROR_TRY_RETURN(unfilter(out,<sp/>in,<sp/>w,<sp/>h,<sp/>bpp));</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*interlace_method<sp/>is<sp/>1<sp/>(Adam7)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passw[7],<sp/>passh[7];<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>filter_passstart[8],<sp/>padded_passstart[8],<sp/>passstart[8];</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/>Adam7_getpassvalues(passw,<sp/>passh,<sp/>filter_passstart,<sp/>padded_passstart,<sp/>passstart,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(unfilter(&amp;in[padded_passstart[i]],<sp/>&amp;in[filter_passstart[i]],<sp/>passw[i],<sp/>passh[i],<sp/>bpp));</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO:<sp/>possible<sp/>efficiency<sp/>improvement:<sp/>if<sp/>in<sp/>this<sp/>reduced<sp/>image<sp/>the<sp/>bits<sp/>fit<sp/>nicely<sp/>in<sp/>1<sp/>scanline,</highlight></codeline>
<codeline lineno="4129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>move<sp/>bytes<sp/>instead<sp/>of<sp/>bits<sp/>or<sp/>move<sp/>not<sp/>at<sp/>all*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*remove<sp/>padding<sp/>bits<sp/>in<sp/>scanlines;<sp/>after<sp/>this<sp/>there<sp/>still<sp/>may<sp/>be<sp/>padding</highlight></codeline>
<codeline lineno="4133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>between<sp/>the<sp/>different<sp/>reduced<sp/>images:<sp/>each<sp/>reduced<sp/>image<sp/>still<sp/>starts<sp/>nicely<sp/>at<sp/>a<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removePaddingBits(&amp;in[passstart[i]],<sp/>&amp;in[padded_passstart[i]],<sp/>passw[i]<sp/>*<sp/>bpp,</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((passw[i]<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8,<sp/>passh[i]);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/>Adam7_deinterlace(out,<sp/>in,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_PLTE(LodePNGColorMode*<sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0,<sp/>i;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color-&gt;palette)<sp/>lodepng_free(color-&gt;palette);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/>color-&gt;palettesize<sp/>=<sp/>chunkLength<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>color-&gt;palette<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(4<sp/>*<sp/>color-&gt;palettesize);</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!color-&gt;palette<sp/>&amp;&amp;<sp/>color-&gt;palettesize)</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;palettesize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color-&gt;palettesize<sp/>&gt;<sp/>256)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>38;<sp/></highlight><highlight class="comment">/*error:<sp/>palette<sp/>too<sp/>big*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>color-&gt;palettesize;<sp/>++i)</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>0]<sp/>=<sp/>data[pos++];<sp/></highlight><highlight class="comment">/*R*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/>data[pos++];<sp/></highlight><highlight class="comment">/*G*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>2]<sp/>=<sp/>data[pos++];<sp/></highlight><highlight class="comment">/*B*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>=<sp/>255;<sp/></highlight><highlight class="comment">/*alpha*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_tRNS(LodePNGColorMode*<sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>more<sp/>alpha<sp/>values<sp/>given<sp/>than<sp/>there<sp/>are<sp/>palette<sp/>entries*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>&gt;<sp/>color-&gt;palettesize)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>38;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>chunkLength;<sp/>++i)<sp/>color-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>=<sp/>data[i];</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>this<sp/>chunk<sp/>must<sp/>be<sp/>2<sp/>bytes<sp/>for<sp/>greyscale<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>30;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_r<sp/>=<sp/>color-&gt;key_g<sp/>=<sp/>color-&gt;key_b<sp/>=<sp/>256u<sp/>*<sp/>data[0]<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>this<sp/>chunk<sp/>must<sp/>be<sp/>6<sp/>bytes<sp/>for<sp/>RGB<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>6)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>41;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_r<sp/>=<sp/>256u<sp/>*<sp/>data[0]<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_g<sp/>=<sp/>256u<sp/>*<sp/>data[2]<sp/>+<sp/>data[3];</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/>color-&gt;key_b<sp/>=<sp/>256u<sp/>*<sp/>data[4]<sp/>+<sp/>data[5];</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>42;<sp/></highlight><highlight class="comment">/*error:<sp/>tRNS<sp/>chunk<sp/>not<sp/>allowed<sp/>for<sp/>other<sp/>color<sp/>models*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight><highlight class="comment">/*background<sp/>color<sp/>chunk<sp/>(bKGD)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_bKGD(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>this<sp/>chunk<sp/>must<sp/>be<sp/>1<sp/>byte<sp/>for<sp/>indexed<sp/>color<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>43;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_r<sp/>=<sp/>info-&gt;background_g<sp/>=<sp/>info-&gt;background_b<sp/>=<sp/>data[0];</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_GREY<sp/>||<sp/>info-&gt;color.colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>this<sp/>chunk<sp/>must<sp/>be<sp/>2<sp/>bytes<sp/>for<sp/>greyscale<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>44;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_r<sp/>=<sp/>info-&gt;background_g<sp/>=<sp/>info-&gt;background_b<sp/>=<sp/>256u<sp/>*<sp/>data[0]<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_RGB<sp/>||<sp/>info-&gt;color.colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>this<sp/>chunk<sp/>must<sp/>be<sp/>6<sp/>bytes<sp/>for<sp/>greyscale<sp/>image*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>6)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>45;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_r<sp/>=<sp/>256u<sp/>*<sp/>data[0]<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_g<sp/>=<sp/>256u<sp/>*<sp/>data[2]<sp/>+<sp/>data[3];</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;background_b<sp/>=<sp/>256u<sp/>*<sp/>data[4]<sp/>+<sp/>data[5];</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="comment">/*text<sp/>chunk<sp/>(tEXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_tEXt(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>0,<sp/>*str<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)<sp/></highlight><highlight class="comment">/*not<sp/>really<sp/>a<sp/>while<sp/>loop,<sp/>only<sp/>used<sp/>to<sp/>break<sp/>on<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length,<sp/>string2_begin;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(length<sp/>&lt;<sp/>chunkLength<sp/>&amp;&amp;<sp/>data[length]<sp/>!=<sp/>0)<sp/>++length;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*even<sp/>though<sp/>it&apos;s<sp/>not<sp/>allowed<sp/>by<sp/>the<sp/>standard,<sp/>no<sp/>error<sp/>is<sp/>thrown<sp/>if</highlight></codeline>
<codeline lineno="4251"><highlight class="comment"><sp/><sp/><sp/><sp/>there&apos;s<sp/>no<sp/>null<sp/>termination<sp/>char,<sp/>if<sp/>the<sp/>text<sp/>is<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&lt;<sp/>1<sp/>||<sp/>length<sp/>&gt;<sp/>79)<sp/>CERROR_BREAK(error,<sp/>89);<sp/></highlight><highlight class="comment">/*keyword<sp/>too<sp/>short<sp/>or<sp/>long*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/>key[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>key[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[i];</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/>string2_begin<sp/>=<sp/>length<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">/*skip<sp/>keyword<sp/>null<sp/>terminator*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>chunkLength<sp/>&lt;<sp/>string2_begin<sp/>?<sp/>0<sp/>:<sp/>chunkLength<sp/>-<sp/>string2_begin;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!str)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/>str[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>str[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[string2_begin<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>lodepng_add_text(info,<sp/>key,<sp/>str);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>lodepng_free(key);</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>lodepng_free(str);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight><highlight class="comment">/*compressed<sp/>text<sp/>chunk<sp/>(zTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_zTXt(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>zlibsettings,</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length,<sp/>string2_begin;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>decoded;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;decoded);</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)<sp/></highlight><highlight class="comment">/*not<sp/>really<sp/>a<sp/>while<sp/>loop,<sp/>only<sp/>used<sp/>to<sp/>break<sp/>on<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length<sp/>=<sp/>0;<sp/>length<sp/>&lt;<sp/>chunkLength<sp/>&amp;&amp;<sp/>data[length]<sp/>!=<sp/>0;<sp/>++length)<sp/>;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>+<sp/>2<sp/>&gt;=<sp/>chunkLength)<sp/>CERROR_BREAK(error,<sp/>75);<sp/></highlight><highlight class="comment">/*no<sp/>null<sp/>termination,<sp/>corrupt?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&lt;<sp/>1<sp/>||<sp/>length<sp/>&gt;<sp/>79)<sp/>CERROR_BREAK(error,<sp/>89);<sp/></highlight><highlight class="comment">/*keyword<sp/>too<sp/>short<sp/>or<sp/>long*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/>key[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>key[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[i];</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[length<sp/>+<sp/>1]<sp/>!=<sp/>0)<sp/>CERROR_BREAK(error,<sp/>72);<sp/></highlight><highlight class="comment">/*the<sp/>0<sp/>byte<sp/>indicating<sp/>compression<sp/>must<sp/>be<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/>string2_begin<sp/>=<sp/>length<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(string2_begin<sp/>&gt;<sp/>chunkLength)<sp/>CERROR_BREAK(error,<sp/>75);<sp/></highlight><highlight class="comment">/*no<sp/>null<sp/>termination,<sp/>corrupt?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>chunkLength<sp/>-<sp/>string2_begin;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*will<sp/>fail<sp/>if<sp/>zlib<sp/>error,<sp/>e.g.<sp/>if<sp/>length<sp/>is<sp/>too<sp/>small*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>zlib_decompress(&amp;decoded.data,<sp/>&amp;decoded.size,</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;data[string2_begin]),</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,<sp/>zlibsettings);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;decoded,<sp/>0);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>lodepng_add_text(info,<sp/>key,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)decoded.data);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>lodepng_free(key);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;decoded);</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight><highlight class="comment">/*international<sp/>text<sp/>chunk<sp/>(iTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_iTXt(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings*<sp/>zlibsettings,</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>length,<sp/>begin,<sp/>compressed;</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>=<sp/>0,<sp/>*langtag<sp/>=<sp/>0,<sp/>*transkey<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>decoded;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;decoded);</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!error)<sp/></highlight><highlight class="comment">/*not<sp/>really<sp/>a<sp/>while<sp/>loop,<sp/>only<sp/>used<sp/>to<sp/>break<sp/>on<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Quick<sp/>check<sp/>if<sp/>the<sp/>chunk<sp/>length<sp/>isn&apos;t<sp/>too<sp/>small.<sp/>Even<sp/>without<sp/>check</highlight></codeline>
<codeline lineno="4344"><highlight class="comment"><sp/><sp/><sp/><sp/>it&apos;d<sp/>still<sp/>fail<sp/>with<sp/>other<sp/>error<sp/>checks<sp/>below<sp/>if<sp/>it&apos;s<sp/>too<sp/>short.<sp/>This<sp/>just<sp/>gives<sp/>a<sp/>different<sp/>error<sp/>code.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>&lt;<sp/>5)<sp/>CERROR_BREAK(error,<sp/>30);<sp/></highlight><highlight class="comment">/*iTXt<sp/>chunk<sp/>too<sp/>short*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>key*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length<sp/>=<sp/>0;<sp/>length<sp/>&lt;<sp/>chunkLength<sp/>&amp;&amp;<sp/>data[length]<sp/>!=<sp/>0;<sp/>++length)<sp/>;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>+<sp/>3<sp/>&gt;=<sp/>chunkLength)<sp/>CERROR_BREAK(error,<sp/>75);<sp/></highlight><highlight class="comment">/*no<sp/>null<sp/>termination<sp/>char,<sp/>corrupt?*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length<sp/>&lt;<sp/>1<sp/>||<sp/>length<sp/>&gt;<sp/>79)<sp/>CERROR_BREAK(error,<sp/>89);<sp/></highlight><highlight class="comment">/*keyword<sp/>too<sp/>short<sp/>or<sp/>long*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/>key[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>key[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[i];</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>compression<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>compressed<sp/>=<sp/>data[length<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data[length<sp/>+<sp/>2]<sp/>!=<sp/>0)<sp/>CERROR_BREAK(error,<sp/>72);<sp/></highlight><highlight class="comment">/*the<sp/>0<sp/>byte<sp/>indicating<sp/>compression<sp/>must<sp/>be<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*even<sp/>though<sp/>it&apos;s<sp/>not<sp/>allowed<sp/>by<sp/>the<sp/>standard,<sp/>no<sp/>error<sp/>is<sp/>thrown<sp/>if</highlight></codeline>
<codeline lineno="4363"><highlight class="comment"><sp/><sp/><sp/><sp/>there&apos;s<sp/>no<sp/>null<sp/>termination<sp/>char,<sp/>if<sp/>the<sp/>text<sp/>is<sp/>empty<sp/>for<sp/>the<sp/>next<sp/>3<sp/>texts*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>langtag*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>length<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>chunkLength<sp/>&amp;&amp;<sp/>data[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>++length;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/>langtag<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!langtag)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/>langtag[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>langtag[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[begin<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>transkey*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>+=<sp/>length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>chunkLength<sp/>&amp;&amp;<sp/>data[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>++length;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>transkey<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!transkey)<sp/>CERROR_BREAK(error,<sp/>83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>transkey[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>transkey[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)data[begin<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*read<sp/>the<sp/>actual<sp/>text*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>+=<sp/>length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>chunkLength<sp/>&lt;<sp/>begin<sp/>?<sp/>0<sp/>:<sp/>chunkLength<sp/>-<sp/>begin;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(compressed)</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*will<sp/>fail<sp/>if<sp/>zlib<sp/>error,<sp/>e.g.<sp/>if<sp/>length<sp/>is<sp/>too<sp/>small*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>zlib_decompress(&amp;decoded.data,<sp/>&amp;decoded.size,</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;data[begin]),</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,<sp/>zlibsettings);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decoded.allocsize<sp/>&lt;<sp/>decoded.size)<sp/>decoded.allocsize<sp/>=<sp/>decoded.size;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;decoded,<sp/>0);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(&amp;decoded,<sp/>length<sp/>+<sp/>1))<sp/>CERROR_BREAK(error,<sp/>83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded.data[length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>decoded.data[i]<sp/>=<sp/>data[begin<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>lodepng_add_itext(info,<sp/>key,<sp/>langtag,<sp/>transkey,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)decoded.data);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/>lodepng_free(key);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>lodepng_free(langtag);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>lodepng_free(transkey);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;decoded);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_tIME(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>73;<sp/></highlight><highlight class="comment">/*invalid<sp/>tIME<sp/>chunk<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>info-&gt;time_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>info-&gt;time.year<sp/>=<sp/>256u<sp/>*<sp/>data[0]<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/>info-&gt;time.month<sp/>=<sp/>data[2];</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>info-&gt;time.day<sp/>=<sp/>data[3];</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>info-&gt;time.hour<sp/>=<sp/>data[4];</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>info-&gt;time.minute<sp/>=<sp/>data[5];</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>info-&gt;time.second<sp/>=<sp/>data[6];</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>readChunk_pHYs(LodePNGInfo*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkLength)</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>!=<sp/>9)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>74;<sp/></highlight><highlight class="comment">/*invalid<sp/>pHYs<sp/>chunk<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>info-&gt;phys_defined<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>info-&gt;phys_x<sp/>=<sp/>16777216u<sp/>*<sp/>data[0]<sp/>+<sp/>65536u<sp/>*<sp/>data[1]<sp/>+<sp/>256u<sp/>*<sp/>data[2]<sp/>+<sp/>data[3];</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/>info-&gt;phys_y<sp/>=<sp/>16777216u<sp/>*<sp/>data[4]<sp/>+<sp/>65536u<sp/>*<sp/>data[5]<sp/>+<sp/>256u<sp/>*<sp/>data[6]<sp/>+<sp/>data[7];</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>info-&gt;phys_unit<sp/>=<sp/>data[8];</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="comment">/*read<sp/>a<sp/>PNG,<sp/>the<sp/>result<sp/>will<sp/>be<sp/>in<sp/>the<sp/>same<sp/>color<sp/>type<sp/>as<sp/>the<sp/>PNG<sp/>(hence<sp/>&quot;generic&quot;)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>decodeGeneric(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGState*<sp/>state,</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="4455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>IEND<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunk;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>idat;<sp/></highlight><highlight class="comment">/*the<sp/>data<sp/>from<sp/>idat<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>scanlines;</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>predict;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpixels;</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*for<sp/>unknown<sp/>chunk<sp/>order*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>unknown<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>critical_pos<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*1<sp/>=<sp/>after<sp/>IHDR,<sp/>2<sp/>=<sp/>after<sp/>PLTE,<sp/>3<sp/>=<sp/>after<sp/>IDAT*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*provide<sp/>some<sp/>proper<sp/>output<sp/>values<sp/>if<sp/>error<sp/>will<sp/>happen*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>lodepng_inspect(w,<sp/>h,<sp/>state,<sp/>in,<sp/>insize);<sp/></highlight><highlight class="comment">/*reads<sp/>header<sp/>and<sp/>resets<sp/>other<sp/>parameters<sp/>in<sp/>state-&gt;info_png*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/>numpixels<sp/>=<sp/>*w<sp/>*<sp/>*h;</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*multiplication<sp/>overflow*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*h<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>numpixels<sp/>/<sp/>*h<sp/>!=<sp/>*w)<sp/>CERROR_RETURN(state-&gt;error,<sp/>92);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*multiplication<sp/>overflow<sp/>possible<sp/>further<sp/>below.<sp/>Allows<sp/>up<sp/>to<sp/>2^31-1<sp/>pixel</highlight></codeline>
<codeline lineno="4481"><highlight class="comment"><sp/><sp/>bytes<sp/>with<sp/>16-bit<sp/>RGBA,<sp/>the<sp/>rest<sp/>is<sp/>room<sp/>for<sp/>filter<sp/>bytes.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numpixels<sp/>&gt;<sp/>268435455)<sp/>CERROR_RETURN(state-&gt;error,<sp/>92);</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;idat);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>chunk<sp/>=<sp/>&amp;in[33];<sp/></highlight><highlight class="comment">/*first<sp/>byte<sp/>of<sp/>the<sp/>first<sp/>chunk<sp/>after<sp/>the<sp/>header*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*loop<sp/>through<sp/>the<sp/>chunks,<sp/>ignoring<sp/>unknown<sp/>chunks<sp/>and<sp/>stopping<sp/>at<sp/>IEND<sp/>chunk.</highlight></codeline>
<codeline lineno="4488"><highlight class="comment"><sp/><sp/>IDAT<sp/>data<sp/>is<sp/>put<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>in<sp/>buffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!IEND<sp/>&amp;&amp;<sp/>!state-&gt;error)</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>chunkLength;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data;<sp/></highlight><highlight class="comment">/*the<sp/>data<sp/>in<sp/>the<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>size<sp/>of<sp/>the<sp/>in<sp/>buffer<sp/>too<sp/>small<sp/>to<sp/>contain<sp/>next<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)((chunk<sp/>-<sp/>in)<sp/>+<sp/>12)<sp/>&gt;<sp/>insize<sp/>||<sp/>chunk<sp/>&lt;<sp/>in)<sp/>CERROR_BREAK(state-&gt;error,<sp/>30);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*length<sp/>of<sp/>the<sp/>data<sp/>of<sp/>the<sp/>chunk,<sp/>excluding<sp/>the<sp/>length<sp/>bytes,<sp/>chunk<sp/>type<sp/>and<sp/>CRC<sp/>bytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/>chunkLength<sp/>=<sp/>lodepng_chunk_length(chunk);</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>chunk<sp/>length<sp/>larger<sp/>than<sp/>the<sp/>max<sp/>PNG<sp/>chunk<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chunkLength<sp/>&gt;<sp/>2147483647)<sp/>CERROR_BREAK(state-&gt;error,<sp/>63);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)((chunk<sp/>-<sp/>in)<sp/>+<sp/>chunkLength<sp/>+<sp/>12)<sp/>&gt;<sp/>insize<sp/>||<sp/>(chunk<sp/>+<sp/>chunkLength<sp/>+<sp/>12)<sp/>&lt;<sp/>in)</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CERROR_BREAK(state-&gt;error,<sp/>64);<sp/></highlight><highlight class="comment">/*error:<sp/>size<sp/>of<sp/>the<sp/>in<sp/>buffer<sp/>too<sp/>small<sp/>to<sp/>contain<sp/>next<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>lodepng_chunk_data_const(chunk);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*IDAT<sp/>chunk,<sp/>containing<sp/>compressed<sp/>image<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;IDAT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldsize<sp/>=<sp/>idat.size;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ucvector_resize(&amp;idat,<sp/>oldsize<sp/>+<sp/>chunkLength))<sp/>CERROR_BREAK(state-&gt;error,<sp/>83<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>chunkLength;<sp/>++i)<sp/>idat.data[oldsize<sp/>+<sp/>i]<sp/>=<sp/>data[i];</highlight></codeline>
<codeline lineno="4515"><highlight class="normal">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>critical_pos<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*IEND<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;IEND&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IEND<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*palette<sp/>chunk<sp/>(PLTE)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;PLTE&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_PLTE(&amp;state-&gt;info_png.color,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>critical_pos<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*palette<sp/>transparency<sp/>chunk<sp/>(tRNS)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;tRNS&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_tRNS(&amp;state-&gt;info_png.color,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*background<sp/>color<sp/>chunk<sp/>(bKGD)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;bKGD&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_bKGD(&amp;state-&gt;info_png,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*text<sp/>chunk<sp/>(tEXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;tEXt&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;decoder.read_text_chunks)</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_tEXt(&amp;state-&gt;info_png,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*compressed<sp/>text<sp/>chunk<sp/>(zTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;zTXt&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;decoder.read_text_chunks)</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_zTXt(&amp;state-&gt;info_png,<sp/>&amp;state-&gt;decoder.zlibsettings,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*international<sp/>text<sp/>chunk<sp/>(iTXt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;iTXt&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;decoder.read_text_chunks)</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_iTXt(&amp;state-&gt;info_png,<sp/>&amp;state-&gt;decoder.zlibsettings,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;tIME&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_tIME(&amp;state-&gt;info_png,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_type_equals(chunk,<sp/></highlight><highlight class="stringliteral">&quot;pHYs&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>readChunk_pHYs(&amp;state-&gt;info_png,<sp/>data,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*it&apos;s<sp/>not<sp/>an<sp/>implemented<sp/>chunk<sp/>type,<sp/>so<sp/>ignore<sp/>it:<sp/>skip<sp/>over<sp/>the<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*error:<sp/>unknown<sp/>critical<sp/>chunk<sp/>(5th<sp/>bit<sp/>of<sp/>first<sp/>byte<sp/>of<sp/>chunk<sp/>type<sp/>is<sp/>0)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lodepng_chunk_ancillary(chunk))<sp/>CERROR_BREAK(state-&gt;error,<sp/>69);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unknown<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;decoder.remember_unknown_chunks)</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>lodepng_chunk_append(&amp;state-&gt;info_png.unknown_chunks_data[critical_pos<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;state-&gt;info_png.unknown_chunks_size[critical_pos<sp/>-<sp/>1],<sp/>chunk);</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;decoder.ignore_crc<sp/>&amp;&amp;<sp/>!unknown)<sp/></highlight><highlight class="comment">/*check<sp/>CRC<sp/>if<sp/>wanted,<sp/>only<sp/>on<sp/>known<sp/>chunk<sp/>types*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_chunk_check_crc(chunk))<sp/>CERROR_BREAK(state-&gt;error,<sp/>57);<sp/></highlight><highlight class="comment">/*invalid<sp/>CRC*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!IEND)<sp/>chunk<sp/>=<sp/>lodepng_chunk_next_const(chunk);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;scanlines);</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*predict<sp/>output<sp/>size,<sp/>to<sp/>allocate<sp/>exact<sp/>size<sp/>for<sp/>output<sp/>buffer<sp/>to<sp/>avoid<sp/>more<sp/>dynamic<sp/>allocation.</highlight></codeline>
<codeline lineno="4610"><highlight class="comment"><sp/><sp/>If<sp/>the<sp/>decompressed<sp/>size<sp/>does<sp/>not<sp/>match<sp/>the<sp/>prediction,<sp/>the<sp/>image<sp/>must<sp/>be<sp/>corrupt.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;info_png.interlace_method<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*The<sp/>extra<sp/>*h<sp/>is<sp/>added<sp/>because<sp/>this<sp/>are<sp/>the<sp/>filter<sp/>bytes<sp/>every<sp/>scanline<sp/>starts<sp/>with*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>=<sp/>lodepng_get_raw_size_idat(*w,<sp/>*h,<sp/>&amp;state-&gt;info_png.color)<sp/>+<sp/>*h;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Adam-7<sp/>interlaced:<sp/>predicted<sp/>size<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>7<sp/>sub-images<sp/>sizes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>color<sp/>=<sp/>&amp;state-&gt;info_png.color;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3,<sp/>(*h<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*w<sp/>&gt;<sp/>4)<sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>3,<sp/>(*h<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>7)<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>2,<sp/>(*h<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>3,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*w<sp/>&gt;<sp/>2)<sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>2,<sp/>(*h<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>2,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>3)<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1,<sp/>(*h<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>2,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*w<sp/>&gt;<sp/>1)<sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>0)<sp/>&gt;&gt;<sp/>1,<sp/>(*h<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/>predict<sp/>+=<sp/>lodepng_get_raw_size_idat((*w<sp/>+<sp/>0),<sp/>(*h<sp/>+<sp/>0)<sp/>&gt;&gt;<sp/>1,<sp/>color)<sp/>+<sp/>((*h<sp/>+<sp/>0)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error<sp/>&amp;&amp;<sp/>!ucvector_reserve(&amp;scanlines,<sp/>predict))<sp/>state-&gt;error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error)</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>zlib_decompress(&amp;scanlines.data,<sp/>&amp;scanlines.size,<sp/>idat.data,</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idat.size,<sp/>&amp;state-&gt;decoder.zlibsettings);</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error<sp/>&amp;&amp;<sp/>scanlines.size<sp/>!=<sp/>predict)<sp/>state-&gt;error<sp/>=<sp/>91;<sp/></highlight><highlight class="comment">/*decompressed<sp/>size<sp/>doesn&apos;t<sp/>match<sp/>prediction*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;idat);</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error)</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>outsize<sp/>=<sp/>lodepng_get_raw_size(*w,<sp/>*h,<sp/>&amp;state-&gt;info_png.color);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(outsize);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!*out)<sp/>state-&gt;error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>outsize;<sp/>i++)<sp/>(*out)[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error)<sp/>state-&gt;error<sp/>=<sp/>postProcessScanlines(*out,<sp/>scanlines.data,<sp/>*w,<sp/>*h,<sp/>&amp;state-&gt;info_png);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;scanlines);</highlight></codeline>
<codeline lineno="4647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGState*<sp/>state,</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="4652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>decodeGeneric(out,<sp/>w,<sp/>h,<sp/>state,<sp/>in,<sp/>insize);</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;decoder.color_convert<sp/>||<sp/>lodepng_color_mode_equal(&amp;state-&gt;info_raw,<sp/>&amp;state-&gt;info_png.color))</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*same<sp/>color<sp/>type,<sp/>no<sp/>copying<sp/>or<sp/>converting<sp/>of<sp/>data<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*store<sp/>the<sp/>info_png<sp/>color<sp/>settings<sp/>on<sp/>the<sp/>info_raw<sp/>so<sp/>that<sp/>the<sp/>info_raw<sp/>still<sp/>reflects<sp/>what<sp/>colortype</highlight></codeline>
<codeline lineno="4660"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>raw<sp/>image<sp/>has<sp/>to<sp/>the<sp/>end<sp/>user*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;decoder.color_convert)</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>lodepng_color_mode_copy(&amp;state-&gt;info_raw,<sp/>&amp;state-&gt;info_png.color);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*color<sp/>conversion<sp/>needed;<sp/>sort<sp/>of<sp/>copy<sp/>of<sp/>the<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>*out;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>outsize;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO:<sp/>check<sp/>if<sp/>this<sp/>works<sp/>according<sp/>to<sp/>the<sp/>statement<sp/>in<sp/>the<sp/>documentation:<sp/>&quot;The<sp/>converter<sp/>can<sp/>convert</highlight></codeline>
<codeline lineno="4674"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>greyscale<sp/>input<sp/>color<sp/>type,<sp/>to<sp/>8-bit<sp/>greyscale<sp/>or<sp/>greyscale<sp/>with<sp/>alpha&quot;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(state-&gt;info_raw.colortype<sp/>==<sp/>LCT_RGB<sp/>||<sp/>state-&gt;info_raw.colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(state-&gt;info_raw.bitdepth<sp/>==<sp/>8))</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>56;<sp/></highlight><highlight class="comment">/*unsupported<sp/>color<sp/>mode<sp/>conversion*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>outsize<sp/>=<sp/>lodepng_get_raw_size(*w,<sp/>*h,<sp/>&amp;state-&gt;info_raw);</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(outsize);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(*out))</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>state-&gt;error<sp/>=<sp/>lodepng_convert(*out,<sp/>data,<sp/>&amp;state-&gt;info_raw,</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;state-&gt;info_png.color,<sp/>*w,<sp/>*h);</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(data);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode_memory(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="4696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/>LodePNGState<sp/>state;</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/>lodepng_state_init(&amp;state);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>state.info_raw.colortype<sp/>=<sp/>colortype;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>state.info_raw.bitdepth<sp/>=<sp/>bitdepth;</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_decode(out,<sp/>w,<sp/>h,<sp/>&amp;state,<sp/>in,<sp/>insize);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>lodepng_state_cleanup(&amp;state);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="4708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_decode_memory(out,<sp/>w,<sp/>h,<sp/>in,<sp/>insize,<sp/>LCT_RGBA,<sp/>8);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode24(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="4713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_decode_memory(out,<sp/>w,<sp/>h,<sp/>in,<sp/>insize,<sp/>LCT_RGB,<sp/>8);</highlight></codeline>
<codeline lineno="4715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode_file(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize;</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>lodepng_load_file(&amp;buffer,<sp/>&amp;buffersize,<sp/>filename);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>lodepng_decode_memory(out,<sp/>w,<sp/>h,<sp/>buffer,<sp/>buffersize,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode32_file(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)</highlight></codeline>
<codeline lineno="4731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_decode_file(out,<sp/>w,<sp/>h,<sp/>filename,<sp/>LCT_RGBA,<sp/>8);</highlight></codeline>
<codeline lineno="4733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_decode24_file(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_decode_file(out,<sp/>w,<sp/>h,<sp/>filename,<sp/>LCT_RGB,<sp/>8);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_decoder_settings_init(LodePNGDecoderSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="4742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/>settings-&gt;color_convert<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/>settings-&gt;read_text_chunks<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/>settings-&gt;remember_unknown_chunks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/>settings-&gt;ignore_crc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>lodepng_decompress_settings_init(&amp;settings-&gt;zlibsettings);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LODEPNG_COMPILE_DECODER)<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_state_init(LodePNGState*<sp/>state)</highlight></codeline>
<codeline lineno="4757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>lodepng_decoder_settings_init(&amp;state-&gt;decoder);</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DECODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/>lodepng_encoder_settings_init(&amp;state-&gt;encoder);</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>lodepng_color_mode_init(&amp;state-&gt;info_raw);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/>lodepng_info_init(&amp;state-&gt;info_png);</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_state_cleanup(LodePNGState*<sp/>state)</highlight></codeline>
<codeline lineno="4770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/>lodepng_color_mode_cleanup(&amp;state-&gt;info_raw);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/>lodepng_info_cleanup(&amp;state-&gt;info_png);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_state_copy(LodePNGState*<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGState*<sp/>source)</highlight></codeline>
<codeline lineno="4776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/>lodepng_state_cleanup(dest);</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/>*source;</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/>lodepng_color_mode_init(&amp;dest-&gt;info_raw);</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/>lodepng_info_init(&amp;dest-&gt;info_png);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/>dest-&gt;error<sp/>=<sp/>lodepng_color_mode_copy(&amp;dest-&gt;info_raw,<sp/>&amp;source-&gt;info_raw);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dest-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/>dest-&gt;error<sp/>=<sp/>lodepng_info_copy(&amp;dest-&gt;info_png,<sp/>&amp;source-&gt;info_png);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dest-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(LODEPNG_COMPILE_DECODER)<sp/>||<sp/>defined(LODEPNG_COMPILE_ENCODER)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/<sp/>PNG<sp/>Encoder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight><highlight class="comment">/*chunkName<sp/>must<sp/>be<sp/>string<sp/>of<sp/>4<sp/>characters*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chunkName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="4795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/>CERROR_TRY_RETURN(lodepng_chunk_create(&amp;out-&gt;data,<sp/>&amp;out-&gt;size,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)length,<sp/>chunkName,<sp/>data));</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/>out-&gt;allocsize<sp/>=<sp/>out-&gt;size;<sp/></highlight><highlight class="comment">/*fix<sp/>the<sp/>allocsize<sp/>again*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeSignature(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out)</highlight></codeline>
<codeline lineno="4802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*8<sp/>bytes<sp/>PNG<sp/>signature,<sp/>aka<sp/>the<sp/>magic<sp/>bytes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>137);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>80);</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>78);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>71);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>13);</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>10);</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>26);</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/>ucvector_push_back(out,<sp/>10);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_IHDR(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>interlace_method)</highlight></codeline>
<codeline lineno="4816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>header;</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;header);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>lodepng_add32bitInt(&amp;header,<sp/>w);<sp/></highlight><highlight class="comment">/*width*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/>lodepng_add32bitInt(&amp;header,<sp/>h);<sp/></highlight><highlight class="comment">/*height*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;header,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)bitdepth);<sp/></highlight><highlight class="comment">/*bit<sp/>depth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;header,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)colortype);<sp/></highlight><highlight class="comment">/*color<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;header,<sp/>0);<sp/></highlight><highlight class="comment">/*compression<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;header,<sp/>0);<sp/></highlight><highlight class="comment">/*filter<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;header,<sp/>interlace_method);<sp/></highlight><highlight class="comment">/*interlace<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;IHDR&quot;</highlight><highlight class="normal">,<sp/>header.data,<sp/>header.size);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;header);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_PLTE(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="4836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>PLTE;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;PLTE);</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info-&gt;palettesize<sp/>*<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*add<sp/>all<sp/>channels<sp/>except<sp/>alpha<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>%<sp/>4<sp/>!=<sp/>3)<sp/>ucvector_push_back(&amp;PLTE,<sp/>info-&gt;palette[i]);</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;PLTE&quot;</highlight><highlight class="normal">,<sp/>PLTE.data,<sp/>PLTE.size);</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;PLTE);</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_tRNS(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info)</highlight></codeline>
<codeline lineno="4853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>tRNS;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;tRNS);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>info-&gt;palettesize;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>tail<sp/>of<sp/>palette<sp/>values<sp/>that<sp/>all<sp/>have<sp/>255<sp/>as<sp/>alpha,<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>encoded*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>info-&gt;palettesize;<sp/>i<sp/>!=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;palette[4<sp/>*<sp/>(i<sp/>-<sp/>1)<sp/>+<sp/>3]<sp/>==<sp/>255)<sp/>--amount;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*add<sp/>only<sp/>alpha<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>amount;<sp/>++i)<sp/>ucvector_push_back(&amp;tRNS,<sp/>info-&gt;palette[4<sp/>*<sp/>i<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;colortype<sp/>==<sp/>LCT_GREY)</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;key_defined)</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_r<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_r<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;colortype<sp/>==<sp/>LCT_RGB)</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;key_defined)</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_r<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_r<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_g<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_g<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_b<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;tRNS,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;key_b<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"></highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;tRNS&quot;</highlight><highlight class="normal">,<sp/>tRNS.data,<sp/>tRNS.size);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;tRNS);</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_IDAT(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize,</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGCompressSettings*<sp/>zlibsettings)</highlight></codeline>
<codeline lineno="4899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>zlibdata;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*compress<sp/>with<sp/>the<sp/>Zlib<sp/>compressor*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;zlibdata);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>zlib_compress(&amp;zlibdata.data,<sp/>&amp;zlibdata.size,<sp/>data,<sp/>datasize,<sp/>zlibsettings);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;IDAT&quot;</highlight><highlight class="normal">,<sp/>zlibdata.data,<sp/>zlibdata.size);</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;zlibdata);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_IEND(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out)</highlight></codeline>
<codeline lineno="4913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;IEND&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"></highlight></codeline>
<codeline lineno="4919"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_tEXt(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keyword,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>textstring)</highlight></codeline>
<codeline lineno="4922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>text;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;text);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>keyword[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;text,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)keyword[i]);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>1<sp/>||<sp/>i<sp/>&gt;<sp/>79)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>89;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>keyword<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;text,<sp/>0);<sp/></highlight><highlight class="comment">/*0<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>textstring[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;text,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)textstring[i]);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;tEXt&quot;</highlight><highlight class="normal">,<sp/>text.data,<sp/>text.size);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;text);</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_zTXt(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keyword,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>textstring,</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGCompressSettings*<sp/>zlibsettings)</highlight></codeline>
<codeline lineno="4939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>data,<sp/>compressed;</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>textsize<sp/>=<sp/>strlen(textstring);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;data);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;compressed);</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>keyword[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)keyword[i]);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>1<sp/>||<sp/>i<sp/>&gt;<sp/>79)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>89;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>keyword<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*0<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*compression<sp/>method:<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>zlib_compress(&amp;compressed.data,<sp/>&amp;compressed.size,</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)textstring,<sp/>textsize,<sp/>zlibsettings);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>compressed.size;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>compressed.data[i]);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;zTXt&quot;</highlight><highlight class="normal">,<sp/>data.data,<sp/>data.size);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;compressed);</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;data);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_iTXt(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>compressed,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>keyword,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>langtag,</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>transkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>textstring,<sp/>LodePNGCompressSettings*<sp/>zlibsettings)</highlight></codeline>
<codeline lineno="4966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>data;</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>textsize<sp/>=<sp/>strlen(textstring);</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;data);</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>keyword[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)keyword[i]);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>1<sp/>||<sp/>i<sp/>&gt;<sp/>79)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>89;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>keyword<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*null<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>compressed<sp/>?<sp/>1<sp/>:<sp/>0);<sp/></highlight><highlight class="comment">/*compression<sp/>flag*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*compression<sp/>method*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>langtag[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)langtag[i]);</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*null<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>transkey[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)transkey[i]);</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>0);<sp/></highlight><highlight class="comment">/*null<sp/>termination<sp/>char*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(compressed)</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>compressed_data;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_init(&amp;compressed_data);</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>zlib_compress(&amp;compressed_data.data,<sp/>&amp;compressed_data.size,</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)textstring,<sp/>textsize,<sp/>zlibsettings);</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>compressed_data.size;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>compressed_data.data[i]);</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_cleanup(&amp;compressed_data);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*not<sp/>compressed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>textstring[i]<sp/>!=<sp/>0;<sp/>++i)<sp/>ucvector_push_back(&amp;data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)textstring[i]);</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;iTXt&quot;</highlight><highlight class="normal">,<sp/>data.data,<sp/>data.size);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;data);</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_bKGD(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="5006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>bKGD;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;bKGD);</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_GREY<sp/>||<sp/>info-&gt;color.colortype<sp/>==<sp/>LCT_GREY_ALPHA)</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_r<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_r<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_RGB<sp/>||<sp/>info-&gt;color.colortype<sp/>==<sp/>LCT_RGBA)</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_r<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_r<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_g<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_g<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_b<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_b<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info-&gt;color.colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/>ucvector_push_back(&amp;bKGD,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(info-&gt;background_r<sp/>&amp;<sp/>255));<sp/></highlight><highlight class="comment">/*palette<sp/>index*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;bKGD&quot;</highlight><highlight class="normal">,<sp/>bKGD.data,<sp/>bKGD.size);</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;bKGD);</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_tIME(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGTime*<sp/>time)</highlight></codeline>
<codeline lineno="5036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(7);</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/>data[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(time-&gt;year<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/>data[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(time-&gt;year<sp/>&amp;<sp/>255);</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/>data[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)time-&gt;month;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/>data[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)time-&gt;day;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/>data[4]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)time-&gt;hour;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/>data[5]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)time-&gt;minute;</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/>data[6]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)time-&gt;second;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;tIME&quot;</highlight><highlight class="normal">,<sp/>data,<sp/>7);</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/>lodepng_free(data);</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addChunk_pHYs(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>info)</highlight></codeline>
<codeline lineno="5053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>data;</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;data);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>lodepng_add32bitInt(&amp;data,<sp/>info-&gt;phys_x);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/>lodepng_add32bitInt(&amp;data,<sp/>info-&gt;phys_y);</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/>ucvector_push_back(&amp;data,<sp/>info-&gt;phys_unit);</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>addChunk(out,<sp/></highlight><highlight class="stringliteral">&quot;pHYs&quot;</highlight><highlight class="normal">,<sp/>data.data,<sp/>data.size);</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/>ucvector_cleanup(&amp;data);</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filterScanline(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>scanline,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prevline,</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filterType)</highlight></codeline>
<codeline lineno="5072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(filterType)</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">/*None*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">/*Sub*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i]<sp/>-<sp/>scanline[i<sp/>-<sp/>bytewidth];</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">/*Up*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prevline)</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i]<sp/>-<sp/>prevline[i];</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">/*Average*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prevline)</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i]<sp/>-<sp/>(prevline[i]<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i]<sp/>-<sp/>((scanline[i<sp/>-<sp/>bytewidth]<sp/>+<sp/>prevline[i])<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i]<sp/>-<sp/>(scanline[i<sp/>-<sp/>bytewidth]<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">/*Paeth*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prevline)</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*paethPredictor(0,<sp/>prevline[i],<sp/>0)<sp/>is<sp/>always<sp/>prevline[i]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>out[i]<sp/>=<sp/>(scanline[i]<sp/>-<sp/>prevline[i]);</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(scanline[i]<sp/>-<sp/>paethPredictor(scanline[i<sp/>-<sp/>bytewidth],<sp/>prevline[i],<sp/>prevline[i<sp/>-<sp/>bytewidth]));</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>bytewidth;<sp/>++i)<sp/>out[i]<sp/>=<sp/>scanline[i];</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*paethPredictor(scanline[i<sp/>-<sp/>bytewidth],<sp/>0,<sp/>0)<sp/>is<sp/>always<sp/>scanline[i<sp/>-<sp/>bytewidth]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>bytewidth;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>out[i]<sp/>=<sp/>(scanline[i]<sp/>-<sp/>scanline[i<sp/>-<sp/>bytewidth]);</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*unexisting<sp/>filter<sp/>type<sp/>given*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>log2<sp/>approximation.<sp/>A<sp/>slight<sp/>bit<sp/>faster<sp/>than<sp/>std::log.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>flog2(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)</highlight></codeline>
<codeline lineno="5128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(f<sp/>&gt;<sp/>32)<sp/>{<sp/>result<sp/>+=<sp/>4;<sp/>f<sp/>/=<sp/>16;<sp/>}</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(f<sp/>&gt;<sp/>2)<sp/>{<sp/>++result;<sp/>f<sp/>/=<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>+<sp/>1.442695f<sp/>*<sp/>(f<sp/>*<sp/>f<sp/>*<sp/>f<sp/>/<sp/>3<sp/>-<sp/>3<sp/>*<sp/>f<sp/>*<sp/>f<sp/>/<sp/>2<sp/>+<sp/>3<sp/>*<sp/>f<sp/>-<sp/>1.83333f);</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>filter(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGColorMode*<sp/>info,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGEncoderSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="5137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5139"><highlight class="comment"><sp/><sp/>For<sp/>PNG<sp/>filter<sp/>method<sp/>0</highlight></codeline>
<codeline lineno="5140"><highlight class="comment"><sp/><sp/>out<sp/>must<sp/>be<sp/>a<sp/>buffer<sp/>with<sp/>as<sp/>size:<sp/>h<sp/>+<sp/>(w<sp/>*<sp/>h<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8,<sp/>because<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="5141"><highlight class="comment"><sp/><sp/>the<sp/>scanlines<sp/>with<sp/>1<sp/>extra<sp/>byte<sp/>per<sp/>scanline</highlight></codeline>
<codeline lineno="5142"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(info);</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*the<sp/>width<sp/>of<sp/>a<sp/>scanline<sp/>in<sp/>bytes,<sp/>not<sp/>including<sp/>the<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>linebytes<sp/>=<sp/>(w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*bytewidth<sp/>is<sp/>used<sp/>for<sp/>filtering,<sp/>is<sp/>1<sp/>when<sp/>bpp<sp/>&lt;<sp/>8,<sp/>number<sp/>of<sp/>bytes<sp/>per<sp/>pixel<sp/>otherwise*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth<sp/>=<sp/>(bpp<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prevline<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/>LodePNGFilterStrategy<sp/>strategy<sp/>=<sp/>settings-&gt;filter_strategy;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"></highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5155"><highlight class="comment"><sp/><sp/>There<sp/>is<sp/>a<sp/>heuristic<sp/>called<sp/>the<sp/>minimum<sp/>sum<sp/>of<sp/>absolute<sp/>differences<sp/>heuristic,<sp/>suggested<sp/>by<sp/>the<sp/>PNG<sp/>standard:</highlight></codeline>
<codeline lineno="5156"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>If<sp/>the<sp/>image<sp/>type<sp/>is<sp/>Palette,<sp/>or<sp/>the<sp/>bit<sp/>depth<sp/>is<sp/>smaller<sp/>than<sp/>8,<sp/>then<sp/>do<sp/>not<sp/>filter<sp/>the<sp/>image<sp/>(i.e.</highlight></codeline>
<codeline lineno="5157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>fixed<sp/>filtering,<sp/>with<sp/>the<sp/>filter<sp/>None).</highlight></codeline>
<codeline lineno="5158"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(The<sp/>other<sp/>case)<sp/>If<sp/>the<sp/>image<sp/>type<sp/>is<sp/>Grayscale<sp/>or<sp/>RGB<sp/>(with<sp/>or<sp/>without<sp/>Alpha),<sp/>and<sp/>the<sp/>bit<sp/>depth<sp/>is</highlight></codeline>
<codeline lineno="5159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>not<sp/>smaller<sp/>than<sp/>8,<sp/>then<sp/>use<sp/>adaptive<sp/>filtering<sp/>heuristic<sp/>as<sp/>follows:<sp/>independently<sp/>for<sp/>each<sp/>row,<sp/>apply</highlight></codeline>
<codeline lineno="5160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>all<sp/>five<sp/>filters<sp/>and<sp/>select<sp/>the<sp/>filter<sp/>that<sp/>produces<sp/>the<sp/>smallest<sp/>sum<sp/>of<sp/>absolute<sp/>values<sp/>per<sp/>row.</highlight></codeline>
<codeline lineno="5161"><highlight class="comment"><sp/><sp/>This<sp/>heuristic<sp/>is<sp/>used<sp/>if<sp/>filter<sp/>strategy<sp/>is<sp/>LFS_MINSUM<sp/>and<sp/>filter_palette_zero<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="5162"><highlight class="comment"></highlight></codeline>
<codeline lineno="5163"><highlight class="comment"><sp/><sp/>If<sp/>filter_palette_zero<sp/>is<sp/>true<sp/>and<sp/>filter_strategy<sp/>is<sp/>not<sp/>LFS_MINSUM,<sp/>the<sp/>above<sp/>heuristic<sp/>is<sp/>followed,</highlight></codeline>
<codeline lineno="5164"><highlight class="comment"><sp/><sp/>but<sp/>for<sp/>&quot;the<sp/>other<sp/>case&quot;,<sp/>whatever<sp/>strategy<sp/>filter_strategy<sp/>is<sp/>set<sp/>to<sp/>instead<sp/>of<sp/>the<sp/>minimum<sp/>sum</highlight></codeline>
<codeline lineno="5165"><highlight class="comment"><sp/><sp/>heuristic<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="5166"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(settings-&gt;filter_palette_zero<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(info-&gt;colortype<sp/>==<sp/>LCT_PALETTE<sp/>||<sp/>info-&gt;bitdepth<sp/>&lt;<sp/>8))<sp/>strategy<sp/>=<sp/>LFS_ZERO;</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>31;<sp/></highlight><highlight class="comment">/*error:<sp/>invalid<sp/>color<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strategy<sp/>==<sp/>LFS_ZERO)</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>outindex<sp/>=<sp/>(1<sp/>+<sp/>linebytes)<sp/>*<sp/>y;<sp/></highlight><highlight class="comment">/*the<sp/>extra<sp/>filterbyte<sp/>added<sp/>to<sp/>each<sp/>row*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inindex<sp/>=<sp/>linebytes<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[outindex]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*filter<sp/>type<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filterScanline(&amp;out[outindex<sp/>+<sp/>1],<sp/>&amp;in[inindex],<sp/>prevline,<sp/>linebytes,<sp/>bytewidth,<sp/>0);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;in[inindex];</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strategy<sp/>==<sp/>LFS_MINSUM)</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*adaptive<sp/>filtering*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sum[5];</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attempt[5];<sp/></highlight><highlight class="comment">/*five<sp/>filtering<sp/>attempts,<sp/>one<sp/>for<sp/>each<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>smallest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/>bestType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attempt[type]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(linebytes);</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!attempt[type])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*try<sp/>the<sp/>5<sp/>filter<sp/>types*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterScanline(attempt[type],<sp/>&amp;in[y<sp/>*<sp/>linebytes],<sp/>prevline,<sp/>linebytes,<sp/>bytewidth,<sp/>type);</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*calculate<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>result*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[type]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)<sp/>sum[type]<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(attempt[type][x]);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*For<sp/>differences,<sp/>each<sp/>byte<sp/>should<sp/>be<sp/>treated<sp/>as<sp/>signed,<sp/>values<sp/>above<sp/>127<sp/>are<sp/>negative</highlight></codeline>
<codeline lineno="5217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(converted<sp/>to<sp/>signed<sp/>char).<sp/>Filtertype<sp/>0<sp/>isn&apos;t<sp/>a<sp/>difference<sp/>though,<sp/>so<sp/>use<sp/>unsigned<sp/>there.</highlight></codeline>
<codeline lineno="5218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>means<sp/>filtertype<sp/>0<sp/>is<sp/>almost<sp/>never<sp/>chosen,<sp/>but<sp/>that<sp/>is<sp/>justified.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>attempt[type][x];</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[type]<sp/>+=<sp/>s<sp/>&lt;<sp/>128<sp/>?<sp/>s<sp/>:<sp/>(255U<sp/>-<sp/>s);</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*check<sp/>if<sp/>this<sp/>is<sp/>smallest<sp/>sum<sp/>(or<sp/>if<sp/>type<sp/>==<sp/>0<sp/>it&apos;s<sp/>the<sp/>first<sp/>case<sp/>so<sp/>always<sp/>store<sp/>the<sp/>values)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type<sp/>==<sp/>0<sp/>||<sp/>sum[type]<sp/>&lt;<sp/>smallest)</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallest<sp/>=<sp/>sum[type];</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;in[y<sp/>*<sp/>linebytes];</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*now<sp/>fill<sp/>the<sp/>out<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)]<sp/>=<sp/>bestType;<sp/></highlight><highlight class="comment">/*the<sp/>first<sp/>byte<sp/>of<sp/>a<sp/>scanline<sp/>will<sp/>be<sp/>the<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)<sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)<sp/>+<sp/>1<sp/>+<sp/>x]<sp/>=<sp/>attempt[bestType][x];</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)<sp/>lodepng_free(attempt[type]);</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strategy<sp/>==<sp/>LFS_ENTROPY)</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum[5];</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attempt[5];<sp/></highlight><highlight class="comment">/*five<sp/>filtering<sp/>attempts,<sp/>one<sp/>for<sp/>each<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>smallest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>type,<sp/>bestType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count[256];</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attempt[type]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(linebytes);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!attempt[type])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*try<sp/>the<sp/>5<sp/>filter<sp/>types*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterScanline(attempt[type],<sp/>&amp;in[y<sp/>*<sp/>linebytes],<sp/>prevline,<sp/>linebytes,<sp/>bytewidth,<sp/>type);</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>256;<sp/>++x)<sp/>count[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)<sp/>++count[attempt[type][x]];</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count[type];<sp/></highlight><highlight class="comment">/*the<sp/>filter<sp/>type<sp/>itself<sp/>is<sp/>part<sp/>of<sp/>the<sp/>scanline*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[type]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>256;<sp/>++x)</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>count[x]<sp/>/<sp/>(float)(linebytes<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[type]<sp/>+=<sp/>count[x]<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>flog2(1<sp/>/<sp/>p)<sp/>*<sp/>p;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*check<sp/>if<sp/>this<sp/>is<sp/>smallest<sp/>sum<sp/>(or<sp/>if<sp/>type<sp/>==<sp/>0<sp/>it&apos;s<sp/>the<sp/>first<sp/>case<sp/>so<sp/>always<sp/>store<sp/>the<sp/>values)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type<sp/>==<sp/>0<sp/>||<sp/>sum[type]<sp/>&lt;<sp/>smallest)</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallest<sp/>=<sp/>sum[type];</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;in[y<sp/>*<sp/>linebytes];</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*now<sp/>fill<sp/>the<sp/>out<sp/>values*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)]<sp/>=<sp/>bestType;<sp/></highlight><highlight class="comment">/*the<sp/>first<sp/>byte<sp/>of<sp/>a<sp/>scanline<sp/>will<sp/>be<sp/>the<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)<sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)<sp/>+<sp/>1<sp/>+<sp/>x]<sp/>=<sp/>attempt[bestType][x];</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)<sp/>lodepng_free(attempt[type]);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strategy<sp/>==<sp/>LFS_PREDEFINED)</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>outindex<sp/>=<sp/>(1<sp/>+<sp/>linebytes)<sp/>*<sp/>y;<sp/></highlight><highlight class="comment">/*the<sp/>extra<sp/>filterbyte<sp/>added<sp/>to<sp/>each<sp/>row*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inindex<sp/>=<sp/>linebytes<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>settings-&gt;predefined_filters[y];</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[outindex]<sp/>=<sp/>type;<sp/></highlight><highlight class="comment">/*filter<sp/>type<sp/>byte*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filterScanline(&amp;out[outindex<sp/>+<sp/>1],<sp/>&amp;in[inindex],<sp/>prevline,<sp/>linebytes,<sp/>bytewidth,<sp/>type);</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;in[inindex];</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strategy<sp/>==<sp/>LFS_BRUTE_FORCE)</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*brute<sp/>force<sp/>filter<sp/>chooser.</highlight></codeline>
<codeline lineno="5303"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate<sp/>the<sp/>scanline<sp/>after<sp/>every<sp/>filter<sp/>attempt<sp/>to<sp/>see<sp/>which<sp/>one<sp/>deflates<sp/>best.</highlight></codeline>
<codeline lineno="5304"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>very<sp/>slow<sp/>and<sp/>gives<sp/>only<sp/>slightly<sp/>smaller,<sp/>sometimes<sp/>even<sp/>larger,<sp/>result*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size[5];</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attempt[5];<sp/></highlight><highlight class="comment">/*five<sp/>filtering<sp/>attempts,<sp/>one<sp/>for<sp/>each<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>smallest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0,<sp/>bestType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dummy;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/>LodePNGCompressSettings<sp/>zlibsettings<sp/>=<sp/>settings-&gt;zlibsettings;</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*use<sp/>fixed<sp/>tree<sp/>on<sp/>the<sp/>attempts<sp/>so<sp/>that<sp/>the<sp/>tree<sp/>is<sp/>not<sp/>adapted<sp/>to<sp/>the<sp/>filtertype<sp/>on<sp/>purpose,</highlight></codeline>
<codeline lineno="5312"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>simulate<sp/>the<sp/>true<sp/>case<sp/>where<sp/>the<sp/>tree<sp/>is<sp/>the<sp/>same<sp/>for<sp/>the<sp/>whole<sp/>image.<sp/>Sometimes<sp/>it<sp/>gives</highlight></codeline>
<codeline lineno="5313"><highlight class="comment"><sp/><sp/><sp/><sp/>better<sp/>result<sp/>with<sp/>dynamic<sp/>tree<sp/>anyway.<sp/>Using<sp/>the<sp/>fixed<sp/>tree<sp/>sometimes<sp/>gives<sp/>worse,<sp/>but<sp/>in<sp/>rare</highlight></codeline>
<codeline lineno="5314"><highlight class="comment"><sp/><sp/><sp/><sp/>cases<sp/>better<sp/>compression.<sp/>It<sp/>does<sp/>make<sp/>this<sp/>a<sp/>bit<sp/>less<sp/>slow,<sp/>so<sp/>it&apos;s<sp/>worth<sp/>doing<sp/>this.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/>zlibsettings.btype<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*a<sp/>custom<sp/>encoder<sp/>likely<sp/>doesn&apos;t<sp/>read<sp/>the<sp/>btype<sp/>setting<sp/>and<sp/>is<sp/>optimized<sp/>for<sp/>complete<sp/>PNG</highlight></codeline>
<codeline lineno="5317"><highlight class="comment"><sp/><sp/><sp/><sp/>images<sp/>only,<sp/>so<sp/>disable<sp/>it*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/>zlibsettings.custom_zlib<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>zlibsettings.custom_deflate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attempt[type]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(linebytes);</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!attempt[type])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)<sp/></highlight><highlight class="comment">/*try<sp/>the<sp/>5<sp/>filter<sp/>types*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>testsize<sp/>=<sp/>linebytes;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if(testsize<sp/>&gt;<sp/>8)<sp/>testsize<sp/>/=<sp/>8;*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*it<sp/>already<sp/>works<sp/>good<sp/>enough<sp/>by<sp/>testing<sp/>a<sp/>part<sp/>of<sp/>the<sp/>row*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterScanline(attempt[type],<sp/>&amp;in[y<sp/>*<sp/>linebytes],<sp/>prevline,<sp/>linebytes,<sp/>bytewidth,<sp/>type);</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[type]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zlib_compress(&amp;dummy,<sp/>&amp;size[type],<sp/>attempt[type],<sp/>testsize,<sp/>&amp;zlibsettings);</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_free(dummy);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*check<sp/>if<sp/>this<sp/>is<sp/>smallest<sp/>size<sp/>(or<sp/>if<sp/>type<sp/>==<sp/>0<sp/>it&apos;s<sp/>the<sp/>first<sp/>case<sp/>so<sp/>always<sp/>store<sp/>the<sp/>values)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type<sp/>==<sp/>0<sp/>||<sp/>size[type]<sp/>&lt;<sp/>smallest)</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestType<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallest<sp/>=<sp/>size[type];</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prevline<sp/>=<sp/>&amp;in[y<sp/>*<sp/>linebytes];</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)]<sp/>=<sp/>bestType;<sp/></highlight><highlight class="comment">/*the<sp/>first<sp/>byte<sp/>of<sp/>a<sp/>scanline<sp/>will<sp/>be<sp/>the<sp/>filter<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>linebytes;<sp/>++x)<sp/>out[y<sp/>*<sp/>(linebytes<sp/>+<sp/>1)<sp/>+<sp/>1<sp/>+<sp/>x]<sp/>=<sp/>attempt[bestType][x];</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(type<sp/>=<sp/>0;<sp/>type<sp/>!=<sp/>5;<sp/>++type)<sp/>free(attempt[type]);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>88;<sp/></highlight><highlight class="comment">/*<sp/>unknown<sp/>filter<sp/>strategy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPaddingBits(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>olinebits,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilinebits,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="5357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*The<sp/>opposite<sp/>of<sp/>the<sp/>removePaddingBits<sp/>function</highlight></codeline>
<codeline lineno="5359"><highlight class="comment"><sp/><sp/>olinebits<sp/>must<sp/>be<sp/>&gt;=<sp/>ilinebits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>olinebits<sp/>-<sp/>ilinebits;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>obp<sp/>=<sp/>0,<sp/>ibp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*bit<sp/>pointers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>h;<sp/>++y)</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>ilinebits;<sp/>++x)</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>readBitFromReversedStream(&amp;ibp,<sp/>in);</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBitOfReversedStream(&amp;obp,<sp/>out,<sp/>bit);</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*obp<sp/>+=<sp/>diff;<sp/>--&gt;<sp/>no,<sp/>fill<sp/>in<sp/>some<sp/>value<sp/>in<sp/>the<sp/>padding<sp/>bits<sp/>too,<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="5372"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;Use<sp/>of<sp/>uninitialised<sp/>value<sp/>of<sp/>size<sp/>###&quot;<sp/>warning<sp/>from<sp/>valgrind*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>diff;<sp/>++x)<sp/>setBitOfReversedStream(&amp;obp,<sp/>out,<sp/>0);</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5378"><highlight class="comment">in:<sp/>non-interlaced<sp/>image<sp/>with<sp/>size<sp/>w*h</highlight></codeline>
<codeline lineno="5379"><highlight class="comment">out:<sp/>the<sp/>same<sp/>pixels,<sp/>but<sp/>re-ordered<sp/>according<sp/>to<sp/>PNG&apos;s<sp/>Adam7<sp/>interlacing,<sp/>with</highlight></codeline>
<codeline lineno="5380"><highlight class="comment"><sp/>no<sp/>padding<sp/>bits<sp/>between<sp/>scanlines,<sp/>but<sp/>between<sp/>reduced<sp/>images<sp/>so<sp/>that<sp/>each</highlight></codeline>
<codeline lineno="5381"><highlight class="comment"><sp/>reduced<sp/>image<sp/>starts<sp/>at<sp/>a<sp/>byte.</highlight></codeline>
<codeline lineno="5382"><highlight class="comment">bpp:<sp/>bits<sp/>per<sp/>pixel</highlight></codeline>
<codeline lineno="5383"><highlight class="comment">there<sp/>are<sp/>no<sp/>padding<sp/>bits,<sp/>not<sp/>between<sp/>scanlines,<sp/>not<sp/>between<sp/>reduced<sp/>images</highlight></codeline>
<codeline lineno="5384"><highlight class="comment">in<sp/>has<sp/>the<sp/>following<sp/>size<sp/>in<sp/>bits:<sp/>w<sp/>*<sp/>h<sp/>*<sp/>bpp.</highlight></codeline>
<codeline lineno="5385"><highlight class="comment">out<sp/>is<sp/>possibly<sp/>bigger<sp/>due<sp/>to<sp/>padding<sp/>bits<sp/>between<sp/>reduced<sp/>images</highlight></codeline>
<codeline lineno="5386"><highlight class="comment">NOTE:<sp/>comments<sp/>about<sp/>padding<sp/>bits<sp/>are<sp/>only<sp/>relevant<sp/>if<sp/>bpp<sp/>&lt;<sp/>8</highlight></codeline>
<codeline lineno="5387"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Adam7_interlace(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp)</highlight></codeline>
<codeline lineno="5389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passw[7],<sp/>passh[7];</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>filter_passstart[8],<sp/>padded_passstart[8],<sp/>passstart[8];</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/>Adam7_getpassvalues(passw,<sp/>passh,<sp/>filter_passstart,<sp/>padded_passstart,<sp/>passstart,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>b;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytewidth<sp/>=<sp/>bpp<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>passh[i];<sp/>++y)</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>passw[i];<sp/>++x)</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pixelinstart<sp/>=<sp/>((ADAM7_IY[i]<sp/>+<sp/>y<sp/>*<sp/>ADAM7_DY[i])<sp/>*<sp/>w<sp/>+<sp/>ADAM7_IX[i]<sp/>+<sp/>x<sp/>*<sp/>ADAM7_DX[i])<sp/>*<sp/>bytewidth;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pixeloutstart<sp/>=<sp/>passstart[i]<sp/>+<sp/>(y<sp/>*<sp/>passw[i]<sp/>+<sp/>x)<sp/>*<sp/>bytewidth;</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>bytewidth;<sp/>++b)</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[pixeloutstart<sp/>+<sp/>b]<sp/>=<sp/>in[pixelinstart<sp/>+<sp/>b];</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*bpp<sp/>&lt;<sp/>8:<sp/>Adam7<sp/>with<sp/>pixels<sp/>&lt;<sp/>8<sp/>bit<sp/>is<sp/>a<sp/>bit<sp/>trickier:<sp/>with<sp/>bit<sp/>pointers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>b;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ilinebits<sp/>=<sp/>bpp<sp/>*<sp/>passw[i];</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>olinebits<sp/>=<sp/>bpp<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>obp,<sp/>ibp;<sp/></highlight><highlight class="comment">/*bit<sp/>pointers<sp/>(for<sp/>out<sp/>and<sp/>in<sp/>buffer)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>passh[i];<sp/>++y)</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>passw[i];<sp/>++x)</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibp<sp/>=<sp/>(ADAM7_IY[i]<sp/>+<sp/>y<sp/>*<sp/>ADAM7_DY[i])<sp/>*<sp/>olinebits<sp/>+<sp/>(ADAM7_IX[i]<sp/>+<sp/>x<sp/>*<sp/>ADAM7_DX[i])<sp/>*<sp/>bpp;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obp<sp/>=<sp/>(8<sp/>*<sp/>passstart[i])<sp/>+<sp/>(y<sp/>*<sp/>ilinebits<sp/>+<sp/>x<sp/>*<sp/>bpp);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>bpp;<sp/>++b)</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>readBitFromReversedStream(&amp;ibp,<sp/>in);</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setBitOfReversedStream(&amp;obp,<sp/>out,<sp/>bit);</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight><highlight class="comment">/*out<sp/>must<sp/>be<sp/>buffer<sp/>big<sp/>enough<sp/>to<sp/>contain<sp/>uncompressed<sp/>IDAT<sp/>chunk<sp/>data,<sp/>and<sp/>in<sp/>must<sp/>contain<sp/>the<sp/>full<sp/>image.</highlight></codeline>
<codeline lineno="5438"><highlight class="comment">return<sp/>value<sp/>is<sp/>error**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>preProcessScanlines(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGInfo*<sp/>info_png,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGEncoderSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="5442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5444"><highlight class="comment"><sp/><sp/>This<sp/>function<sp/>converts<sp/>the<sp/>pure<sp/>2D<sp/>image<sp/>with<sp/>the<sp/>PNG&apos;s<sp/>colortype,<sp/>into<sp/>filtered-padded-interlaced<sp/>data.<sp/>Steps:</highlight></codeline>
<codeline lineno="5445"><highlight class="comment"><sp/><sp/>*)<sp/>if<sp/>no<sp/>Adam7:<sp/>1)<sp/>add<sp/>padding<sp/>bits<sp/>(=<sp/>posible<sp/>extra<sp/>bits<sp/>per<sp/>scanline<sp/>if<sp/>bpp<sp/>&lt;<sp/>8)<sp/>2)<sp/>filter</highlight></codeline>
<codeline lineno="5446"><highlight class="comment"><sp/><sp/>*)<sp/>if<sp/>adam7:<sp/>1)<sp/>Adam7_interlace<sp/>2)<sp/>7x<sp/>add<sp/>padding<sp/>bits<sp/>3)<sp/>7x<sp/>filter</highlight></codeline>
<codeline lineno="5447"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bpp<sp/>=<sp/>lodepng_get_bpp(&amp;info_png-&gt;color);</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info_png-&gt;interlace_method<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/>*outsize<sp/>=<sp/>h<sp/>+<sp/>(h<sp/>*<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8));<sp/></highlight><highlight class="comment">/*image<sp/>size<sp/>plus<sp/>an<sp/>extra<sp/>byte<sp/>per<sp/>scanline<sp/>+<sp/>possible<sp/>padding<sp/>bits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(*outsize);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(*out)<sp/>&amp;&amp;<sp/>(*outsize))<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*non<sp/>multiple<sp/>of<sp/>8<sp/>bits<sp/>per<sp/>scanline,<sp/>padding<sp/>bits<sp/>needed<sp/>per<sp/>scanline*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/>w<sp/>*<sp/>bpp<sp/>!=<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8)</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>padded<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(h<sp/>*<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8));</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!padded)<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPaddingBits(padded,<sp/>in,<sp/>((w<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8,<sp/>w<sp/>*<sp/>bpp,<sp/>h);</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>filter(*out,<sp/>padded,<sp/>w,<sp/>h,<sp/>&amp;info_png-&gt;color,<sp/>settings);</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_free(padded);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*we<sp/>can<sp/>immediately<sp/>filter<sp/>into<sp/>the<sp/>out<sp/>buffer,<sp/>no<sp/>other<sp/>steps<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>filter(*out,<sp/>in,<sp/>w,<sp/>h,<sp/>&amp;info_png-&gt;color,<sp/>settings);</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*interlace_method<sp/>is<sp/>1<sp/>(Adam7)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>passw[7],<sp/>passh[7];</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>filter_passstart[8],<sp/>padded_passstart[8],<sp/>passstart[8];</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>adam7;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/>Adam7_getpassvalues(passw,<sp/>passh,<sp/>filter_passstart,<sp/>padded_passstart,<sp/>passstart,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>*outsize<sp/>=<sp/>filter_passstart[7];<sp/></highlight><highlight class="comment">/*image<sp/>size<sp/>plus<sp/>an<sp/>extra<sp/>byte<sp/>per<sp/>scanline<sp/>+<sp/>possible<sp/>padding<sp/>bits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(*outsize);</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(*out))<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/>adam7<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(passstart[7]);</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!adam7<sp/>&amp;&amp;<sp/>passstart[7])<sp/>error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"></highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Adam7_interlace(adam7,<sp/>in,<sp/>w,<sp/>h,<sp/>bpp);</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bpp<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>padded<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(padded_passstart[i<sp/>+<sp/>1]<sp/>-<sp/>padded_passstart[i]);</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!padded)<sp/>ERROR_BREAK(83);<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPaddingBits(padded,<sp/>&amp;adam7[passstart[i]],</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((passw[i]<sp/>*<sp/>bpp<sp/>+<sp/>7)<sp/>/<sp/>8)<sp/>*<sp/>8,<sp/>passw[i]<sp/>*<sp/>bpp,<sp/>passh[i]);</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>filter(&amp;(*out)[filter_passstart[i]],<sp/>padded,</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passw[i],<sp/>passh[i],<sp/>&amp;info_png-&gt;color,<sp/>settings);</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lodepng_free(padded);</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>filter(&amp;(*out)[filter_passstart[i]],<sp/>&amp;adam7[padded_passstart[i]],</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passw[i],<sp/>passh[i],<sp/>&amp;info_png-&gt;color,<sp/>settings);</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(adam7);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5527"><highlight class="comment">palette<sp/>must<sp/>have<sp/>4<sp/>*<sp/>palettesize<sp/>bytes<sp/>allocated,<sp/>and<sp/>given<sp/>in<sp/>format<sp/>RGBARGBARGBARGBA...</highlight></codeline>
<codeline lineno="5528"><highlight class="comment">returns<sp/>0<sp/>if<sp/>the<sp/>palette<sp/>is<sp/>opaque,</highlight></codeline>
<codeline lineno="5529"><highlight class="comment">returns<sp/>1<sp/>if<sp/>the<sp/>palette<sp/>has<sp/>a<sp/>single<sp/>color<sp/>with<sp/>alpha<sp/>0<sp/>==&gt;<sp/>color<sp/>key</highlight></codeline>
<codeline lineno="5530"><highlight class="comment">returns<sp/>2<sp/>if<sp/>the<sp/>palette<sp/>is<sp/>semi-translucent.</highlight></codeline>
<codeline lineno="5531"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>getPaletteTranslucency(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>palette,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>palettesize)</highlight></codeline>
<codeline lineno="5533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0,<sp/>g<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*the<sp/>value<sp/>of<sp/>the<sp/>color<sp/>with<sp/>alpha<sp/>0,<sp/>so<sp/>long<sp/>as<sp/>color<sp/>keying<sp/>is<sp/>possible*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>palettesize;<sp/>++i)</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!key<sp/>&amp;&amp;<sp/>palette[4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>palette[4<sp/>*<sp/>i<sp/>+<sp/>0];<sp/>g<sp/>=<sp/>palette[4<sp/>*<sp/>i<sp/>+<sp/>1];<sp/>b<sp/>=<sp/>palette[4<sp/>*<sp/>i<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(size_t)(-1);<sp/></highlight><highlight class="comment">/*restart<sp/>from<sp/>beginning,<sp/>to<sp/>detect<sp/>earlier<sp/>opaque<sp/>colors<sp/>with<sp/>key&apos;s<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(palette[4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>!=<sp/>255)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*when<sp/>key,<sp/>no<sp/>opaque<sp/>RGB<sp/>may<sp/>have<sp/>key&apos;s<sp/>RGB*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(key<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>palette[i<sp/>*<sp/>4<sp/>+<sp/>0]<sp/>&amp;&amp;<sp/>g<sp/>==<sp/>palette[i<sp/>*<sp/>4<sp/>+<sp/>1]<sp/>&amp;&amp;<sp/>b<sp/>==<sp/>palette[i<sp/>*<sp/>4<sp/>+<sp/>2])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>addUnknownChunks(<ref refid="structucvector" kindref="compound">ucvector</ref>*<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize)</highlight></codeline>
<codeline lineno="5554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>inchunk<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(inchunk<sp/>-<sp/>data)<sp/>&lt;<sp/>datasize)</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_TRY_RETURN(lodepng_chunk_append(&amp;out-&gt;data,<sp/>&amp;out-&gt;size,<sp/>inchunk));</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;allocsize<sp/>=<sp/>out-&gt;size;<sp/></highlight><highlight class="comment">/*fix<sp/>the<sp/>allocsize<sp/>again*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/>inchunk<sp/>=<sp/>lodepng_chunk_next(inchunk);</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGState*<sp/>state)</highlight></codeline>
<codeline lineno="5569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/>LodePNGInfo<sp/>info;</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><ref refid="structucvector" kindref="compound">ucvector</ref><sp/>outv;</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*uncompressed<sp/>version<sp/>of<sp/>the<sp/>IDAT<sp/>chunk<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>datasize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*provide<sp/>some<sp/>proper<sp/>output<sp/>values<sp/>if<sp/>error<sp/>will<sp/>happen*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/>lodepng_info_init(&amp;info);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/>lodepng_info_copy(&amp;info,<sp/>&amp;state-&gt;info_png);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"></highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((info.color.colortype<sp/>==<sp/>LCT_PALETTE<sp/>||<sp/>state-&gt;encoder.force_palette)</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(info.color.palettesize<sp/>==<sp/>0<sp/>||<sp/>info.color.palettesize<sp/>&gt;<sp/>256))</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>68;<sp/></highlight><highlight class="comment">/*invalid<sp/>palette<sp/>size,<sp/>it<sp/>is<sp/>only<sp/>allowed<sp/>to<sp/>be<sp/>1-256*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;encoder.auto_convert)</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>lodepng_auto_choose_color(&amp;info.color,<sp/>image,<sp/>w,<sp/>h,<sp/>&amp;state-&gt;info_raw);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;encoder.zlibsettings.btype<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>61);<sp/></highlight><highlight class="comment">/*error:<sp/>unexisting<sp/>btype*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;info_png.interlace_method<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>CERROR_RETURN_ERROR(state-&gt;error,<sp/>71);<sp/></highlight><highlight class="comment">/*error:<sp/>unexisting<sp/>interlace<sp/>mode*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>checkColorValidity(info.color.colortype,<sp/>info.color.bitdepth);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;<sp/></highlight><highlight class="comment">/*error:<sp/>unexisting<sp/>color<sp/>type<sp/>given*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/>state-&gt;error<sp/>=<sp/>checkColorValidity(state-&gt;info_raw.colortype,<sp/>state-&gt;info_raw.bitdepth);</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;<sp/></highlight><highlight class="comment">/*error:<sp/>unexisting<sp/>color<sp/>type<sp/>given*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"></highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lodepng_color_mode_equal(&amp;state-&gt;info_raw,<sp/>&amp;info.color))</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>converted;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(w<sp/>*<sp/>h<sp/>*<sp/>lodepng_get_bpp(&amp;info.color)<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>converted<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)lodepng_malloc(size);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!converted<sp/>&amp;&amp;<sp/>size)<sp/>state-&gt;error<sp/>=<sp/>83;<sp/></highlight><highlight class="comment">/*alloc<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error)</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>lodepng_convert(converted,<sp/>image,<sp/>&amp;info.color,<sp/>&amp;state-&gt;info_raw,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!state-&gt;error)<sp/>preProcessScanlines(&amp;data,<sp/>&amp;datasize,<sp/>converted,<sp/>w,<sp/>h,<sp/>&amp;info,<sp/>&amp;state-&gt;encoder);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(converted);</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>preProcessScanlines(&amp;data,<sp/>&amp;datasize,<sp/>image,<sp/>w,<sp/>h,<sp/>&amp;info,<sp/>&amp;state-&gt;encoder);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/>ucvector_init(&amp;outv);</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!state-&gt;error)<sp/></highlight><highlight class="comment">/*while<sp/>only<sp/>executed<sp/>once,<sp/>to<sp/>break<sp/>on<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*write<sp/>signature<sp/>and<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>writeSignature(&amp;outv);</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*IHDR*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/>addChunk_IHDR(&amp;outv,<sp/>w,<sp/>h,<sp/>info.color.colortype,<sp/>info.color.bitdepth,<sp/>info.interlace_method);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*unknown<sp/>chunks<sp/>between<sp/>IHDR<sp/>and<sp/>PLTE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.unknown_chunks_data[0])</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>addUnknownChunks(&amp;outv,<sp/>info.unknown_chunks_data[0],<sp/>info.unknown_chunks_size[0]);</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PLTE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.color.colortype<sp/>==<sp/>LCT_PALETTE)</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_PLTE(&amp;outv,<sp/>&amp;info.color);</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;encoder.force_palette<sp/>&amp;&amp;<sp/>(info.color.colortype<sp/>==<sp/>LCT_RGB<sp/>||<sp/>info.color.colortype<sp/>==<sp/>LCT_RGBA))</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_PLTE(&amp;outv,<sp/>&amp;info.color);</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tRNS*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.color.colortype<sp/>==<sp/>LCT_PALETTE<sp/>&amp;&amp;<sp/>getPaletteTranslucency(info.color.palette,<sp/>info.color.palettesize)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_tRNS(&amp;outv,<sp/>&amp;info.color);</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((info.color.colortype<sp/>==<sp/>LCT_GREY<sp/>||<sp/>info.color.colortype<sp/>==<sp/>LCT_RGB)<sp/>&amp;&amp;<sp/>info.color.key_defined)</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_tRNS(&amp;outv,<sp/>&amp;info.color);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*bKGD<sp/>(must<sp/>come<sp/>between<sp/>PLTE<sp/>and<sp/>the<sp/>IDAt<sp/>chunks*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.background_defined)<sp/>addChunk_bKGD(&amp;outv,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*pHYs<sp/>(must<sp/>come<sp/>before<sp/>the<sp/>IDAT<sp/>chunks)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.phys_defined)<sp/>addChunk_pHYs(&amp;outv,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"></highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*unknown<sp/>chunks<sp/>between<sp/>PLTE<sp/>and<sp/>IDAT*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.unknown_chunks_data[1])</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>addUnknownChunks(&amp;outv,<sp/>info.unknown_chunks_data[1],<sp/>info.unknown_chunks_size[1]);</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*IDAT<sp/>(multiple<sp/>IDAT<sp/>chunks<sp/>must<sp/>be<sp/>consecutive)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>addChunk_IDAT(&amp;outv,<sp/>data,<sp/>datasize,<sp/>&amp;state-&gt;encoder.zlibsettings);</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tIME*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.time_defined)<sp/>addChunk_tIME(&amp;outv,<sp/>&amp;info.time);</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*tEXt<sp/>and/or<sp/>zTXt*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info.text_num;<sp/>++i)</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strlen(info.text_keys[i])<sp/>&gt;<sp/>79)</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>66;<sp/></highlight><highlight class="comment">/*text<sp/>chunk<sp/>too<sp/>large*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strlen(info.text_keys[i])<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>67;<sp/></highlight><highlight class="comment">/*text<sp/>chunk<sp/>too<sp/>small*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;encoder.text_compression)</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_zTXt(&amp;outv,<sp/>info.text_keys[i],<sp/>info.text_strings[i],<sp/>&amp;state-&gt;encoder.zlibsettings);</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_tEXt(&amp;outv,<sp/>info.text_keys[i],<sp/>info.text_strings[i]);</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*LodePNG<sp/>version<sp/>id<sp/>in<sp/>text<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;encoder.add_id)</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>alread_added_id_text<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info.text_num;<sp/>++i)</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(info.text_keys[i],<sp/></highlight><highlight class="stringliteral">&quot;LodePNG&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alread_added_id_text<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alread_added_id_text<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_tEXt(&amp;outv,<sp/></highlight><highlight class="stringliteral">&quot;LodePNG&quot;</highlight><highlight class="normal">,<sp/>LODEPNG_VERSION_STRING);<sp/></highlight><highlight class="comment">/*it&apos;s<sp/>shorter<sp/>as<sp/>tEXt<sp/>than<sp/>as<sp/>zTXt<sp/>chunk*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*iTXt*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>info.itext_num;<sp/>++i)</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strlen(info.itext_keys[i])<sp/>&gt;<sp/>79)</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>66;<sp/></highlight><highlight class="comment">/*text<sp/>chunk<sp/>too<sp/>large*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strlen(info.itext_keys[i])<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>67;<sp/></highlight><highlight class="comment">/*text<sp/>chunk<sp/>too<sp/>small*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addChunk_iTXt(&amp;outv,<sp/>state-&gt;encoder.text_compression,</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.itext_keys[i],<sp/>info.itext_langtags[i],<sp/>info.itext_transkeys[i],<sp/>info.itext_strings[i],</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;state-&gt;encoder.zlibsettings);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*unknown<sp/>chunks<sp/>between<sp/>IDAT<sp/>and<sp/>IEND*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(info.unknown_chunks_data[2])</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;error<sp/>=<sp/>addUnknownChunks(&amp;outv,<sp/>info.unknown_chunks_data[2],<sp/>info.unknown_chunks_size[2]);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state-&gt;error)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/>addChunk_IEND(&amp;outv);</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*this<sp/>isn&apos;t<sp/>really<sp/>a<sp/>while<sp/>loop;<sp/>no<sp/>error<sp/>happened<sp/>so<sp/>break<sp/>out<sp/>now!*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/>lodepng_info_cleanup(&amp;info);</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/>lodepng_free(data);</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*instead<sp/>of<sp/>cleaning<sp/>the<sp/>vector<sp/>up,<sp/>give<sp/>it<sp/>to<sp/>the<sp/>output*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/>*out<sp/>=<sp/>outv.data;</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/>*outsize<sp/>=<sp/>outv.size;</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"></highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state-&gt;error;</highlight></codeline>
<codeline lineno="5757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode_memory(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,<sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="5761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/>LodePNGState<sp/>state;</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/>lodepng_state_init(&amp;state);</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/>state.info_raw.colortype<sp/>=<sp/>colortype;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/>state.info_raw.bitdepth<sp/>=<sp/>bitdepth;</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/>state.info_png.color.colortype<sp/>=<sp/>colortype;</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/>state.info_png.color.bitdepth<sp/>=<sp/>bitdepth;</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/>lodepng_encode(out,<sp/>outsize,<sp/>image,<sp/>w,<sp/>h,<sp/>&amp;state);</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>state.error;</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/>lodepng_state_cleanup(&amp;state);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="5776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_encode_memory(out,<sp/>outsize,<sp/>image,<sp/>w,<sp/>h,<sp/>LCT_RGBA,<sp/>8);</highlight></codeline>
<codeline lineno="5778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"></highlight></codeline>
<codeline lineno="5780"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode24(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>outsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="5781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_encode_memory(out,<sp/>outsize,<sp/>image,<sp/>w,<sp/>h,<sp/>LCT_RGB,<sp/>8);</highlight></codeline>
<codeline lineno="5783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5786"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="5788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize;</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>lodepng_encode_memory(&amp;buffer,<sp/>&amp;buffersize,<sp/>image,<sp/>w,<sp/>h,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>lodepng_save_file(buffer,<sp/>buffersize,<sp/>filename);</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"></highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode32_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="5798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_encode_file(filename,<sp/>image,<sp/>w,<sp/>h,<sp/>LCT_RGBA,<sp/>8);</highlight></codeline>
<codeline lineno="5800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lodepng_encode24_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="5803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lodepng_encode_file(filename,<sp/>image,<sp/>w,<sp/>h,<sp/>LCT_RGB,<sp/>8);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_DISK*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"></highlight></codeline>
<codeline lineno="5808"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lodepng_encoder_settings_init(LodePNGEncoderSettings*<sp/>settings)</highlight></codeline>
<codeline lineno="5809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/>lodepng_compress_settings_init(&amp;settings-&gt;zlibsettings);</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/>settings-&gt;filter_palette_zero<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/>settings-&gt;filter_strategy<sp/>=<sp/>LFS_MINSUM;</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/>settings-&gt;auto_convert<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/>settings-&gt;force_palette<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/>settings-&gt;predefined_filters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ANCILLARY_CHUNKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/>settings-&gt;add_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/>settings-&gt;text_compression<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ENCODER*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_PNG*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ERROR_TEXT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5826"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5827"><highlight class="comment">This<sp/>returns<sp/>the<sp/>description<sp/>of<sp/>a<sp/>numerical<sp/>error<sp/>code<sp/>in<sp/>English.<sp/>This<sp/>is<sp/>also</highlight></codeline>
<codeline lineno="5828"><highlight class="comment">the<sp/>documentation<sp/>of<sp/>all<sp/>the<sp/>error<sp/>codes.</highlight></codeline>
<codeline lineno="5829"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lodepng_error_text(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code)</highlight></codeline>
<codeline lineno="5831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(code)</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>error,<sp/>everything<sp/>went<sp/>ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nothing<sp/>done<sp/>yet&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*the<sp/>Encoder/Decoder<sp/>has<sp/>done<sp/>nothing<sp/>yet,<sp/>error<sp/>checking<sp/>makes<sp/>no<sp/>sense<sp/>yet*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>input<sp/>memory<sp/>reached<sp/>without<sp/>huffman<sp/>end<sp/>code&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*while<sp/>huffman<sp/>decoding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>code<sp/>tree<sp/>made<sp/>it<sp/>jump<sp/>outside<sp/>of<sp/>huffman<sp/>tree&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*while<sp/>huffman<sp/>decoding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unexisting<sp/>code<sp/>while<sp/>processing<sp/>dynamic<sp/>deflate<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>17:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>18:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>distance<sp/>code<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>19:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>20:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>deflate<sp/>block<sp/>BTYPE<sp/>encountered<sp/>while<sp/>decoding&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>21:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;NLEN<sp/>is<sp/>not<sp/>ones<sp/>complement<sp/>of<sp/>LEN<sp/>in<sp/>a<sp/>deflate<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached<sp/>while<sp/>inflating:</highlight></codeline>
<codeline lineno="5848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>inflated<sp/>deflate<sp/>data<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>amount<sp/>of<sp/>bytes<sp/>required<sp/>to<sp/>fill<sp/>up</highlight></codeline>
<codeline lineno="5849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>all<sp/>the<sp/>pixels<sp/>of<sp/>the<sp/>image,<sp/>given<sp/>the<sp/>color<sp/>depth<sp/>and<sp/>image<sp/>dimensions.<sp/>Something<sp/>that<sp/>doesn&apos;t</highlight></codeline>
<codeline lineno="5850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>happen<sp/>in<sp/>a<sp/>normal,<sp/>well<sp/>encoded,<sp/>PNG<sp/>image.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>22:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>out<sp/>buffer<sp/>memory<sp/>reached<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>23:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>in<sp/>buffer<sp/>memory<sp/>reached<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>24:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>FCHECK<sp/>in<sp/>zlib<sp/>header&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>25:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>compression<sp/>method<sp/>in<sp/>zlib<sp/>header&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>26:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FDICT<sp/>encountered<sp/>in<sp/>zlib<sp/>header<sp/>while<sp/>it&apos;s<sp/>not<sp/>used<sp/>for<sp/>PNG&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>27:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;PNG<sp/>file<sp/>is<sp/>smaller<sp/>than<sp/>a<sp/>PNG<sp/>header&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Checks<sp/>the<sp/>magic<sp/>file<sp/>header,<sp/>the<sp/>first<sp/>8<sp/>bytes<sp/>of<sp/>the<sp/>PNG<sp/>file*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>28:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;incorrect<sp/>PNG<sp/>signature,<sp/>it&apos;s<sp/>no<sp/>PNG<sp/>or<sp/>corrupted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>29:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;first<sp/>chunk<sp/>is<sp/>not<sp/>the<sp/>header<sp/>chunk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>30:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;chunk<sp/>length<sp/>too<sp/>large,<sp/>chunk<sp/>broken<sp/>off<sp/>at<sp/>end<sp/>of<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>31:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>PNG<sp/>color<sp/>type<sp/>or<sp/>bpp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>PNG<sp/>compression<sp/>method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>33:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>PNG<sp/>filter<sp/>method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>34:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>PNG<sp/>interlace<sp/>method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>35:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;chunk<sp/>length<sp/>of<sp/>a<sp/>chunk<sp/>is<sp/>too<sp/>large<sp/>or<sp/>the<sp/>chunk<sp/>too<sp/>small&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>36:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>PNG<sp/>filter<sp/>type<sp/>encountered&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>37:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>bit<sp/>depth<sp/>for<sp/>this<sp/>color<sp/>type<sp/>given&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>38:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>palette<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*more<sp/>than<sp/>256<sp/>colors*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>39:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>palette<sp/>alpha<sp/>values<sp/>given<sp/>in<sp/>tRNS<sp/>chunk<sp/>than<sp/>there<sp/>are<sp/>colors<sp/>in<sp/>the<sp/>palette&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>40:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tRNS<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>greyscale<sp/>image&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>41:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tRNS<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>RGB<sp/>image&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>42:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tRNS<sp/>chunk<sp/>appeared<sp/>while<sp/>it<sp/>was<sp/>not<sp/>allowed<sp/>for<sp/>this<sp/>color<sp/>type&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>43:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>palette<sp/>image&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>44:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>greyscale<sp/>image&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>45:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bKGD<sp/>chunk<sp/>has<sp/>wrong<sp/>size<sp/>for<sp/>RGB<sp/>image&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>48:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>input<sp/>buffer<sp/>given<sp/>to<sp/>decoder.<sp/>Maybe<sp/>caused<sp/>by<sp/>non-existing<sp/>file?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>49:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jumped<sp/>past<sp/>memory<sp/>while<sp/>generating<sp/>dynamic<sp/>huffman<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>50:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jumped<sp/>past<sp/>memory<sp/>while<sp/>generating<sp/>dynamic<sp/>huffman<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>51:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jumped<sp/>past<sp/>memory<sp/>while<sp/>inflating<sp/>huffman<sp/>block&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>52:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jumped<sp/>past<sp/>memory<sp/>while<sp/>inflating&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>53:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;size<sp/>of<sp/>zlib<sp/>data<sp/>too<sp/>small&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>54:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;repeat<sp/>symbol<sp/>in<sp/>tree<sp/>while<sp/>there<sp/>was<sp/>no<sp/>value<sp/>symbol<sp/>yet&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*jumped<sp/>past<sp/>tree<sp/>while<sp/>generating<sp/>huffman<sp/>tree,<sp/>this<sp/>could<sp/>be<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="5884"><highlight class="comment"><sp/><sp/><sp/><sp/>tree<sp/>will<sp/>have<sp/>more<sp/>leaves<sp/>than<sp/>symbols<sp/>after<sp/>generating<sp/>it<sp/>out<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="5885"><highlight class="comment"><sp/><sp/><sp/><sp/>given<sp/>lenghts.<sp/>They<sp/>call<sp/>this<sp/>an<sp/>oversubscribed<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree<sp/>in<sp/>zlib.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>55:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;jumped<sp/>past<sp/>tree<sp/>while<sp/>generating<sp/>huffman<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>56:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;given<sp/>output<sp/>image<sp/>colortype<sp/>or<sp/>bitdepth<sp/>not<sp/>supported<sp/>for<sp/>color<sp/>conversion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>57:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>CRC<sp/>encountered<sp/>(checking<sp/>CRC<sp/>can<sp/>be<sp/>disabled)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>58:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>ADLER32<sp/>encountered<sp/>(checking<sp/>ADLER32<sp/>can<sp/>be<sp/>disabled)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>59:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;requested<sp/>color<sp/>conversion<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>60:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>window<sp/>size<sp/>given<sp/>in<sp/>the<sp/>settings<sp/>of<sp/>the<sp/>encoder<sp/>(must<sp/>be<sp/>0-32768)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>61:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>BTYPE<sp/>given<sp/>in<sp/>the<sp/>settings<sp/>of<sp/>the<sp/>encoder<sp/>(only<sp/>0,<sp/>1<sp/>and<sp/>2<sp/>are<sp/>allowed)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*LodePNG<sp/>leaves<sp/>the<sp/>choice<sp/>of<sp/>RGB<sp/>to<sp/>greyscale<sp/>conversion<sp/>formula<sp/>to<sp/>the<sp/>user.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>62:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;conversion<sp/>from<sp/>color<sp/>to<sp/>greyscale<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>63:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;length<sp/>of<sp/>a<sp/>chunk<sp/>too<sp/>long,<sp/>max<sp/>allowed<sp/>for<sp/>PNG<sp/>is<sp/>2147483647<sp/>bytes<sp/>per<sp/>chunk&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*(2^31-1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*this<sp/>would<sp/>result<sp/>in<sp/>the<sp/>inability<sp/>of<sp/>a<sp/>deflated<sp/>block<sp/>to<sp/>ever<sp/>contain<sp/>an<sp/>end<sp/>code.<sp/>It<sp/>must<sp/>be<sp/>at<sp/>least<sp/>1.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>length<sp/>of<sp/>the<sp/>END<sp/>symbol<sp/>256<sp/>in<sp/>the<sp/>Huffman<sp/>tree<sp/>is<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>66:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>length<sp/>of<sp/>a<sp/>text<sp/>chunk<sp/>keyword<sp/>given<sp/>to<sp/>the<sp/>encoder<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>maximum<sp/>of<sp/>79<sp/>bytes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>67:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>length<sp/>of<sp/>a<sp/>text<sp/>chunk<sp/>keyword<sp/>given<sp/>to<sp/>the<sp/>encoder<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>minimum<sp/>of<sp/>1<sp/>byte&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>68:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>to<sp/>encode<sp/>a<sp/>PLTE<sp/>chunk<sp/>with<sp/>a<sp/>palette<sp/>that<sp/>has<sp/>less<sp/>than<sp/>1<sp/>or<sp/>more<sp/>than<sp/>256<sp/>colors&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>69:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>chunk<sp/>type<sp/>with<sp/>&apos;critical&apos;<sp/>flag<sp/>encountered<sp/>by<sp/>the<sp/>decoder&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>71:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unexisting<sp/>interlace<sp/>mode<sp/>given<sp/>to<sp/>encoder<sp/>(must<sp/>be<sp/>0<sp/>or<sp/>1)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>72:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;while<sp/>decoding,<sp/>unexisting<sp/>compression<sp/>method<sp/>encountering<sp/>in<sp/>zTXt<sp/>or<sp/>iTXt<sp/>chunk<sp/>(it<sp/>must<sp/>be<sp/>0)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>73:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>tIME<sp/>chunk<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>74:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>pHYs<sp/>chunk<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*length<sp/>could<sp/>be<sp/>wrong,<sp/>or<sp/>data<sp/>chopped<sp/>off*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>75:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>null<sp/>termination<sp/>char<sp/>found<sp/>while<sp/>decoding<sp/>text<sp/>chunk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>76:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;iTXt<sp/>chunk<sp/>too<sp/>short<sp/>to<sp/>contain<sp/>required<sp/>bytes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>77:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;integer<sp/>overflow<sp/>in<sp/>buffer<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>78:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>file<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*file<sp/>doesn&apos;t<sp/>exist<sp/>or<sp/>couldn&apos;t<sp/>be<sp/>opened<sp/>for<sp/>reading*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>79:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>file<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>80:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>creating<sp/>a<sp/>tree<sp/>of<sp/>0<sp/>symbols&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>81:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;lazy<sp/>matching<sp/>at<sp/>pos<sp/>0<sp/>is<sp/>impossible&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>82:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;color<sp/>conversion<sp/>to<sp/>palette<sp/>requested<sp/>while<sp/>a<sp/>color<sp/>isn&apos;t<sp/>in<sp/>palette&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>83:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;memory<sp/>allocation<sp/>failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>84:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;given<sp/>image<sp/>too<sp/>small<sp/>to<sp/>contain<sp/>all<sp/>pixels<sp/>to<sp/>be<sp/>encoded&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>86:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;impossible<sp/>offset<sp/>in<sp/>lz77<sp/>encoding<sp/>(internal<sp/>bug)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>87:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;must<sp/>provide<sp/>custom<sp/>zlib<sp/>function<sp/>pointer<sp/>if<sp/>LODEPNG_COMPILE_ZLIB<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>88:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>filter<sp/>strategy<sp/>given<sp/>for<sp/>LodePNGEncoderSettings.filter_strategy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>89:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;text<sp/>chunk<sp/>keyword<sp/>too<sp/>short<sp/>or<sp/>long:<sp/>must<sp/>have<sp/>size<sp/>1-79&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>windowsize<sp/>in<sp/>the<sp/>LodePNGCompressSettings.<sp/>Requiring<sp/>POT(==&gt;<sp/>&amp;<sp/>instead<sp/>of<sp/>%)<sp/>makes<sp/>encoding<sp/>12%<sp/>faster.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>90:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;windowsize<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>91:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>decompressed<sp/>idat<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>92:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>pixels,<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>93:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;zero<sp/>width<sp/>or<sp/>height<sp/>is<sp/>invalid&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>94:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;header<sp/>chunk<sp/>must<sp/>have<sp/>a<sp/>size<sp/>of<sp/>13<sp/>bytes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>error<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_ERROR_TEXT*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5931"><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5933"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5934"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//<sp/>C++<sp/>Wrapper<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5936"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"></highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lodepng</highlight></codeline>
<codeline lineno="5940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"></highlight></codeline>
<codeline lineno="5942"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>load_file(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="5944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>file(filename.c_str(),<sp/>std::ios::in|std::ios::binary|std::ios::ate);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>78;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"></highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*get<sp/>filesize*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file.seekg(0,<sp/>std::ios::end).good())<sp/>size<sp/>=<sp/>file.tellg();</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file.seekg(0,<sp/>std::ios::beg).good())<sp/>size<sp/>-=<sp/>file.tellg();</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"></highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*read<sp/>contents<sp/>of<sp/>the<sp/>file<sp/>into<sp/>the<sp/>vector*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/>buffer.resize(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(size));</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&gt;<sp/>0)<sp/>file.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;buffer[0]),<sp/>size);</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>OK<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"></highlight></codeline>
<codeline lineno="5960"><highlight class="normal"></highlight><highlight class="comment">/*write<sp/>given<sp/>buffer<sp/>to<sp/>the<sp/>file,<sp/>overwriting<sp/>the<sp/>file,<sp/>it<sp/>doesn&apos;t<sp/>append<sp/>to<sp/>it.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5961"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>save_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="5962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>file(filename.c_str(),<sp/>std::ios::out|std::ios::binary);</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!file)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>79;</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/>file.write(buffer.empty()<sp/>?<sp/>0<sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;buffer[0],<sp/>std::streamsize(buffer.size()));</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_DISK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ZLIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5972"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decompress(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings&amp;<sp/>settings)</highlight></codeline>
<codeline lineno="5974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>zlib_decompress(&amp;buffer,<sp/>&amp;buffersize,<sp/>in,<sp/>insize,<sp/>&amp;settings);</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer)</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="5984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decompress(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGDecompressSettings&amp;<sp/>settings)</highlight></codeline>
<codeline lineno="5988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decompress(out,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>in.size(),<sp/>settings);</highlight></codeline>
<codeline lineno="5990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_DECODER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>compress(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings&amp;<sp/>settings)</highlight></codeline>
<codeline lineno="5996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>zlib_compress(&amp;buffer,<sp/>&amp;buffersize,<sp/>in,<sp/>insize,<sp/>&amp;settings);</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer)</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"></highlight></codeline>
<codeline lineno="6008"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>compress(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LodePNGCompressSettings&amp;<sp/>settings)</highlight></codeline>
<codeline lineno="6010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compress(out,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>in.size(),<sp/>settings);</highlight></codeline>
<codeline lineno="6012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_ENCODER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_ZLIB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_PNG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight></codeline>
<codeline lineno="6019"><highlight class="normal">State::State()</highlight></codeline>
<codeline lineno="6020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/>lodepng_state_init(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"></highlight></codeline>
<codeline lineno="6024"><highlight class="normal">State::State(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>other)</highlight></codeline>
<codeline lineno="6025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/>lodepng_state_init(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/>lodepng_state_copy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other);</highlight></codeline>
<codeline lineno="6028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal">State::~State()</highlight></codeline>
<codeline lineno="6031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/>lodepng_state_cleanup(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"></highlight></codeline>
<codeline lineno="6035"><highlight class="normal">State&amp;<sp/>State::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>other)</highlight></codeline>
<codeline lineno="6036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/>lodepng_state_copy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other);</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"></highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DECODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6042"><highlight class="normal"></highlight></codeline>
<codeline lineno="6043"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize,<sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>lodepng_decode_memory(&amp;buffer,<sp/>&amp;w,<sp/>&amp;h,<sp/>in,<sp/>insize,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer<sp/>&amp;&amp;<sp/>!error)</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/>State<sp/>state;</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/>state.info_raw.colortype<sp/>=<sp/>colortype;</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/>state.info_raw.bitdepth<sp/>=<sp/>bitdepth;</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize<sp/>=<sp/>lodepng_get_raw_size(w,<sp/>h,<sp/>&amp;state.info_raw);</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>h,</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decode(out,<sp/>w,<sp/>h,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>(unsigned)in.size(),<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"></highlight></codeline>
<codeline lineno="6066"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>h,</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State&amp;<sp/>state,</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>insize)</highlight></codeline>
<codeline lineno="6069"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>lodepng_decode(&amp;buffer,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;state,<sp/>in,<sp/>insize);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer<sp/>&amp;&amp;<sp/>!error)</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize<sp/>=<sp/>lodepng_get_raw_size(w,<sp/>h,<sp/>&amp;state.info_raw);</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>h,</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State&amp;<sp/>state,</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in)</highlight></codeline>
<codeline lineno="6084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decode(out,<sp/>w,<sp/>h,<sp/>state,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>in.size());</highlight></codeline>
<codeline lineno="6086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight></codeline>
<codeline lineno="6088"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6089"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>decode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&amp;<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>load_file(buffer,<sp/>filename);</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decode(out,<sp/>w,<sp/>h,<sp/>buffer,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_DECODER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_DISK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_ENCODER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize;</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>lodepng_encode_memory(&amp;buffer,<sp/>&amp;buffersize,<sp/>in,<sp/>w,<sp/>h,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer)</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_get_raw_size_lct(w,<sp/>h,<sp/>colortype,<sp/>bitdepth)<sp/>&gt;<sp/>in.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>84;</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encode(out,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>w,<sp/>h,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"></highlight></codeline>
<codeline lineno="6123"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State&amp;<sp/>state)</highlight></codeline>
<codeline lineno="6126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffersize;</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>lodepng_encode(&amp;buffer,<sp/>&amp;buffersize,<sp/>in,<sp/>w,<sp/>h,<sp/>&amp;state);</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buffer)</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/>out.insert(out.end(),<sp/>&amp;buffer[0],<sp/>&amp;buffer[buffersize]);</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/>lodepng_free(buffer);</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"></highlight></codeline>
<codeline lineno="6138"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>out,</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State&amp;<sp/>state)</highlight></codeline>
<codeline lineno="6141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_get_raw_size(w,<sp/>h,<sp/>&amp;state.info_raw)<sp/>&gt;<sp/>in.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>84;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encode(out,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>w,<sp/>h,<sp/>state);</highlight></codeline>
<codeline lineno="6144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"></highlight></codeline>
<codeline lineno="6146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LODEPNG_COMPILE_DISK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>encode(buffer,<sp/>in,<sp/>w,<sp/>h,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!error)<sp/>error<sp/>=<sp/>save_file(buffer,<sp/>filename);</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="6155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>encode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>in,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>h,</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LodePNGColorType<sp/>colortype,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>bitdepth)</highlight></codeline>
<codeline lineno="6160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lodepng_get_raw_size_lct(w,<sp/>h,<sp/>colortype,<sp/>bitdepth)<sp/>&gt;<sp/>in.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>84;</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encode(filename,<sp/>in.empty()<sp/>?<sp/>0<sp/>:<sp/>&amp;in[0],<sp/>w,<sp/>h,<sp/>colortype,<sp/>bitdepth);</highlight></codeline>
<codeline lineno="6163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_DISK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_ENCODER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LODEPNG_COMPILE_PNG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6167"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>lodepng<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*LODEPNG_COMPILE_CPP*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="nTiled/src/lodepng.cpp"/>
  </compounddef>
</doxygen>
